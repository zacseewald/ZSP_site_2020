{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar pLimit = require('p-limit');\n\nvar EndError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(EndError, _Error);\n\n  function EndError(value) {\n    var _this;\n\n    _classCallCheck(this, EndError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EndError).call(this));\n    _this.value = value;\n    return _this;\n  }\n\n  return EndError;\n}(_wrapNativeSuper(Error)); // The input can also be a promise, so we `Promise.resolve()` it\n\n\nvar testElement = function testElement(el, tester) {\n  return Promise.resolve(el).then(tester);\n}; // The input can also be a promise, so we `Promise.all()` them both\n\n\nvar finder = function finder(el) {\n  return Promise.all(el).then(function (val) {\n    return val[1] === true && Promise.reject(new EndError(val[0]));\n  });\n};\n\nmodule.exports = function (iterable, tester, opts) {\n  opts = Object.assign({\n    concurrency: Infinity,\n    preserveOrder: true\n  }, opts);\n  var limit = pLimit(opts.concurrency); // Start all the promises concurrently with optional limit\n\n  var items = _toConsumableArray(iterable).map(function (el) {\n    return [el, limit(testElement, el, tester)];\n  }); // Check the promises either serially or concurrently\n\n\n  var checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n  return Promise.all(items.map(function (el) {\n    return checkLimit(finder, el);\n  })).then(function () {}).catch(function (err) {\n    return err instanceof EndError ? err.value : Promise.reject(err);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}