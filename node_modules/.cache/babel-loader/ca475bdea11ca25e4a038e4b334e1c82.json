{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar Template = require(\"../Template\");\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {Object} UsedWasmDependency\n * @property {WebAssemblyImportDependency} dependency the dependency\n * @property {string} name the export name\n * @property {string} module the module name\n */\n\n\nvar MANGLED_MODULE = \"a\";\n/**\n * @param {Module} module the module\n * @param {boolean} mangle mangle module and export names\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\n */\n\nvar getUsedDependencies = function getUsedDependencies(module, mangle) {\n  /** @type {UsedWasmDependency[]} */\n  var array = [];\n  var importIndex = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = module.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var dep = _step.value;\n\n      if (dep instanceof WebAssemblyImportDependency) {\n        if (dep.description.type === \"GlobalType\" || dep.module === null) {\n          continue;\n        }\n\n        var exportName = dep.name; // TODO add the following 3 lines when removing of ModuleExport is possible\n        // const importedModule = dep.module;\n        // const usedName = importedModule && importedModule.isUsed(exportName);\n        // if (usedName !== false) {\n\n        if (mangle) {\n          array.push({\n            dependency: dep,\n            name: Template.numberToIdentifer(importIndex++),\n            module: MANGLED_MODULE\n          });\n        } else {\n          array.push({\n            dependency: dep,\n            name: exportName,\n            module: dep.request\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return array;\n};\n\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;","map":null,"metadata":{},"sourceType":"script"}