{"ast":null,"code":"module.exports = EntryWriter;\n\nvar tar = require(\"../tar.js\"),\n    TarHeader = require(\"./header.js\"),\n    Entry = require(\"./entry.js\"),\n    inherits = require(\"inherits\"),\n    BlockStream = require(\"block-stream\"),\n    ExtendedHeaderWriter,\n    Stream = require(\"stream\").Stream,\n    EOF = {};\n\ninherits(EntryWriter, Stream);\n\nfunction EntryWriter(props) {\n  var me = this;\n\n  if (!(me instanceof EntryWriter)) {\n    return new EntryWriter(props);\n  }\n\n  Stream.apply(this);\n  me.writable = true;\n  me.readable = true;\n  me._stream = new BlockStream(512);\n\n  me._stream.on(\"data\", function (c) {\n    me.emit(\"data\", c);\n  });\n\n  me._stream.on(\"drain\", function () {\n    me.emit(\"drain\");\n  });\n\n  me._stream.on(\"end\", function () {\n    me.emit(\"end\");\n    me.emit(\"close\");\n  });\n\n  me.props = props;\n\n  if (props.type === \"Directory\") {\n    props.size = 0;\n  }\n\n  props.ustar = \"ustar\\0\";\n  props.ustarver = \"00\";\n  me.path = props.path;\n  me._buffer = [];\n  me._didHeader = false;\n  me._meta = false;\n  me.on(\"pipe\", function () {\n    me._process();\n  });\n}\n\nEntryWriter.prototype.write = function (c) {\n  // console.error(\".. ew write\")\n  if (this._ended) return this.emit(\"error\", new Error(\"write after end\"));\n\n  this._buffer.push(c);\n\n  this._process();\n\n  this._needDrain = this._buffer.length > 0;\n  return !this._needDrain;\n};\n\nEntryWriter.prototype.end = function (c) {\n  // console.error(\".. ew end\")\n  if (c) this._buffer.push(c);\n\n  this._buffer.push(EOF);\n\n  this._ended = true;\n\n  this._process();\n\n  this._needDrain = this._buffer.length > 0;\n};\n\nEntryWriter.prototype.pause = function () {\n  // console.error(\".. ew pause\")\n  this._paused = true;\n  this.emit(\"pause\");\n};\n\nEntryWriter.prototype.resume = function () {\n  // console.error(\".. ew resume\")\n  this._paused = false;\n  this.emit(\"resume\");\n\n  this._process();\n};\n\nEntryWriter.prototype.add = function (entry) {\n  // console.error(\".. ew add\")\n  if (!this.parent) return this.emit(\"error\", new Error(\"no parent\")); // make sure that the _header and such is emitted, and clear out\n  // the _currentEntry link on the parent.\n\n  if (!this._ended) this.end();\n  return this.parent.add(entry);\n};\n\nEntryWriter.prototype._header = function () {\n  // console.error(\".. ew header\")\n  if (this._didHeader) return;\n  this._didHeader = true;\n  var headerBlock = TarHeader.encode(this.props);\n\n  if (this.props.needExtended && !this._meta) {\n    var me = this;\n    ExtendedHeaderWriter = ExtendedHeaderWriter || require(\"./extended-header-writer.js\");\n    ExtendedHeaderWriter(this.props).on(\"data\", function (c) {\n      me.emit(\"data\", c);\n    }).on(\"error\", function (er) {\n      me.emit(\"error\", er);\n    }).end();\n  } // console.error(\".. .. ew headerBlock emitting\")\n\n\n  this.emit(\"data\", headerBlock);\n  this.emit(\"header\");\n};\n\nEntryWriter.prototype._process = function () {\n  // console.error(\".. .. ew process\")\n  if (!this._didHeader && !this._meta) {\n    this._header();\n  }\n\n  if (this._paused || this._processing) {\n    // console.error(\".. .. .. paused=%j, processing=%j\", this._paused, this._processing)\n    return;\n  }\n\n  this._processing = true;\n  var buf = this._buffer;\n\n  for (var i = 0; i < buf.length; i++) {\n    // console.error(\".. .. .. i=%d\", i)\n    var c = buf[i];\n    if (c === EOF) this._stream.end();else this._stream.write(c);\n\n    if (this._paused) {\n      // console.error(\".. .. .. paused mid-emission\")\n      this._processing = false;\n\n      if (i < buf.length) {\n        this._needDrain = true;\n        this._buffer = buf.slice(i + 1);\n      }\n\n      return;\n    }\n  } // console.error(\".. .. .. emitted\")\n\n\n  this._buffer.length = 0;\n  this._processing = false; // console.error(\".. .. .. emitting drain\")\n\n  this.emit(\"drain\");\n};\n\nEntryWriter.prototype.destroy = function () {};","map":null,"metadata":{},"sourceType":"script"}