{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function RuntimeChunkPlugin(options) {\n    _classCallCheck(this, RuntimeChunkPlugin);\n\n    this.options = Object.assign({\n      name: function name(entrypoint) {\n        return \"runtime~\".concat(entrypoint.name);\n      }\n    }, options);\n  }\n\n  _createClass(RuntimeChunkPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", function () {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = compilation.entrypoints.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var entrypoint = _step.value;\n              var chunk = entrypoint.getRuntimeChunk();\n              var name = _this.options.name;\n\n              if (typeof name === \"function\") {\n                name = name(entrypoint);\n              }\n\n              if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {\n                var newChunk = compilation.addChunk(name);\n                newChunk.preventIntegration = true;\n                entrypoint.unshiftChunk(newChunk);\n                newChunk.addGroup(entrypoint);\n                entrypoint.setRuntimeChunk(newChunk);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return RuntimeChunkPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}