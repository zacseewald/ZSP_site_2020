{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar OccurrenceOrderPlugin =\n/*#__PURE__*/\nfunction () {\n  function OccurrenceOrderPlugin(preferEntry) {\n    _classCallCheck(this, OccurrenceOrderPlugin);\n\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n\n    this.preferEntry = preferEntry;\n  }\n\n  _createClass(OccurrenceOrderPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var preferEntry = this.preferEntry;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", function (compilation) {\n        compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", function (modules) {\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = _m.chunksIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var c = _step4.value;\n                  if (c.canBeInitial()) initial++;\n                  if (c.entryModule === _m) entry++;\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var countOccursInEntry = function countOccursInEntry(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            return sum + initialChunkChunkMap.get(r.module);\n          };\n\n          var countOccurs = function countOccurs(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            var factor = 1;\n\n            if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n              factor = r.dependency.getNumberOfIdOccurrences();\n            }\n\n            if (factor === 0) {\n              return sum;\n            }\n\n            return sum + factor * r.module.getNumberOfChunks();\n          };\n\n          if (preferEntry) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var m = _step2.value;\n                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          var originalOrder = new Map();\n          var i = 0;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _m2 = _step3.value;\n\n              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);\n\n              occursInAllChunksMap.set(_m2, _result);\n              originalOrder.set(_m2, i++);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          modules.sort(function (a, b) {\n            if (preferEntry) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n        compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", function (chunks) {\n          var occursInInitialChunksMap = new Map();\n          var originalOrder = new Map();\n          var i = 0;\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = chunks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var c = _step5.value;\n              var occurs = 0;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = c.groupsIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chunkGroup = _step6.value;\n                  var _iteratorNormalCompletion7 = true;\n                  var _didIteratorError7 = false;\n                  var _iteratorError7 = undefined;\n\n                  try {\n                    for (var _iterator7 = chunkGroup.parentsIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                      var parent = _step7.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _didIteratorError7 = true;\n                    _iteratorError7 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                        _iterator7.return();\n                      }\n                    } finally {\n                      if (_didIteratorError7) {\n                        throw _iteratorError7;\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              occursInInitialChunksMap.set(c, occurs);\n              originalOrder.set(c, i++);\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          chunks.sort(function (a, b) {\n            var aEntryOccurs = occursInInitialChunksMap.get(a);\n            var bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n\n  return OccurrenceOrderPlugin;\n}();\n\nmodule.exports = OccurrenceOrderPlugin;","map":null,"metadata":{},"sourceType":"script"}