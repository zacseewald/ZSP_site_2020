{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Parser = require(\"./Parser\");\n\nvar Template = require(\"./Template\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar JavascriptGenerator = require(\"./JavascriptGenerator\");\n\nvar createHash = require(\"./util/createHash\");\n\nvar JavascriptModulesPlugin =\n/*#__PURE__*/\nfunction () {\n  function JavascriptModulesPlugin() {\n    _classCallCheck(this, JavascriptModulesPlugin);\n  }\n\n  _createClass(JavascriptModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"JavascriptModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        normalModuleFactory.hooks.createParser.for(\"javascript/auto\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"auto\");\n        });\n        normalModuleFactory.hooks.createParser.for(\"javascript/dynamic\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"script\");\n        });\n        normalModuleFactory.hooks.createParser.for(\"javascript/esm\").tap(\"JavascriptModulesPlugin\", function (options) {\n          return new Parser(options, \"module\");\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/auto\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/dynamic\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"javascript/esm\").tap(\"JavascriptModulesPlugin\", function () {\n          return new JavascriptGenerator();\n        });\n        compilation.mainTemplate.hooks.renderManifest.tap(\"JavascriptModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var hash = options.hash;\n          var fullHash = options.fullHash;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n          var filenameTemplate = chunk.filenameTemplate || outputOptions.filename;\n          var useChunkHash = compilation.mainTemplate.useChunkHash(chunk);\n          result.push({\n            render: function render() {\n              return compilation.mainTemplate.render(hash, chunk, moduleTemplates.javascript, dependencyTemplates);\n            },\n            filenameTemplate: filenameTemplate,\n            pathOptions: {\n              noChunkHash: !useChunkHash,\n              contentHashType: \"javascript\",\n              chunk: chunk\n            },\n            identifier: \"chunk\".concat(chunk.id),\n            hash: useChunkHash ? chunk.hash : fullHash\n          });\n          return result;\n        });\n        compilation.mainTemplate.hooks.modules.tap(\"JavascriptModulesPlugin\", function (source, chunk, hash, moduleTemplate, dependencyTemplates) {\n          return Template.renderChunkModules(chunk, function (m) {\n            return typeof m.source === \"function\";\n          }, moduleTemplate, dependencyTemplates, \"/******/ \");\n        });\n        compilation.chunkTemplate.hooks.renderManifest.tap(\"JavascriptModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n          var filenameTemplate = chunk.filenameTemplate || outputOptions.chunkFilename;\n          result.push({\n            render: function render() {\n              return _this.renderJavascript(compilation.chunkTemplate, chunk, moduleTemplates.javascript, dependencyTemplates);\n            },\n            filenameTemplate: filenameTemplate,\n            pathOptions: {\n              chunk: chunk,\n              contentHashType: \"javascript\"\n            },\n            identifier: \"chunk\".concat(chunk.id),\n            hash: chunk.hash\n          });\n          return result;\n        });\n        compilation.hooks.contentHash.tap(\"JavascriptModulesPlugin\", function (chunk) {\n          var outputOptions = compilation.outputOptions;\n          var hashSalt = outputOptions.hashSalt,\n              hashDigest = outputOptions.hashDigest,\n              hashDigestLength = outputOptions.hashDigestLength,\n              hashFunction = outputOptions.hashFunction;\n          var hash = createHash(hashFunction);\n          if (hashSalt) hash.update(hashSalt);\n          var template = chunk.hasRuntime() ? compilation.mainTemplate : compilation.chunkTemplate;\n          hash.update(\"\".concat(chunk.id, \" \"));\n          hash.update(chunk.ids ? chunk.ids.join(\",\") : \"\");\n          template.updateHashForChunk(hash, chunk, compilation.moduleTemplates.javascript, compilation.dependencyTemplates);\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = chunk.modulesIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var m = _step.value;\n\n              if (typeof m.source === \"function\") {\n                hash.update(m.hash);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          chunk.contentHash.javascript = hash.digest(hashDigest).substr(0, hashDigestLength);\n        });\n      });\n    }\n  }, {\n    key: \"renderJavascript\",\n    value: function renderJavascript(chunkTemplate, chunk, moduleTemplate, dependencyTemplates) {\n      var moduleSources = Template.renderChunkModules(chunk, function (m) {\n        return typeof m.source === \"function\";\n      }, moduleTemplate, dependencyTemplates);\n      var core = chunkTemplate.hooks.modules.call(moduleSources, chunk, moduleTemplate, dependencyTemplates);\n      var source = chunkTemplate.hooks.render.call(core, chunk, moduleTemplate, dependencyTemplates);\n\n      if (chunk.hasEntryModule()) {\n        source = chunkTemplate.hooks.renderWithEntry.call(source, chunk);\n      }\n\n      chunk.rendered = true;\n      return new ConcatSource(source, \";\");\n    }\n  }]);\n\n  return JavascriptModulesPlugin;\n}();\n\nmodule.exports = JavascriptModulesPlugin;","map":null,"metadata":{},"sourceType":"script"}