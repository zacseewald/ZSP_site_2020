{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nvar CodeNode =\n/*#__PURE__*/\nfunction () {\n  function CodeNode(generatedCode) {\n    _classCallCheck(this, CodeNode);\n\n    this.generatedCode = generatedCode;\n  }\n\n  _createClass(CodeNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new CodeNode(this.generatedCode);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      var lines = getNumberOfLines(this.generatedCode);\n      var mapping = Array(lines + 1).join(\";\");\n\n      if (lines > 0) {\n        mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\n        if (mappingsContext.unfinishedGeneratedLine > 0) {\n          return mapping + \"A\";\n        } else {\n          return mapping;\n        }\n      } else {\n        var prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n        mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\n        if (prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n          return \"A\";\n        } else {\n          return \"\";\n        }\n      }\n    }\n  }, {\n    key: \"addGeneratedCode\",\n    value: function addGeneratedCode(generatedCode) {\n      this.generatedCode += generatedCode;\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      var generatedCode = fn(this.generatedCode);\n      return new CodeNode(generatedCode);\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      return [this];\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof CodeNode) {\n        this.generatedCode += otherNode.generatedCode;\n        return this;\n      }\n\n      return false;\n    }\n  }]);\n\n  return CodeNode;\n}();\n\nmodule.exports = CodeNode;","map":null,"metadata":{},"sourceType":"script"}