{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n\nvar LoaderOptionsPlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {LoaderOptionsPluginOptions} options options object\n   */\n  function LoaderOptionsPlugin(options) {\n    _classCallCheck(this, LoaderOptionsPlugin);\n\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (typeof options !== \"object\") options = {};\n\n    if (!options.test) {\n      options.test = {\n        test: function test() {\n          return true;\n        }\n      };\n    }\n\n    this.options = options;\n  }\n\n  _createClass(LoaderOptionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", function (compilation) {\n        compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", function (context, module) {\n          var resource = module.resource;\n          if (!resource) return;\n          var i = resource.indexOf(\"?\");\n\n          if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n            var _arr = Object.keys(options);\n\n            for (var _i = 0; _i < _arr.length; _i++) {\n              var key = _arr[_i];\n\n              if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n                continue;\n              }\n\n              context[key] = options[key];\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return LoaderOptionsPlugin;\n}();\n\nmodule.exports = LoaderOptionsPlugin;","map":null,"metadata":{},"sourceType":"script"}