{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Dependency = require(\"../Dependency\");\n\nvar AMDRequireArrayDependency =\n/*#__PURE__*/\nfunction (_Dependency) {\n  _inherits(AMDRequireArrayDependency, _Dependency);\n\n  function AMDRequireArrayDependency(depsArray, range) {\n    var _this;\n\n    _classCallCheck(this, AMDRequireArrayDependency);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AMDRequireArrayDependency).call(this));\n    _this.depsArray = depsArray;\n    _this.range = range;\n    return _this;\n  }\n\n  _createClass(AMDRequireArrayDependency, [{\n    key: \"type\",\n    get: function get() {\n      return \"amd require array\";\n    }\n  }]);\n\n  return AMDRequireArrayDependency;\n}(Dependency);\n\nAMDRequireArrayDependency.Template =\n/*#__PURE__*/\nfunction () {\n  function AMDRequireArrayDependencyTemplate() {\n    _classCallCheck(this, AMDRequireArrayDependencyTemplate);\n  }\n\n  _createClass(AMDRequireArrayDependencyTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime) {\n      var content = this.getContent(dep, runtime);\n      source.replace(dep.range[0], dep.range[1] - 1, content);\n    }\n  }, {\n    key: \"getContent\",\n    value: function getContent(dep, runtime) {\n      var _this2 = this;\n\n      var requires = dep.depsArray.map(function (dependency) {\n        return _this2.contentForDependency(dependency, runtime);\n      });\n      return \"[\".concat(requires.join(\", \"), \"]\");\n    }\n  }, {\n    key: \"contentForDependency\",\n    value: function contentForDependency(dep, runtime) {\n      if (typeof dep === \"string\") {\n        return dep;\n      }\n\n      if (dep.localModule) {\n        return dep.localModule.variableName();\n      } else {\n        return runtime.moduleExports({\n          module: dep.module,\n          request: dep.request\n        });\n      }\n    }\n  }]);\n\n  return AMDRequireArrayDependencyTemplate;\n}();\n\nmodule.exports = AMDRequireArrayDependency;","map":null,"metadata":{},"sourceType":"script"}