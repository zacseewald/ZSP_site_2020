{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource,\n    ReplaceSource = _require.ReplaceSource;\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\n\nvar DependenciesBlockVariable =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an instance of DependenciesBlockVariable.\n   * @param {string} name name of DependenciesBlockVariable\n   * @param {string} expression expression string\n   * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n   */\n  function DependenciesBlockVariable(name, expression, dependencies) {\n    _classCallCheck(this, DependenciesBlockVariable);\n\n    this.name = name;\n    this.expression = expression;\n    this.dependencies = dependencies || [];\n  }\n  /**\n   * @param {Hash} hash hash for instance to update\n   * @returns {void}\n   */\n\n\n  _createClass(DependenciesBlockVariable, [{\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.name);\n      hash.update(this.expression);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var d = _step.value;\n          d.updateHash(hash);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    /**\n     * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n     * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n     * @returns {ReplaceSource} returns constructed source for expression via templates\n     */\n\n  }, {\n    key: \"expressionSource\",\n    value: function expressionSource(dependencyTemplates, runtimeTemplate) {\n      var source = new ReplaceSource(new RawSource(this.expression));\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var dep = _step2.value;\n          var template = dependencyTemplates.get(dep.constructor);\n\n          if (!template) {\n            throw new Error(\"No template for dependency: \".concat(dep.constructor.name));\n          }\n\n          template.apply(dep, source, runtimeTemplate, dependencyTemplates);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return source;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.dependencies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var d = _step3.value;\n          d.disconnect();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"hasDependencies\",\n    value: function hasDependencies(filter) {\n      if (filter) {\n        return this.dependencies.some(filter);\n      }\n\n      return this.dependencies.length > 0;\n    }\n  }]);\n\n  return DependenciesBlockVariable;\n}();\n\nmodule.exports = DependenciesBlockVariable;","map":null,"metadata":{},"sourceType":"script"}