{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nvar LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nvar FlagInitialModulesAsUsedPlugin = require(\"./FlagInitialModulesAsUsedPlugin\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/DllPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n\nvar DllPlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  function DllPlugin(options) {\n    _classCallCheck(this, DllPlugin);\n\n    validateOptions(schema, options, \"Dll Plugin\");\n    this.options = options;\n  }\n\n  _createClass(DllPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"DllPlugin\", function (context, entry) {\n        var itemToPlugin = function itemToPlugin(item, name) {\n          if (Array.isArray(item)) {\n            return new DllEntryPlugin(context, item, name);\n          }\n\n          throw new Error(\"DllPlugin: supply an Array as entry\");\n        };\n\n        if (typeof entry === \"object\" && !Array.isArray(entry)) {\n          Object.keys(entry).forEach(function (name) {\n            itemToPlugin(entry[name], name).apply(compiler);\n          });\n        } else {\n          itemToPlugin(entry, \"main\").apply(compiler);\n        }\n\n        return true;\n      });\n      new LibManifestPlugin(this.options).apply(compiler);\n\n      if (!this.options.entryOnly) {\n        new FlagInitialModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n      }\n    }\n  }]);\n\n  return DllPlugin;\n}();\n\nmodule.exports = DllPlugin;","map":null,"metadata":{},"sourceType":"script"}