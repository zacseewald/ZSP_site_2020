{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\n\nvar ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\n\nvar ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\n\nvar ConcatenatedModule = require(\"./ConcatenatedModule\");\n\nvar HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n\nvar StackedSetMap = require(\"../util/StackedSetMap\");\n\nvar formatBailoutReason = function formatBailoutReason(msg) {\n  return \"ModuleConcatenation bailout: \" + msg;\n};\n\nvar ModuleConcatenationPlugin =\n/*#__PURE__*/\nfunction () {\n  function ModuleConcatenationPlugin(options) {\n    _classCallCheck(this, ModuleConcatenationPlugin);\n\n    if (typeof options !== \"object\") options = {};\n    this.options = options;\n  }\n\n  _createClass(ModuleConcatenationPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n\n        var handler = function handler(parser, parserOptions) {\n          parser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", function () {\n            // Because of variable renaming we can't use modules with eval.\n            parser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n          });\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ModuleConcatenationPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ModuleConcatenationPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ModuleConcatenationPlugin\", handler);\n        var bailoutReasonMap = new Map();\n\n        var setBailoutReason = function setBailoutReason(module, reason) {\n          bailoutReasonMap.set(module, reason);\n          module.optimizationBailout.push(typeof reason === \"function\" ? function (rs) {\n            return formatBailoutReason(reason(rs));\n          } : formatBailoutReason(reason));\n        };\n\n        var getBailoutReason = function getBailoutReason(module, requestShortener) {\n          var reason = bailoutReasonMap.get(module);\n          if (typeof reason === \"function\") return reason(requestShortener);\n          return reason;\n        };\n\n        compilation.hooks.optimizeChunkModules.tap(\"ModuleConcatenationPlugin\", function (chunks, modules) {\n          var relevantModules = [];\n          var possibleInners = new Set();\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              // Only harmony modules are valid for optimization\n              if (!module.buildMeta || module.buildMeta.exportsType !== \"namespace\" || !module.dependencies.some(function (d) {\n                return d instanceof HarmonyCompatibilityDependency;\n              })) {\n                setBailoutReason(module, \"Module is not an ECMAScript module\");\n                return \"continue\";\n              } // Some expressions are not compatible with module concatenation\n              // because they may produce unexpected results. The plugin bails out\n              // if some were detected upfront.\n\n\n              if (module.buildMeta && module.buildMeta.moduleConcatenationBailout) {\n                setBailoutReason(module, \"Module uses \".concat(module.buildMeta.moduleConcatenationBailout));\n                return \"continue\";\n              } // Exports must be known (and not dynamic)\n\n\n              if (!Array.isArray(module.buildMeta.providedExports)) {\n                setBailoutReason(module, \"Module exports are unknown\");\n                return \"continue\";\n              } // Using dependency variables is not possible as this wraps the code in a function\n\n\n              if (module.variables.length > 0) {\n                setBailoutReason(module, \"Module uses injected variables (\".concat(module.variables.map(function (v) {\n                  return v.name;\n                }).join(\", \"), \")\"));\n                return \"continue\";\n              } // Hot Module Replacement need it's own module to work correctly\n\n\n              if (module.dependencies.some(function (dep) {\n                return dep instanceof ModuleHotAcceptDependency || dep instanceof ModuleHotDeclineDependency;\n              })) {\n                setBailoutReason(module, \"Module uses Hot Module Replacement\");\n                return \"continue\";\n              }\n\n              relevantModules.push(module); // Module must not be the entry points\n\n              if (module.isEntryModule()) {\n                setBailoutReason(module, \"Module is an entry point\");\n                return \"continue\";\n              } // Module must be in any chunk (we don't want to do useless work)\n\n\n              if (module.getNumberOfChunks() === 0) {\n                setBailoutReason(module, \"Module is not in any chunk\");\n                return \"continue\";\n              } // Module must only be used by Harmony Imports\n\n\n              var nonHarmonyReasons = module.reasons.filter(function (reason) {\n                return !reason.dependency || !(reason.dependency instanceof HarmonyImportDependency);\n              });\n\n              if (nonHarmonyReasons.length > 0) {\n                var importingModules = new Set(nonHarmonyReasons.map(function (r) {\n                  return r.module;\n                }).filter(Boolean));\n                var importingExplanations = new Set(nonHarmonyReasons.map(function (r) {\n                  return r.explanation;\n                }).filter(Boolean));\n                var importingModuleTypes = new Map(Array.from(importingModules).map(function (m) {\n                  return (\n                    /** @type {[string, Set]} */\n                    [m, new Set(nonHarmonyReasons.filter(function (r) {\n                      return r.module === m;\n                    }).map(function (r) {\n                      return r.dependency.type;\n                    }).sort())]\n                  );\n                }));\n                setBailoutReason(module, function (requestShortener) {\n                  var names = Array.from(importingModules).map(function (m) {\n                    return \"\".concat(m.readableIdentifier(requestShortener), \" (referenced with \").concat(Array.from(importingModuleTypes.get(m)).join(\", \"), \")\");\n                  }).sort();\n                  var explanations = Array.from(importingExplanations).sort();\n\n                  if (names.length > 0 && explanations.length === 0) {\n                    return \"Module is referenced from these modules with unsupported syntax: \".concat(names.join(\", \"));\n                  } else if (names.length === 0 && explanations.length > 0) {\n                    return \"Module is referenced by: \".concat(explanations.join(\", \"));\n                  } else if (names.length > 0 && explanations.length > 0) {\n                    return \"Module is referenced from these modules with unsupported syntax: \".concat(names.join(\", \"), \" and by: \").concat(explanations.join(\", \"));\n                  } else {\n                    return \"Module is referenced in a unsupported way\";\n                  }\n                });\n                return \"continue\";\n              }\n\n              possibleInners.add(module);\n            };\n\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _ret = _loop();\n\n              if (_ret === \"continue\") continue;\n            } // sort by depth\n            // modules with lower depth are more likely suited as roots\n            // this improves performance, because modules already selected as inner are skipped\n\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          relevantModules.sort(function (a, b) {\n            return a.depth - b.depth;\n          });\n          var concatConfigurations = [];\n          var usedAsInner = new Set();\n\n          for (var _i = 0; _i < relevantModules.length; _i++) {\n            var currentRoot = relevantModules[_i];\n            // when used by another configuration as inner:\n            // the other configuration is better and we can skip this one\n            if (usedAsInner.has(currentRoot)) continue; // create a configuration with the root\n\n            var currentConfiguration = new ConcatConfiguration(currentRoot); // cache failures to add modules\n\n            var failureCache = new Map(); // try to add all imports\n\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _this._getImports(compilation, currentRoot)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var imp = _step2.value;\n\n                var problem = _this._tryToAdd(compilation, currentConfiguration, imp, possibleInners, failureCache);\n\n                if (problem) {\n                  failureCache.set(imp, problem);\n                  currentConfiguration.addWarning(imp, problem);\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            if (!currentConfiguration.isEmpty()) {\n              concatConfigurations.push(currentConfiguration);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                for (var _iterator3 = currentConfiguration.getModules()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var _module = _step3.value;\n\n                  if (_module !== currentConfiguration.rootModule) {\n                    usedAsInner.add(_module);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            }\n          } // HACK: Sort configurations by length and start with the longest one\n          // to get the biggers groups possible. Used modules are marked with usedModules\n          // TODO: Allow to reuse existing configuration while trying to add dependencies.\n          // This would improve performance. O(n^2) -> O(n)\n\n\n          concatConfigurations.sort(function (a, b) {\n            return b.modules.size - a.modules.size;\n          });\n          var usedModules = new Set();\n\n          for (var _i2 = 0; _i2 < concatConfigurations.length; _i2++) {\n            var concatConfiguration = concatConfigurations[_i2];\n            if (usedModules.has(concatConfiguration.rootModule)) continue;\n\n            var _modules = concatConfiguration.getModules();\n\n            var rootModule = concatConfiguration.rootModule;\n            var newModule = new ConcatenatedModule(rootModule, Array.from(_modules), ConcatenatedModule.createConcatenationList(rootModule, _modules, compilation));\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              var _loop2 = function _loop2() {\n                var warning = _step4.value;\n                newModule.optimizationBailout.push(function (requestShortener) {\n                  var reason = getBailoutReason(warning[0], requestShortener);\n                  var reasonWithPrefix = reason ? \" (<- \".concat(reason, \")\") : \"\";\n\n                  if (warning[0] === warning[1]) {\n                    return formatBailoutReason(\"Cannot concat with \".concat(warning[0].readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n                  } else {\n                    return formatBailoutReason(\"Cannot concat with \".concat(warning[0].readableIdentifier(requestShortener), \" because of \").concat(warning[1].readableIdentifier(requestShortener)).concat(reasonWithPrefix));\n                  }\n                });\n              };\n\n              for (var _iterator4 = concatConfiguration.getWarningsSorted()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                _loop2();\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n\n            var _chunks = concatConfiguration.rootModule.getChunks();\n\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = _modules[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var m = _step5.value;\n                usedModules.add(m);\n                var _iteratorNormalCompletion8 = true;\n                var _didIteratorError8 = false;\n                var _iteratorError8 = undefined;\n\n                try {\n                  for (var _iterator8 = _chunks[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                    var chunk = _step8.value;\n                    chunk.removeModule(m);\n                  }\n                } catch (err) {\n                  _didIteratorError8 = true;\n                  _iteratorError8 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                      _iterator8.return();\n                    }\n                  } finally {\n                    if (_didIteratorError8) {\n                      throw _iteratorError8;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = _chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _chunk = _step6.value;\n\n                _chunk.addModule(newModule);\n\n                newModule.addChunk(_chunk);\n\n                if (_chunk.entryModule === concatConfiguration.rootModule) {\n                  _chunk.entryModule = newModule;\n                }\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n\n            compilation.modules.push(newModule);\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n              for (var _iterator7 = newModule.reasons[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var _reason = _step7.value;\n                if (_reason.dependency.module === concatConfiguration.rootModule) _reason.dependency.module = newModule;\n                if (_reason.dependency.redirectedModule === concatConfiguration.rootModule) _reason.dependency.redirectedModule = newModule;\n              } // TODO: remove when LTS node version contains fixed v8 version\n              // @see https://github.com/webpack/webpack/pull/6613\n              // Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n              // Work around issue by using a standard for loop and assigning dep.module.reasons\n\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                  _iterator7.return();\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n\n            for (var i = 0; i < newModule.dependencies.length; i++) {\n              var dep = newModule.dependencies[i];\n\n              if (dep.module) {\n                var reasons = dep.module.reasons;\n\n                for (var j = 0; j < reasons.length; j++) {\n                  var reason = reasons[j];\n\n                  if (reason.dependency === dep) {\n                    reason.module = newModule;\n                  }\n                }\n              }\n            }\n          }\n\n          compilation.modules = compilation.modules.filter(function (m) {\n            return !usedModules.has(m);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_getImports\",\n    value: function _getImports(compilation, module) {\n      return new Set(module.dependencies // Get reference info only for harmony Dependencies\n      .map(function (dep) {\n        if (!(dep instanceof HarmonyImportDependency)) return null;\n        if (!compilation) return dep.getReference();\n        return compilation.getDependencyReference(module, dep);\n      }) // Reference is valid and has a module\n      // Dependencies are simple enough to concat them\n      .filter(function (ref) {\n        return ref && ref.module && (Array.isArray(ref.importedNames) || Array.isArray(ref.module.buildMeta.providedExports));\n      }) // Take the imported module\n      .map(function (ref) {\n        return ref.module;\n      }));\n    }\n  }, {\n    key: \"_tryToAdd\",\n    value: function _tryToAdd(compilation, config, module, possibleModules, failureCache) {\n      var cacheEntry = failureCache.get(module);\n\n      if (cacheEntry) {\n        return cacheEntry;\n      } // Already added?\n\n\n      if (config.has(module)) {\n        return null;\n      } // Not possible to add?\n\n\n      if (!possibleModules.has(module)) {\n        failureCache.set(module, module); // cache failures for performance\n\n        return module;\n      } // module must be in the same chunks\n\n\n      if (!config.rootModule.hasEqualsChunks(module)) {\n        failureCache.set(module, module); // cache failures for performance\n\n        return module;\n      } // Clone config to make experimental changes\n\n\n      var testConfig = config.clone(); // Add the module\n\n      testConfig.add(module); // Every module which depends on the added module must be in the configuration too.\n\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = module.reasons[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var reason = _step9.value;\n          // Modules that are not used can be ignored\n          if (reason.module.factoryMeta.sideEffectFree && reason.module.used === false) continue;\n\n          var problem = this._tryToAdd(compilation, testConfig, reason.module, possibleModules, failureCache);\n\n          if (problem) {\n            failureCache.set(module, problem); // cache failures for performance\n\n            return problem;\n          }\n        } // Commit experimental changes\n\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      config.set(testConfig); // Eagerly try to add imports too if possible\n\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = this._getImports(compilation, module)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var imp = _step10.value;\n\n          var _problem = this._tryToAdd(compilation, config, imp, possibleModules, failureCache);\n\n          if (_problem) {\n            config.addWarning(imp, _problem);\n          }\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return ModuleConcatenationPlugin;\n}();\n\nvar ConcatConfiguration =\n/*#__PURE__*/\nfunction () {\n  function ConcatConfiguration(rootModule, cloneFrom) {\n    _classCallCheck(this, ConcatConfiguration);\n\n    this.rootModule = rootModule;\n\n    if (cloneFrom) {\n      this.modules = cloneFrom.modules.createChild(5);\n      this.warnings = cloneFrom.warnings.createChild(5);\n    } else {\n      this.modules = new StackedSetMap();\n      this.modules.add(rootModule);\n      this.warnings = new StackedSetMap();\n    }\n  }\n\n  _createClass(ConcatConfiguration, [{\n    key: \"add\",\n    value: function add(module) {\n      this.modules.add(module);\n    }\n  }, {\n    key: \"has\",\n    value: function has(module) {\n      return this.modules.has(module);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.modules.size === 1;\n    }\n  }, {\n    key: \"addWarning\",\n    value: function addWarning(module, problem) {\n      this.warnings.set(module, problem);\n    }\n  }, {\n    key: \"getWarningsSorted\",\n    value: function getWarningsSorted() {\n      return new Map(this.warnings.asPairArray().sort(function (a, b) {\n        var ai = a[0].identifier();\n        var bi = b[0].identifier();\n        if (ai < bi) return -1;\n        if (ai > bi) return 1;\n        return 0;\n      }));\n    }\n  }, {\n    key: \"getModules\",\n    value: function getModules() {\n      return this.modules.asSet();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new ConcatConfiguration(this.rootModule, this);\n    }\n  }, {\n    key: \"set\",\n    value: function set(config) {\n      this.rootModule = config.rootModule;\n      this.modules = config.modules;\n      this.warnings = config.warnings;\n    }\n  }]);\n\n  return ConcatConfiguration;\n}();\n\nmodule.exports = ModuleConcatenationPlugin;","map":null,"metadata":{},"sourceType":"script"}