{"ast":null,"code":"// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\nmodule.exports = ExtendedHeader;\n\nvar Entry = require(\"./entry.js\"),\n    inherits = require(\"inherits\"),\n    tar = require(\"../tar.js\"),\n    numeric = tar.numeric,\n    keyTrans = {\n  \"SCHILY.dev\": \"dev\",\n  \"SCHILY.ino\": \"ino\",\n  \"SCHILY.nlink\": \"nlink\"\n};\n\nfunction ExtendedHeader() {\n  Entry.apply(this, arguments);\n  this.on(\"data\", this._parse);\n  this.fields = {};\n  this._position = 0;\n  this._fieldPos = 0;\n  this._state = SIZE;\n  this._sizeBuf = [];\n  this._keyBuf = [];\n  this._valBuf = [];\n  this._size = -1;\n  this._key = \"\";\n}\n\ninherits(ExtendedHeader, Entry);\nExtendedHeader.prototype._parse = parse;\nvar s = 0,\n    states = ExtendedHeader.states = {},\n    SIZE = states.SIZE = s++,\n    KEY = states.KEY = s++,\n    VAL = states.VAL = s++,\n    ERR = states.ERR = s++;\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s];\n});\nstates[s] = null; // char code values for comparison\n\nvar _0 = \"0\".charCodeAt(0),\n    _9 = \"9\".charCodeAt(0),\n    point = \".\".charCodeAt(0),\n    a = \"a\".charCodeAt(0),\n    Z = \"Z\".charCodeAt(0),\n    a = \"a\".charCodeAt(0),\n    z = \"z\".charCodeAt(0),\n    space = \" \".charCodeAt(0),\n    eq = \"=\".charCodeAt(0),\n    cr = \"\\n\".charCodeAt(0);\n\nfunction parse(c) {\n  if (this._state === ERR) return;\n\n  for (var i = 0, l = c.length; i < l; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n    var b = c[i];\n\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\" + this._size);\n      return;\n    }\n\n    switch (this._state) {\n      case ERR:\n        return;\n\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY; // this._fieldPos = this._sizeBuf.length\n\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10);\n          this._sizeBuf.length = 0;\n          continue;\n        }\n\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b);\n          return;\n        }\n\n        this._sizeBuf.push(b);\n\n        continue;\n\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL;\n          this._key = new Buffer(this._keyBuf).toString();\n          if (keyTrans[this._key]) this._key = keyTrans[this._key];\n          this._keyBuf.length = 0;\n          continue;\n        }\n\n        this._keyBuf.push(b);\n\n        continue;\n\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\");\n            return;\n          }\n\n          var val = new Buffer(this._valBuf).toString();\n\n          if (numeric[this._key]) {\n            val = parseFloat(val);\n          }\n\n          this.fields[this._key] = val;\n          this._valBuf.length = 0;\n          this._state = SIZE;\n          this._size = -1;\n          this._fieldPos = -1;\n          continue;\n        }\n\n        this._valBuf.push(b);\n\n        continue;\n    }\n  }\n}\n\nfunction error(me, msg) {\n  msg = \"invalid header: \" + msg + \"\\nposition=\" + me._position + \"\\nfield position=\" + me._fieldPos;\n  me.error(msg);\n  me.state = ERR;\n}","map":null,"metadata":{},"sourceType":"script"}