{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar mergeCache = new WeakMap();\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs Object.assign(first, second), stores the result in WeakMap and returns result\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\nvar cachedMerge = function cachedMerge(first, second) {\n  var innerCache = mergeCache.get(first);\n\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n\n  var prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  var newMerge = Object.assign({}, first, second);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n\nmodule.exports = cachedMerge;","map":null,"metadata":{},"sourceType":"script"}