{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\n\nvar SourceMapGenerator = require(\"source-map\").SourceMapGenerator;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar fromStringWithSourceMap = require(\"source-list-map\").fromStringWithSourceMap;\n\nvar Source = require(\"./Source\");\n\nvar SourceMapSource =\n/*#__PURE__*/\nfunction (_Source) {\n  _inherits(SourceMapSource, _Source);\n\n  function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {\n    var _this;\n\n    _classCallCheck(this, SourceMapSource);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SourceMapSource).call(this));\n    _this._value = value;\n    _this._name = name;\n    _this._sourceMap = sourceMap;\n    _this._originalSource = originalSource;\n    _this._innerSourceMap = innerSourceMap;\n    return _this;\n  }\n\n  _createClass(SourceMapSource, [{\n    key: \"source\",\n    value: function source() {\n      return this._value;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var innerSourceMap = this._innerSourceMap;\n      var sourceMap = this._sourceMap;\n\n      if (innerSourceMap) {\n        sourceMap = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));\n        if (this._originalSource) sourceMap.setSourceContent(this._name, this._originalSource);\n        innerSourceMap = new SourceMapConsumer(innerSourceMap);\n        sourceMap.applySourceMap(innerSourceMap, this._name);\n        sourceMap = sourceMap.toJSON();\n      }\n\n      return SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      options = options || {};\n      if (options.module === false) return new SourceListMap(this._value, this._name, this._value);\n      return fromStringWithSourceMap(this._value, typeof this._sourceMap === \"string\" ? JSON.parse(this._sourceMap) : this._sourceMap);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this._value);\n      if (this._originalSource) hash.update(this._originalSource);\n    }\n  }]);\n\n  return SourceMapSource;\n}(Source);\n\nrequire(\"./SourceAndMapMixin\")(SourceMapSource.prototype);\n\nmodule.exports = SourceMapSource;","map":null,"metadata":{},"sourceType":"script"}