{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Template = require(\"../Template\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function NodeMainTemplatePlugin(asyncChunkLoading) {\n    _classCallCheck(this, NodeMainTemplatePlugin);\n\n    this.asyncChunkLoading = asyncChunkLoading;\n  }\n\n  _createClass(NodeMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = chunk.groupsIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var chunkGroup = _step.value;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return false;\n      };\n\n      var asyncChunkLoading = this.asyncChunkLoading;\n      mainTemplate.hooks.localVars.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"0\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(function (id) {\n            return \"\".concat(JSON.stringify(id), \": 0\");\n          }).join(\",\\n\")), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// uncaught error handler for webpack runtime\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) {\"), Template.indent([\"process.nextTick(function() {\", Template.indent(\"throw err; // catch this error by using import().catch()\"), \"});\"]), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var chunkFilename = mainTemplate.outputOptions.chunkFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var insertMoreModules = [\"var moreModules = chunk.modules, chunkIds = chunk.ids;\", \"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"];\n\n        if (asyncChunkLoading) {\n          return Template.asString([source, \"\", \"// ReadFile + VM.run chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent(['// array of [resolve, reject, promise] means \"currently loading\"', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// load the chunk and return promise to it\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\", \"var filename = require('path').join(__dirname, \" + mainTemplate.getAssetPath(JSON.stringify(\"/\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n\n                var _arr = Object.keys(chunkMaps.hash);\n\n                for (var _i = 0; _i < _arr.length; _i++) {\n                  var chunkId = _arr[_i];\n\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n\n                  var _arr2 = Object.keys(contentHash);\n\n                  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                    var chunkId = _arr2[_i2];\n\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          }) + \");\", \"require('fs').readFile(filename, 'utf-8',  function(err, content) {\", Template.indent([\"if(err) return reject(err);\", \"var chunk = {};\", \"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" + \"(chunk, require, require('path').dirname(filename), filename);\"].concat(insertMoreModules).concat([\"var callbacks = [];\", \"for(var i = 0; i < chunkIds.length; i++) {\", Template.indent([\"if(installedChunks[chunkIds[i]])\", Template.indent([\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"]), \"installedChunks[chunkIds[i]] = 0;\"]), \"}\", \"for(i = 0; i < callbacks.length; i++)\", Template.indent(\"callbacks[i]();\")])), \"});\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\"]), \"}\"]), \"}\"]);\n        } else {\n          var request = mainTemplate.getAssetPath(JSON.stringify(\"./\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n\n                var _arr3 = Object.keys(chunkMaps.hash);\n\n                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n                  var chunkId = _arr3[_i3];\n\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n\n                  var _arr4 = Object.keys(contentHash);\n\n                  for (var _i4 = 0; _i4 < _arr4.length; _i4++) {\n                    var chunkId = _arr4[_i4];\n\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          });\n          return Template.asString([source, \"\", \"// require() chunk loading for javascript\", \"\", '// \"0\" is the signal for \"already loaded\"', \"if(installedChunks[chunkId] !== 0) {\", Template.indent([\"var chunk = require(\".concat(request, \");\")].concat(insertMoreModules).concat([\"for(var i = 0; i < chunkIds.length; i++)\", Template.indent(\"installedChunks[chunkIds[i]] = 0;\")])), \"}\"]);\n        }\n      });\n      mainTemplate.hooks.hotBootstrap.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = {};\n\n              var _arr5 = Object.keys(chunkMaps.hash);\n\n              for (var _i5 = 0; _i5 < _arr5.length; _i5++) {\n                var chunkId = _arr5[_i5];\n\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          }\n        });\n        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          }\n        });\n        return Template.getFunctionContent(asyncChunkLoading ? require(\"./NodeMainTemplateAsync.runtime\") : require(\"./NodeMainTemplate.runtime\")).replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n      });\n      mainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", function (hash) {\n        hash.update(\"node\");\n        hash.update(\"4\");\n      });\n    }\n  }]);\n\n  return NodeMainTemplatePlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}