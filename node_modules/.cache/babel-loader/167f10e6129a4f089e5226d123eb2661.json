{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nvar AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nvar NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function SizeLimitsPlugin(options) {\n    _classCallCheck(this, SizeLimitsPlugin);\n\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n\n  _createClass(SizeLimitsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var entrypointSizeLimit = this.maxEntrypointSize;\n      var assetSizeLimit = this.maxAssetSize;\n      var hints = this.hints;\n\n      var assetFilter = this.assetFilter || function (asset) {\n        return !asset.endsWith(\".map\");\n      };\n\n      compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", function (compilation) {\n        var warnings = [];\n\n        var getEntrypointSize = function getEntrypointSize(entrypoint) {\n          return entrypoint.getFiles().reduce(function (currentSize, file) {\n            if (assetFilter(file) && compilation.assets[file]) {\n              return currentSize + compilation.assets[file].size();\n            }\n\n            return currentSize;\n          }, 0);\n        };\n\n        var assetsOverSizeLimit = [];\n\n        var _arr = Object.keys(compilation.assets);\n\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var assetName = _arr[_i];\n\n          if (!assetFilter(assetName)) {\n            continue;\n          }\n\n          var asset = compilation.assets[assetName];\n          var size = asset.size();\n\n          if (size > assetSizeLimit) {\n            assetsOverSizeLimit.push({\n              name: assetName,\n              size: size\n            });\n            asset.isOverSizeLimit = true;\n          }\n        }\n\n        var entrypointsOverLimit = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = compilation.entrypoints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var pair = _step.value;\n            var name = pair[0];\n            var entry = pair[1];\n\n            var _size = getEntrypointSize(entry);\n\n            if (_size > entrypointSizeLimit) {\n              entrypointsOverLimit.push({\n                name: name,\n                size: _size,\n                files: entry.getFiles().filter(assetFilter)\n              });\n              entry.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (hints) {\n          // 1. Individual Chunk: Size < 250kb\n          // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n          // 3. No Async Chunks\n          // if !1, then 2, if !2 return\n          if (assetsOverSizeLimit.length > 0) {\n            warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n          }\n\n          if (entrypointsOverLimit.length > 0) {\n            warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n          }\n\n          if (warnings.length > 0) {\n            var hasAsyncChunks = compilation.chunks.filter(function (chunk) {\n              return !chunk.canBeInitial();\n            }).length > 0;\n\n            if (!hasAsyncChunks) {\n              warnings.push(new NoAsyncChunksWarning());\n            }\n\n            if (hints === \"error\") {\n              var _compilation$errors;\n\n              (_compilation$errors = compilation.errors).push.apply(_compilation$errors, warnings);\n            } else {\n              var _compilation$warnings;\n\n              (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, warnings);\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return SizeLimitsPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}