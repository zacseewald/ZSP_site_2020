{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n\nvar SetVarMainTemplatePlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {string} varExpression the accessor where the library is exported\n   * @param {boolean} copyObject specify copying the exports\n   */\n  function SetVarMainTemplatePlugin(varExpression, copyObject) {\n    _classCallCheck(this, SetVarMainTemplatePlugin);\n\n    /** @type {string} */\n    this.varExpression = varExpression;\n    /** @type {boolean} */\n\n    this.copyObject = copyObject;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(SetVarMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var varExpression = mainTemplate.getAssetPath(_this.varExpression, {\n          hash: hash,\n          chunk: chunk\n        });\n\n        if (_this.copyObject) {\n          return new ConcatSource(\"(function(e, a) { for(var i in a) e[i] = a[i]; }(\".concat(varExpression, \", \"), source, \"))\");\n        } else {\n          var prefix = \"\".concat(varExpression, \" =\\n\");\n          return new ConcatSource(prefix, source);\n        }\n      };\n\n      var _arr = [mainTemplate, chunkTemplate];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"SetVarMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"SetVarMainTemplatePlugin\", function (paths) {\n        if (_this.varExpression) paths.push(_this.varExpression);\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", function (hash) {\n        hash.update(\"set var\");\n        hash.update(\"\".concat(_this.varExpression));\n        hash.update(\"\".concat(_this.copyObject));\n      });\n    }\n  }]);\n\n  return SetVarMainTemplatePlugin;\n}();\n\nmodule.exports = SetVarMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}