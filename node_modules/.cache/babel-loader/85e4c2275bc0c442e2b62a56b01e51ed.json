{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar WebpackError = require(\"../WebpackError\");\n\nvar SystemPlugin =\n/*#__PURE__*/\nfunction () {\n  function SystemPlugin(options) {\n    _classCallCheck(this, SystemPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(SystemPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"SystemPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.system !== undefined && !parserOptions.system) return;\n          var shouldWarn = parserOptions.system === undefined;\n\n          var setNotSupported = function setNotSupported(name) {\n            parser.hooks.evaluateTypeof.for(name).tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"undefined\"));\n            parser.hooks.expression.for(name).tap(\"SystemPlugin\", ParserHelpers.expressionIsUnsupported(parser, name + \" is not supported by webpack.\"));\n          };\n\n          parser.hooks.typeof.for(\"System.import\").tap(\"SystemPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(\"System.import\").tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks.typeof.for(\"System\").tap(\"SystemPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"object\")));\n          parser.hooks.evaluateTypeof.for(\"System\").tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"object\"));\n          setNotSupported(\"System.set\");\n          setNotSupported(\"System.get\");\n          setNotSupported(\"System.register\");\n          parser.hooks.expression.for(\"System\").tap(\"SystemPlugin\", function () {\n            var systemPolyfillRequire = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve(\"../../buildin/system\"));\n            return ParserHelpers.addParsedVariableToModule(parser, \"System\", systemPolyfillRequire);\n          });\n          parser.hooks.call.for(\"System.import\").tap(\"SystemPlugin\", function (expr) {\n            if (shouldWarn) {\n              parser.state.module.warnings.push(new SystemImportDeprecationWarning(parser.state.module, expr.loc));\n            }\n\n            return parser.hooks.importCall.call(expr);\n          });\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"SystemPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"SystemPlugin\", handler);\n      });\n    }\n  }]);\n\n  return SystemPlugin;\n}();\n\nvar SystemImportDeprecationWarning =\n/*#__PURE__*/\nfunction (_WebpackError) {\n  _inherits(SystemImportDeprecationWarning, _WebpackError);\n\n  function SystemImportDeprecationWarning(module, loc) {\n    var _this;\n\n    _classCallCheck(this, SystemImportDeprecationWarning);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SystemImportDeprecationWarning).call(this, \"System.import() is deprecated and will be removed soon. Use import() instead.\\n\" + \"For more info visit https://webpack.js.org/guides/code-splitting/\"));\n    _this.name = \"SystemImportDeprecationWarning\";\n    _this.module = module;\n    _this.loc = loc;\n    Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);\n    return _this;\n  }\n\n  return SystemImportDeprecationWarning;\n}(WebpackError);\n\nmodule.exports = SystemPlugin;","map":null,"metadata":{},"sourceType":"script"}