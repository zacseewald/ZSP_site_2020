{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\nvar NormalModule = require(\"./NormalModule\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar AutomaticPrefetchPlugin =\n/*#__PURE__*/\nfunction () {\n  function AutomaticPrefetchPlugin() {\n    _classCallCheck(this, AutomaticPrefetchPlugin);\n  }\n\n  _createClass(AutomaticPrefetchPlugin, [{\n    key: \"apply\",\n\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler Webpack Compiler\n     * @returns {void}\n     */\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n      });\n      var lastModules = null;\n      compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", function (compilation) {\n        lastModules = compilation.modules.filter(function (m) {\n          return m instanceof NormalModule;\n        }).map(function (\n        /** @type {NormalModule} */\n        m) {\n          return {\n            context: m.context,\n            request: m.request\n          };\n        });\n      });\n      compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", function (compilation, callback) {\n        if (!lastModules) return callback();\n        asyncLib.forEach(lastModules, function (m, callback) {\n          compilation.prefetch(m.context || compiler.context, new PrefetchDependency(m.request), callback);\n        }, callback);\n      });\n    }\n  }]);\n\n  return AutomaticPrefetchPlugin;\n}();\n\nmodule.exports = AutomaticPrefetchPlugin;","map":null,"metadata":{},"sourceType":"script"}