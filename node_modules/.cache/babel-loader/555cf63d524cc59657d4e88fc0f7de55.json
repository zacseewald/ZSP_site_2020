{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource,\n    ReplaceSource = _require.ReplaceSource; // TODO: clean up this file\n// replace with newer constructs\n// TODO: remove DependencyVariables and replace them with something better\n\n\nvar JavascriptGenerator =\n/*#__PURE__*/\nfunction () {\n  function JavascriptGenerator() {\n    _classCallCheck(this, JavascriptGenerator);\n  }\n\n  _createClass(JavascriptGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var originalSource = module.originalSource();\n\n      if (!originalSource) {\n        return new RawSource(\"throw new Error('No source available');\");\n      }\n\n      var source = new ReplaceSource(originalSource);\n      this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n      return source;\n    }\n  }, {\n    key: \"sourceBlock\",\n    value: function sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n      var _this = this;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = block.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var dependency = _step.value;\n          this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n        }\n        /**\n         * Get the variables of all blocks that we need to inject.\n         * These will contain the variable name and its expression.\n         * The name will be added as a parameter in a IIFE the expression as its value.\n         */\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var vars = block.variables.reduce(function (result, value) {\n        var variable = _this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n\n        if (variable) {\n          result.push(variable);\n        }\n\n        return result;\n      }, []);\n      /**\n       * if we actually have variables\n       * this is important as how #splitVariablesInUniqueNamedChunks works\n       * it will always return an array in an array which would lead to a IIFE wrapper around\n       * a module if we do this with an empty vars array.\n       */\n\n      if (vars.length > 0) {\n        /**\n         * Split all variables up into chunks of unique names.\n         * e.g. imagine you have the following variable names that need to be injected:\n         * [foo, bar, baz, foo, some, more]\n         * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n         * (function(foo, bar, baz){\n         *   (function(foo, some, more){\n         *     …\n         *   }(…));\n         * }(…));\n         *\n         * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n         * [[foo, bar, baz], [foo, some, more]]\n         */\n        var injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars); // create all the beginnings of IIFEs\n\n        var functionWrapperStarts = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperStartCode(variableChunk.map(function (variable) {\n            return variable.name;\n          }));\n        }); // and all the ends\n\n        var functionWrapperEnds = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(function (variable) {\n            return variable.expression;\n          }), block);\n        }); // join them to one big string\n\n        var varStartCode = functionWrapperStarts.join(\"\"); // reverse the ends first before joining them, as the last added must be the inner most\n\n        var varEndCode = functionWrapperEnds.reverse().join(\"\"); // if we have anything, add it to the source\n\n        if (varStartCode && varEndCode) {\n          var start = block.range ? block.range[0] : -10;\n          var end = block.range ? block.range[1] : module.originalSource().size() + 1;\n          source.insert(start + 0.5, varStartCode);\n          source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = block.blocks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var childBlock = _step2.value;\n          this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"sourceDependency\",\n    value: function sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n      var template = dependencyTemplates.get(dependency.constructor);\n\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n\n      template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n    }\n  }, {\n    key: \"sourceVariables\",\n    value: function sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n      var name = variable.name;\n      var expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n\n      if (availableVars.some(function (v) {\n        return v.name === name && v.expression.source() === expr.source();\n      })) {\n        return;\n      }\n\n      return {\n        name: name,\n        expression: expr\n      };\n    }\n    /*\n     * creates the start part of a IIFE around the module to inject a variable name\n     * (function(…){   <- this part\n     * }.call(…))\n     */\n\n  }, {\n    key: \"variableInjectionFunctionWrapperStartCode\",\n    value: function variableInjectionFunctionWrapperStartCode(varNames) {\n      var args = varNames.join(\", \");\n      return \"/* WEBPACK VAR INJECTION */(function(\".concat(args, \") {\");\n    }\n  }, {\n    key: \"contextArgument\",\n    value: function contextArgument(module, block) {\n      if (this === block) {\n        return module.exportsArgument;\n      }\n\n      return \"this\";\n    }\n    /*\n     * creates the end part of a IIFE around the module to inject a variable name\n     * (function(…){\n     * }.call(…))   <- this part\n     */\n\n  }, {\n    key: \"variableInjectionFunctionWrapperEndCode\",\n    value: function variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n      var firstParam = this.contextArgument(module, block);\n      var furtherParams = varExpressions.map(function (e) {\n        return e.source();\n      }).join(\", \");\n      return \"}.call(\".concat(firstParam, \", \").concat(furtherParams, \"))\");\n    }\n  }, {\n    key: \"splitVariablesInUniqueNamedChunks\",\n    value: function splitVariablesInUniqueNamedChunks(vars) {\n      var startState = [[]];\n      return vars.reduce(function (chunks, variable) {\n        var current = chunks[chunks.length - 1]; // check if variable with same name exists already\n        // if so create a new chunk of variables.\n\n        var variableNameAlreadyExists = current.some(function (v) {\n          return v.name === variable.name;\n        });\n\n        if (variableNameAlreadyExists) {\n          // start new chunk with current variable\n          chunks.push([variable]);\n        } else {\n          // else add it to current chunk\n          current.push(variable);\n        }\n\n        return chunks;\n      }, startState);\n    }\n  }]);\n\n  return JavascriptGenerator;\n}();\n\nmodule.exports = JavascriptGenerator;","map":null,"metadata":{},"sourceType":"script"}