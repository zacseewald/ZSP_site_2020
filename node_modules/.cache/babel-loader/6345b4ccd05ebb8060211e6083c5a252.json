{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar MultiWatching =\n/*#__PURE__*/\nfunction () {\n  function MultiWatching(watchings, compiler) {\n    _classCallCheck(this, MultiWatching);\n\n    this.watchings = watchings;\n    this.compiler = compiler;\n  }\n\n  _createClass(MultiWatching, [{\n    key: \"invalidate\",\n    value: function invalidate() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.watchings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var watching = _step.value;\n          watching.invalidate();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this = this;\n\n      asyncLib.forEach(this.watchings, function (watching, finishedCallback) {\n        watching.close(finishedCallback);\n      }, function (err) {\n        _this.compiler.hooks.watchClose.call();\n\n        if (typeof callback === \"function\") {\n          _this.compiler.running = false;\n          callback(err);\n        }\n      });\n    }\n  }]);\n\n  return MultiWatching;\n}();\n\nmodule.exports = MultiWatching;","map":null,"metadata":{},"sourceType":"script"}