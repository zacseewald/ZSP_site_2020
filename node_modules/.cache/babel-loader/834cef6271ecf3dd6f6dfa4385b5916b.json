{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar compareLocations = require(\"./compareLocations\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\n\nvar debugId = 5000;\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\n\nvar getArray = function getArray(set) {\n  return Array.from(set);\n};\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\n\n\nvar sortById = function sortById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\n\n\nvar sortOrigin = function sortOrigin(a, b) {\n  var aIdent = a.module ? a.module.identifier() : \"\";\n  var bIdent = b.module ? b.module.identifier() : \"\";\n  if (aIdent < bIdent) return -1;\n  if (aIdent > bIdent) return 1;\n  return compareLocations(a.loc, b.loc);\n};\n\nvar ChunkGroup =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an instance of ChunkGroup.\n   * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n   */\n  function ChunkGroup(options) {\n    _classCallCheck(this, ChunkGroup);\n\n    if (typeof options === \"string\") {\n      options = {\n        name: options\n      };\n    } else if (!options) {\n      options = {\n        name: undefined\n      };\n    }\n    /** @type {number} */\n\n\n    this.groupDebugId = debugId++;\n    this.options = options;\n    /** @type {SortableSet<ChunkGroup>} */\n\n    this._children = new SortableSet(undefined, sortById);\n    this._parents = new SortableSet(undefined, sortById);\n    this._blocks = new SortableSet();\n    /** @type {Chunk[]} */\n\n    this.chunks = [];\n    /** @type {OriginRecord[]} */\n\n    this.origins = [];\n    /** Indicies in top-down order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndicies = new Map();\n    /** Indicies in bottom-up order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndicies2 = new Map();\n  }\n  /**\n   * when a new chunk is added to a chunkGroup, addingOptions will occur.\n   * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n   * @returns {void}\n   */\n\n\n  _createClass(ChunkGroup, [{\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      var _arr = Object.keys(options);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n\n        if (this.options[key] === undefined) {\n          this.options[key] = options[key];\n        } else if (this.options[key] !== options[key]) {\n          if (key.endsWith(\"Order\")) {\n            this.options[key] = Math.max(this.options[key], options[key]);\n          } else {\n            throw new Error(\"ChunkGroup.addOptions: No option merge strategy for \".concat(key));\n          }\n        }\n      }\n    }\n    /**\n     * returns the name of current ChunkGroup\n     * @returns {string|undefined} returns the ChunkGroup name\n     */\n\n  }, {\n    key: \"unshiftChunk\",\n\n    /**\n     * Performs an unshift of a specific chunk\n     * @param {Chunk} chunk chunk being unshifted\n     * @returns {boolean} returns true if attempted chunk shift is accepted\n     */\n    value: function unshiftChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx > 0) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.unshift(chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.unshift(chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * inserts a chunk before another existing chunk in group\n     * @param {Chunk} chunk Chunk being inserted\n     * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n     * @returns {boolean} return true if insertion was successful\n     */\n\n  }, {\n    key: \"insertChunk\",\n    value: function insertChunk(chunk, before) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      var idx = this.chunks.indexOf(before);\n\n      if (idx < 0) {\n        throw new Error(\"before chunk not found\");\n      }\n\n      if (oldIdx >= 0 && oldIdx > idx) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.splice(idx, 0, chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.splice(idx, 0, chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * add a chunk into ChunkGroup. Is pushed on or prepended\n     * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n     * @returns {boolean} returns true if chunk addition was ssuccesful.\n     */\n\n  }, {\n    key: \"pushChunk\",\n    value: function pushChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx >= 0) {\n        return false;\n      }\n\n      this.chunks.push(chunk);\n      return true;\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunkt that will be replaced\n     * @returns {boolean} rerturns true for\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      var oldIdx = this.chunks.indexOf(oldChunk);\n      if (oldIdx < 0) return false;\n      var newIdx = this.chunks.indexOf(newChunk);\n\n      if (newIdx < 0) {\n        this.chunks[oldIdx] = newChunk;\n        return true;\n      }\n\n      if (newIdx < oldIdx) {\n        this.chunks.splice(oldIdx, 1);\n        return true;\n      } else if (newIdx !== oldIdx) {\n        this.chunks[oldIdx] = newChunk;\n        this.chunks.splice(newIdx, 1);\n        return true;\n      }\n    }\n  }, {\n    key: \"removeChunk\",\n    value: function removeChunk(chunk) {\n      var idx = this.chunks.indexOf(chunk);\n\n      if (idx >= 0) {\n        this.chunks.splice(idx, 1);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isInitial\",\n    value: function isInitial() {\n      return false;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(chunk) {\n      if (this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children.add(chunk);\n\n      return true;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this._children.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfChildren\",\n    value: function getNumberOfChildren() {\n      return this._children.size;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(chunk) {\n      if (!this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children.delete(chunk);\n\n      chunk.removeParent(this);\n      return true;\n    }\n  }, {\n    key: \"addParent\",\n    value: function addParent(parentChunk) {\n      if (!this._parents.has(parentChunk)) {\n        this._parents.add(parentChunk);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents() {\n      return this._parents.getFromCache(getArray);\n    }\n  }, {\n    key: \"setParents\",\n    value: function setParents(newParents) {\n      this._parents.clear();\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = newParents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p = _step.value;\n\n          this._parents.add(p);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getNumberOfParents\",\n    value: function getNumberOfParents() {\n      return this._parents.size;\n    }\n  }, {\n    key: \"hasParent\",\n    value: function hasParent(parent) {\n      return this._parents.has(parent);\n    }\n  }, {\n    key: \"removeParent\",\n    value: function removeParent(chunk) {\n      if (this._parents.delete(chunk)) {\n        chunk.removeChunk(this);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {Array} - an array containing the blocks\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function getBlocks() {\n      return this._blocks.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfBlocks\",\n    value: function getNumberOfBlocks() {\n      return this._blocks.size;\n    }\n  }, {\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      return this._blocks.has(block);\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      if (!this._blocks.has(block)) {\n        this._blocks.add(block);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"addOrigin\",\n    value: function addOrigin(module, loc, request) {\n      this.origins.push({\n        module: module,\n        loc: loc,\n        request: request\n      });\n    }\n  }, {\n    key: \"containsModule\",\n    value: function containsModule(module) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var chunk = _step2.value;\n          if (chunk.containsModule(module)) return true;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getFiles\",\n    value: function getFiles() {\n      var files = new Set();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.chunks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var chunk = _step3.value;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = chunk.files[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var file = _step4.value;\n              files.add(file);\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return Array.from(files);\n    }\n    /**\n     * @param {ModuleReason} reason reason for removing ChunkGroup\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(reason) {\n      // cleanup parents\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this._parents[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var parentChunkGroup = _step5.value;\n\n          // remove this chunk from its parents\n          parentChunkGroup._children.delete(this); // cleanup \"sub chunks\"\n\n\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = this._children[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var chunkGroup = _step9.value;\n\n              /**\n               * remove this chunk as \"intermediary\" and connect\n               * it \"sub chunks\" and parents directly\n               */\n              // add parent to each \"sub chunk\"\n              chunkGroup.addParent(parentChunkGroup); // add \"sub chunk\" to parent\n\n              parentChunkGroup.addChild(chunkGroup);\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        }\n        /**\n         * we need to iterate again over the children\n         * to remove this from the childs parents.\n         * This can not be done in the above loop\n         * as it is not guaranteed that `this._parents` contains anything.\n         */\n\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = this._children[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _chunkGroup = _step6.value;\n\n          // remove this as parent of every \"sub chunk\"\n          _chunkGroup._parents.delete(this);\n        } // cleanup blocks\n\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = this._blocks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var block = _step7.value;\n          block.chunkGroup = null;\n        } // remove chunks\n\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = this.chunks[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var chunk = _step8.value;\n          chunk.removeGroup(this);\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      this.origins.sort(sortOrigin);\n\n      this._parents.sort();\n\n      this._children.sort();\n    }\n    /**\n     * Sorting predicate which allows current ChunkGroup to be compared against another.\n     * Sorting values are based off of number of chunks in ChunkGroup.\n     *\n     * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n     * @returns {-1|0|1} sort position for comparison\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(otherGroup) {\n      if (this.chunks.length > otherGroup.chunks.length) return -1;\n      if (this.chunks.length < otherGroup.chunks.length) return 1;\n      var a = this.chunks[Symbol.iterator]();\n      var b = otherGroup.chunks[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n      while (true) {\n        var aItem = a.next();\n        var bItem = b.next();\n        if (aItem.done) return 0;\n        var cmp = aItem.value.compareTo(bItem.value);\n        if (cmp !== 0) return cmp;\n      }\n    }\n  }, {\n    key: \"getChildrenByOrders\",\n    value: function getChildrenByOrders() {\n      var lists = new Map();\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = this._children[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var childGroup = _step10.value;\n\n          // TODO webpack 5 remove this check for options\n          if (typeof childGroup.options === \"object\") {\n            var _arr2 = Object.keys(childGroup.options);\n\n            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n              var key = _arr2[_i2];\n\n              if (key.endsWith(\"Order\")) {\n                var name = key.substr(0, key.length - \"Order\".length);\n                var list = lists.get(name);\n\n                if (list === undefined) {\n                  lists.set(name, list = []);\n                }\n\n                list.push({\n                  order: childGroup.options[key],\n                  group: childGroup\n                });\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      var result = Object.create(null);\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = lists[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n              _name = _step11$value[0],\n              _list = _step11$value[1];\n\n          _list.sort(function (a, b) {\n            var cmp = b.order - a.order;\n            if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n            if (a.group.compareTo) {\n              return a.group.compareTo(b.group);\n            }\n\n            return 0;\n          });\n\n          result[_name] = _list.map(function (i) {\n            return i.group;\n          });\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Sets the top-down index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex\",\n    value: function setModuleIndex(module, index) {\n      this._moduleIndicies.set(module, index);\n    }\n    /**\n     * Gets the top-down index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex\",\n    value: function getModuleIndex(module) {\n      return this._moduleIndicies.get(module);\n    }\n    /**\n     * Sets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex2\",\n    value: function setModuleIndex2(module, index) {\n      this._moduleIndicies2.set(module, index);\n    }\n    /**\n     * Gets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex2\",\n    value: function getModuleIndex2(module) {\n      return this._moduleIndicies2.get(module);\n    }\n  }, {\n    key: \"checkConstraints\",\n    value: function checkConstraints() {\n      var chunk = this;\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = chunk._children[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var child = _step12.value;\n\n          if (!child._parents.has(chunk)) {\n            throw new Error(\"checkConstraints: child missing parent \".concat(chunk.debugId, \" -> \").concat(child.debugId));\n          }\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion13 = true;\n      var _didIteratorError13 = false;\n      var _iteratorError13 = undefined;\n\n      try {\n        for (var _iterator13 = chunk._parents[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n          var parentChunk = _step13.value;\n\n          if (!parentChunk._children.has(chunk)) {\n            throw new Error(\"checkConstraints: parent missing child \".concat(parentChunk.debugId, \" <- \").concat(chunk.debugId));\n          }\n        }\n      } catch (err) {\n        _didIteratorError13 = true;\n        _iteratorError13 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n            _iterator13.return();\n          }\n        } finally {\n          if (_didIteratorError13) {\n            throw _iteratorError13;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n    /**\n     * sets a new name for current ChunkGroup\n     * @param {string} value the new name for ChunkGroup\n     * @returns {void}\n     */\n    ,\n    set: function set(value) {\n      this.options.name = value;\n    }\n    /**\n     * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n     * @returns {string} a unique concatenation of chunk debugId's\n     */\n\n  }, {\n    key: \"debugId\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.debugId;\n      }).join(\"+\");\n    }\n    /**\n     * get a unique id for ChunkGroup, made up of its member Chunk id's\n     * @returns {string} a unique concatenation of chunk ids\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.id;\n      }).join(\"+\");\n    }\n  }, {\n    key: \"childrenIterable\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"parentsIterable\",\n    get: function get() {\n      return this._parents;\n    }\n  }, {\n    key: \"blocksIterable\",\n    get: function get() {\n      return this._blocks;\n    }\n  }]);\n\n  return ChunkGroup;\n}();\n\nmodule.exports = ChunkGroup;","map":null,"metadata":{},"sourceType":"script"}