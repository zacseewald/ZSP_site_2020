{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar getQuery = function getQuery(request) {\n  var i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\n\nvar collectDeclaration = function collectDeclaration(declarations, pattern) {\n  var stack = [pattern];\n\n  while (stack.length > 0) {\n    var node = stack.pop();\n\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n\n      case \"ArrayPattern\":\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = node.elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var element = _step.value;\n\n            if (element) {\n              stack.push(element);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n\n      case \"ObjectPattern\":\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = node.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var property = _step2.value;\n            stack.push(property.value);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        break;\n\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\n\nvar getHoistedDeclarations = function getHoistedDeclarations(branch, includeFunctionDeclarations) {\n  var declarations = new Set();\n  var stack = [branch];\n\n  while (stack.length > 0) {\n    var node = stack.pop(); // Some node could be `null` or `undefined`.\n\n    if (!node) continue;\n\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = node.body[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var stmt = _step3.value;\n            stack.push(stmt);\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        break;\n\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n\n      case \"SwitchStatement\":\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = node.cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var cs = _step4.value;\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = cs.consequent[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var consequent = _step5.value;\n                stack.push(consequent);\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        break;\n\n      case \"TryStatement\":\n        stack.push(node.block);\n\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n\n        stack.push(node.finalizer);\n        break;\n\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n\n        break;\n\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = node.declarations[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var decl = _step6.value;\n              collectDeclaration(declarations, decl.id);\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        }\n\n        break;\n    }\n  }\n\n  return Array.from(declarations);\n};\n\nvar ConstPlugin =\n/*#__PURE__*/\nfunction () {\n  function ConstPlugin() {\n    _classCallCheck(this, ConstPlugin);\n  }\n\n  _createClass(ConstPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ConstPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n        var handler = function handler(parser) {\n          parser.hooks.statementIf.tap(\"ConstPlugin\", function (statement) {\n            var param = parser.evaluateExpression(statement.test);\n            var bool = param.asBool();\n\n            if (typeof bool === \"boolean\") {\n              if (statement.test.type !== \"Literal\") {\n                var dep = new ConstDependency(\"\".concat(bool), param.range);\n                dep.loc = statement.loc;\n                parser.state.current.addDependency(dep);\n              }\n\n              var branchToRemove = bool ? statement.alternate : statement.consequent;\n\n              if (branchToRemove) {\n                // Before removing the dead branch, the hoisted declarations\n                // must be collected.\n                //\n                // Given the following code:\n                //\n                //     if (true) f() else g()\n                //     if (false) {\n                //       function f() {}\n                //       const g = function g() {}\n                //       if (someTest) {\n                //         let a = 1\n                //         var x, {y, z} = obj\n                //       }\n                //     } else {\n                //       â€¦\n                //     }\n                //\n                // the generated code is:\n                //\n                //     if (true) f() else {}\n                //     if (false) {\n                //       var f, x, y, z;   (in loose mode)\n                //       var x, y, z;      (in strict mode)\n                //     } else {\n                //       â€¦\n                //     }\n                //\n                // NOTE: When code runs in strict mode, `var` declarations\n                // are hoisted but `function` declarations don't.\n                //\n                var declarations;\n\n                if (parser.scope.isStrict) {\n                  // If the code runs in strict mode, variable declarations\n                  // using `var` must be hoisted.\n                  declarations = getHoistedDeclarations(branchToRemove, false);\n                } else {\n                  // Otherwise, collect all hoisted declaration.\n                  declarations = getHoistedDeclarations(branchToRemove, true);\n                }\n\n                var replacement;\n\n                if (declarations.length > 0) {\n                  replacement = \"{ var \".concat(declarations.join(\", \"), \"; }\");\n                } else {\n                  replacement = \"{}\";\n                }\n\n                var _dep = new ConstDependency(replacement, branchToRemove.range);\n\n                _dep.loc = branchToRemove.loc;\n                parser.state.current.addDependency(_dep);\n              }\n\n              return bool;\n            }\n          });\n          parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", function (expression) {\n            var param = parser.evaluateExpression(expression.test);\n            var bool = param.asBool();\n\n            if (typeof bool === \"boolean\") {\n              if (expression.test.type !== \"Literal\") {\n                var _dep2 = new ConstDependency(\" \".concat(bool), param.range);\n\n                _dep2.loc = expression.loc;\n                parser.state.current.addDependency(_dep2);\n              } // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // Given the following code:\n              //\n              //   false ? someExpression() : otherExpression();\n              //\n              // the generated code is:\n              //\n              //   false ? undefined : otherExpression();\n              //\n\n\n              var branchToRemove = bool ? expression.alternate : expression.consequent;\n              var dep = new ConstDependency(\"undefined\", branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n              return bool;\n            }\n          });\n          parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", function (expression) {\n            if (expression.operator === \"&&\" || expression.operator === \"||\") {\n              var param = parser.evaluateExpression(expression.left);\n              var bool = param.asBool();\n\n              if (typeof bool === \"boolean\") {\n                // Expressions do not hoist.\n                // It is safe to remove the dead branch.\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   falsyExpression() && someExpression();\n                //\n                // the generated code is:\n                //\n                //   falsyExpression() && false;\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   truthyExpression() && someExpression();\n                //\n                // the generated code is:\n                //\n                //   true && someExpression();\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   truthyExpression() || someExpression();\n                //\n                // the generated code is:\n                //\n                //   truthyExpression() || false;\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   falsyExpression() || someExpression();\n                //\n                // the generated code is:\n                //\n                //   false && someExpression();\n                //\n                var keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n\n                if (param.isBoolean() || keepRight) {\n                  // for case like\n                  //\n                  //   return'development'===process.env.NODE_ENV&&'foo'\n                  //\n                  // we need a space before the bool to prevent result like\n                  //\n                  //   returnfalse&&'foo'\n                  //\n                  var dep = new ConstDependency(\" \".concat(bool), param.range);\n                  dep.loc = expression.loc;\n                  parser.state.current.addDependency(dep);\n                } else {\n                  parser.walkExpression(expression.left);\n                }\n\n                if (!keepRight) {\n                  var _dep3 = new ConstDependency(\"false\", expression.right.range);\n\n                  _dep3.loc = expression.loc;\n                  parser.state.current.addDependency(_dep3);\n                }\n\n                return keepRight;\n              }\n            }\n          });\n          parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", function (expr) {\n            if (!parser.state.module) return;\n            return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n          });\n          parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", function () {\n            if (!parser.state.module) return;\n            parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n            return true;\n          });\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n      });\n    }\n  }]);\n\n  return ConstPlugin;\n}();\n\nmodule.exports = ConstPlugin;","map":null,"metadata":{},"sourceType":"script"}