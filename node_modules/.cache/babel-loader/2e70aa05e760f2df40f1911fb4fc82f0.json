{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar RequestShortener = require(\"./RequestShortener\");\n\nvar SizeFormatHelpers = require(\"./SizeFormatHelpers\");\n\nvar formatLocation = require(\"./formatLocation\");\n\nvar identifierUtils = require(\"./util/identifier\");\n\nvar compareLocations = require(\"./compareLocations\");\n\nvar optionsOrFallback = function optionsOrFallback() {\n  var optionValues = [];\n  optionValues.push.apply(optionValues, arguments);\n  return optionValues.find(function (optionValue) {\n    return optionValue !== undefined;\n  });\n};\n\nvar compareId = function compareId(a, b) {\n  if (typeof a !== typeof b) {\n    return typeof a < typeof b ? -1 : 1;\n  }\n\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nvar Stats =\n/*#__PURE__*/\nfunction () {\n  function Stats(compilation) {\n    _classCallCheck(this, Stats);\n\n    this.compilation = compilation;\n    this.hash = compilation.hash;\n    this.startTime = undefined;\n    this.endTime = undefined;\n  }\n\n  _createClass(Stats, [{\n    key: \"formatFilePath\",\n    value: function formatFilePath(filePath) {\n      var OPTIONS_REGEXP = /^(\\s|\\S)*!/;\n      return filePath.includes(\"!\") ? \"\".concat(filePath.replace(OPTIONS_REGEXP, \"\"), \" (\").concat(filePath, \")\") : \"\".concat(filePath);\n    }\n  }, {\n    key: \"hasWarnings\",\n    value: function hasWarnings() {\n      return this.compilation.warnings.length > 0 || this.compilation.children.some(function (child) {\n        return child.getStats().hasWarnings();\n      });\n    }\n  }, {\n    key: \"hasErrors\",\n    value: function hasErrors() {\n      return this.compilation.errors.length > 0 || this.compilation.children.some(function (child) {\n        return child.getStats().hasErrors();\n      });\n    } // remove a prefixed \"!\" that can be specified to reverse sort order\n\n  }, {\n    key: \"normalizeFieldKey\",\n    value: function normalizeFieldKey(field) {\n      if (field[0] === \"!\") {\n        return field.substr(1);\n      }\n\n      return field;\n    } // if a field is prefixed by a \"!\" reverse sort order\n\n  }, {\n    key: \"sortOrderRegular\",\n    value: function sortOrderRegular(field) {\n      if (field[0] === \"!\") {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson(options, forToString) {\n      var _this = this;\n\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var optionOrLocalFallback = function optionOrLocalFallback(v, def) {\n        return v !== undefined ? v : options.all !== undefined ? options.all : def;\n      };\n\n      var testAgainstGivenOption = function testAgainstGivenOption(item) {\n        if (typeof item === \"string\") {\n          var regExp = new RegExp(\"[\\\\\\\\/]\".concat(item.replace( // eslint-disable-next-line no-useless-escape\n          /[-[\\]{}()*+?.\\\\^$|]/g, \"\\\\$&\"), \"([\\\\\\\\/]|$|!|\\\\?)\"));\n          return function (ident) {\n            return regExp.test(ident);\n          };\n        }\n\n        if (item && typeof item === \"object\" && typeof item.test === \"function\") {\n          return function (ident) {\n            return item.test(ident);\n          };\n        }\n\n        if (typeof item === \"function\") {\n          return item;\n        }\n\n        if (typeof item === \"boolean\") {\n          return function () {\n            return item;\n          };\n        }\n      };\n\n      var compilation = this.compilation;\n      var context = optionsOrFallback(options.context, compilation.compiler.context);\n      var requestShortener = compilation.compiler.context === context ? compilation.requestShortener : new RequestShortener(context);\n      var showPerformance = optionOrLocalFallback(options.performance, true);\n      var showHash = optionOrLocalFallback(options.hash, true);\n      var showEnv = optionOrLocalFallback(options.env, false);\n      var showVersion = optionOrLocalFallback(options.version, true);\n      var showTimings = optionOrLocalFallback(options.timings, true);\n      var showBuiltAt = optionOrLocalFallback(options.builtAt, true);\n      var showAssets = optionOrLocalFallback(options.assets, true);\n      var showEntrypoints = optionOrLocalFallback(options.entrypoints, true);\n      var showChunkGroups = optionOrLocalFallback(options.chunkGroups, !forToString);\n      var showChunks = optionOrLocalFallback(options.chunks, !forToString);\n      var showChunkModules = optionOrLocalFallback(options.chunkModules, true);\n      var showChunkOrigins = optionOrLocalFallback(options.chunkOrigins, !forToString);\n      var showModules = optionOrLocalFallback(options.modules, true);\n      var showNestedModules = optionOrLocalFallback(options.nestedModules, true);\n      var showModuleAssets = optionOrLocalFallback(options.moduleAssets, !forToString);\n      var showDepth = optionOrLocalFallback(options.depth, !forToString);\n      var showCachedModules = optionOrLocalFallback(options.cached, true);\n      var showCachedAssets = optionOrLocalFallback(options.cachedAssets, true);\n      var showReasons = optionOrLocalFallback(options.reasons, !forToString);\n      var showUsedExports = optionOrLocalFallback(options.usedExports, !forToString);\n      var showProvidedExports = optionOrLocalFallback(options.providedExports, !forToString);\n      var showOptimizationBailout = optionOrLocalFallback(options.optimizationBailout, !forToString);\n      var showChildren = optionOrLocalFallback(options.children, true);\n      var showSource = optionOrLocalFallback(options.source, !forToString);\n      var showModuleTrace = optionOrLocalFallback(options.moduleTrace, true);\n      var showErrors = optionOrLocalFallback(options.errors, true);\n      var showErrorDetails = optionOrLocalFallback(options.errorDetails, !forToString);\n      var showWarnings = optionOrLocalFallback(options.warnings, true);\n      var warningsFilter = optionsOrFallback(options.warningsFilter, null);\n      var showPublicPath = optionOrLocalFallback(options.publicPath, !forToString);\n      var excludeModules = [].concat(optionsOrFallback(options.excludeModules, options.exclude, [])).map(testAgainstGivenOption);\n      var excludeAssets = [].concat(optionsOrFallback(options.excludeAssets, [])).map(testAgainstGivenOption);\n      var maxModules = optionsOrFallback(options.maxModules, forToString ? 15 : Infinity);\n      var sortModules = optionsOrFallback(options.modulesSort, \"id\");\n      var sortChunks = optionsOrFallback(options.chunksSort, \"id\");\n      var sortAssets = optionsOrFallback(options.assetsSort, \"\");\n      var showOutputPath = optionOrLocalFallback(options.outputPath, !forToString);\n\n      if (!showCachedModules) {\n        excludeModules.push(function (ident, module) {\n          return !module.built;\n        });\n      }\n\n      var createModuleFilter = function createModuleFilter() {\n        var i = 0;\n        return function (module) {\n          if (excludeModules.length > 0) {\n            var ident = requestShortener.shorten(module.resource);\n            var excluded = excludeModules.some(function (fn) {\n              return fn(ident, module);\n            });\n            if (excluded) return false;\n          }\n\n          var result = i < maxModules;\n          i++;\n          return result;\n        };\n      };\n\n      var createAssetFilter = function createAssetFilter() {\n        return function (asset) {\n          if (excludeAssets.length > 0) {\n            var ident = asset.name;\n            var excluded = excludeAssets.some(function (fn) {\n              return fn(ident, asset);\n            });\n            if (excluded) return false;\n          }\n\n          return showCachedAssets || asset.emitted;\n        };\n      };\n\n      var sortByFieldAndOrder = function sortByFieldAndOrder(fieldKey, a, b) {\n        if (a[fieldKey] === null && b[fieldKey] === null) return 0;\n        if (a[fieldKey] === null) return 1;\n        if (b[fieldKey] === null) return -1;\n        if (a[fieldKey] === b[fieldKey]) return 0;\n        if (typeof a[fieldKey] !== typeof b[fieldKey]) return typeof a[fieldKey] < typeof b[fieldKey] ? -1 : 1;\n        return a[fieldKey] < b[fieldKey] ? -1 : 1;\n      };\n\n      var sortByField = function sortByField(field, originalArray) {\n        var originalMap = originalArray.reduce(function (map, v, i) {\n          map.set(v, i);\n          return map;\n        }, new Map());\n        return function (a, b) {\n          if (field) {\n            var fieldKey = _this.normalizeFieldKey(field); // if a field is prefixed with a \"!\" the sort is reversed!\n\n\n            var sortIsRegular = _this.sortOrderRegular(field);\n\n            var cmp = sortByFieldAndOrder(fieldKey, sortIsRegular ? a : b, sortIsRegular ? b : a);\n            if (cmp) return cmp;\n          }\n\n          return originalMap.get(a) - originalMap.get(b);\n        };\n      };\n\n      var formatError = function formatError(e) {\n        var text = \"\";\n\n        if (typeof e === \"string\") {\n          e = {\n            message: e\n          };\n        }\n\n        if (e.chunk) {\n          text += \"chunk \".concat(e.chunk.name || e.chunk.id).concat(e.chunk.hasRuntime() ? \" [entry]\" : e.chunk.canBeInitial() ? \" [initial]\" : \"\", \"\\n\");\n        }\n\n        if (e.file) {\n          text += \"\".concat(e.file, \"\\n\");\n        }\n\n        if (e.module && e.module.readableIdentifier && typeof e.module.readableIdentifier === \"function\") {\n          text += _this.formatFilePath(e.module.readableIdentifier(requestShortener));\n\n          if (typeof e.loc === \"object\") {\n            var locInfo = formatLocation(e.loc);\n            if (locInfo) text += \" \".concat(locInfo);\n          }\n\n          text += \"\\n\";\n        }\n\n        text += e.message;\n\n        if (showErrorDetails && e.details) {\n          text += \"\\n\".concat(e.details);\n        }\n\n        if (showErrorDetails && e.missing) {\n          text += e.missing.map(function (item) {\n            return \"\\n[\".concat(item, \"]\");\n          }).join(\"\");\n        }\n\n        if (showModuleTrace && e.origin) {\n          text += \"\\n @ \".concat(_this.formatFilePath(e.origin.readableIdentifier(requestShortener)));\n\n          if (typeof e.originLoc === \"object\") {\n            var _locInfo = formatLocation(e.originLoc);\n\n            if (_locInfo) text += \" \".concat(_locInfo);\n          }\n\n          if (e.dependencies) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = e.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var dep = _step.value;\n                if (!dep.loc) continue;\n                if (typeof dep.loc === \"string\") continue;\n\n                var _locInfo2 = formatLocation(dep.loc);\n\n                if (!_locInfo2) continue;\n                text += \" \".concat(_locInfo2);\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n\n          var current = e.origin;\n\n          while (current.issuer) {\n            current = current.issuer;\n            text += \"\\n @ \".concat(current.readableIdentifier(requestShortener));\n          }\n        }\n\n        return text;\n      };\n\n      var obj = {\n        errors: compilation.errors.map(formatError),\n        warnings: Stats.filterWarnings(compilation.warnings.map(formatError), warningsFilter)\n      }; //We just hint other renderers since actually omitting\n      //errors/warnings from the JSON would be kind of weird.\n\n      Object.defineProperty(obj, \"_showWarnings\", {\n        value: showWarnings,\n        enumerable: false\n      });\n      Object.defineProperty(obj, \"_showErrors\", {\n        value: showErrors,\n        enumerable: false\n      });\n\n      if (showVersion) {\n        obj.version = require(\"../package.json\").version;\n      }\n\n      if (showHash) obj.hash = this.hash;\n\n      if (showTimings && this.startTime && this.endTime) {\n        obj.time = this.endTime - this.startTime;\n      }\n\n      if (showBuiltAt && this.endTime) {\n        obj.builtAt = this.endTime;\n      }\n\n      if (showEnv && options._env) {\n        obj.env = options._env;\n      }\n\n      if (compilation.needAdditionalPass) {\n        obj.needAdditionalPass = true;\n      }\n\n      if (showPublicPath) {\n        obj.publicPath = this.compilation.mainTemplate.getPublicPath({\n          hash: this.compilation.hash\n        });\n      }\n\n      if (showOutputPath) {\n        obj.outputPath = this.compilation.mainTemplate.outputOptions.path;\n      }\n\n      if (showAssets) {\n        var assetsByFile = {};\n        var compilationAssets = Object.keys(compilation.assets).sort();\n        obj.assetsByChunkName = {};\n        obj.assets = compilationAssets.map(function (asset) {\n          var obj = {\n            name: asset,\n            size: compilation.assets[asset].size(),\n            chunks: [],\n            chunkNames: [],\n            emitted: compilation.assets[asset].emitted\n          };\n\n          if (showPerformance) {\n            obj.isOverSizeLimit = compilation.assets[asset].isOverSizeLimit;\n          }\n\n          assetsByFile[asset] = obj;\n          return obj;\n        }).filter(createAssetFilter());\n        obj.filteredAssets = compilationAssets.length - obj.assets.length;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = compilation.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var chunk = _step2.value;\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = chunk.files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var asset = _step3.value;\n\n                if (assetsByFile[asset]) {\n                  var _iteratorNormalCompletion4 = true;\n                  var _didIteratorError4 = false;\n                  var _iteratorError4 = undefined;\n\n                  try {\n                    for (var _iterator4 = chunk.ids[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                      var id = _step4.value;\n                      assetsByFile[asset].chunks.push(id);\n                    }\n                  } catch (err) {\n                    _didIteratorError4 = true;\n                    _iteratorError4 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                        _iterator4.return();\n                      }\n                    } finally {\n                      if (_didIteratorError4) {\n                        throw _iteratorError4;\n                      }\n                    }\n                  }\n\n                  if (chunk.name) {\n                    assetsByFile[asset].chunkNames.push(chunk.name);\n\n                    if (obj.assetsByChunkName[chunk.name]) {\n                      obj.assetsByChunkName[chunk.name] = [].concat(obj.assetsByChunkName[chunk.name]).concat([asset]);\n                    } else {\n                      obj.assetsByChunkName[chunk.name] = asset;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        obj.assets.sort(sortByField(sortAssets, obj.assets));\n      }\n\n      var fnChunkGroup = function fnChunkGroup(groupMap) {\n        var obj = {};\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var keyValuePair = _step5.value;\n            var name = keyValuePair[0];\n            var cg = keyValuePair[1];\n            var children = cg.getChildrenByOrders();\n            obj[name] = {\n              chunks: cg.chunks.map(function (c) {\n                return c.id;\n              }),\n              assets: cg.chunks.reduce(function (array, c) {\n                return array.concat(c.files || []);\n              }, []),\n              children: Object.keys(children).reduce(function (obj, key) {\n                var groups = children[key];\n                obj[key] = groups.map(function (group) {\n                  return {\n                    name: group.name,\n                    chunks: group.chunks.map(function (c) {\n                      return c.id;\n                    }),\n                    assets: group.chunks.reduce(function (array, c) {\n                      return array.concat(c.files || []);\n                    }, [])\n                  };\n                });\n                return obj;\n              }, Object.create(null)),\n              childAssets: Object.keys(children).reduce(function (obj, key) {\n                var groups = children[key];\n                obj[key] = Array.from(groups.reduce(function (set, group) {\n                  var _iteratorNormalCompletion6 = true;\n                  var _didIteratorError6 = false;\n                  var _iteratorError6 = undefined;\n\n                  try {\n                    for (var _iterator6 = group.chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                      var _chunk = _step6.value;\n                      var _iteratorNormalCompletion7 = true;\n                      var _didIteratorError7 = false;\n                      var _iteratorError7 = undefined;\n\n                      try {\n                        for (var _iterator7 = _chunk.files[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                          var _asset = _step7.value;\n                          set.add(_asset);\n                        }\n                      } catch (err) {\n                        _didIteratorError7 = true;\n                        _iteratorError7 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                            _iterator7.return();\n                          }\n                        } finally {\n                          if (_didIteratorError7) {\n                            throw _iteratorError7;\n                          }\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError6 = true;\n                    _iteratorError6 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                        _iterator6.return();\n                      }\n                    } finally {\n                      if (_didIteratorError6) {\n                        throw _iteratorError6;\n                      }\n                    }\n                  }\n\n                  return set;\n                }, new Set()));\n                return obj;\n              }, Object.create(null))\n            };\n\n            if (showPerformance) {\n              obj[name].isOverSizeLimit = cg.isOverSizeLimit;\n            }\n          };\n\n          for (var _iterator5 = groupMap[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n\n        return obj;\n      };\n\n      if (showEntrypoints) {\n        obj.entrypoints = fnChunkGroup(compilation.entrypoints);\n      }\n\n      if (showChunkGroups) {\n        obj.namedChunkGroups = fnChunkGroup(compilation.namedChunkGroups);\n      }\n\n      var fnModule = function fnModule(module) {\n        var path = [];\n        var current = module;\n\n        while (current.issuer) {\n          path.push(current = current.issuer);\n        }\n\n        path.reverse();\n        var obj = {\n          id: module.id,\n          identifier: module.identifier(),\n          name: module.readableIdentifier(requestShortener),\n          index: module.index,\n          index2: module.index2,\n          size: module.size(),\n          cacheable: module.buildInfo.cacheable,\n          built: !!module.built,\n          optional: module.optional,\n          prefetched: module.prefetched,\n          chunks: Array.from(module.chunksIterable, function (chunk) {\n            return chunk.id;\n          }),\n          issuer: module.issuer && module.issuer.identifier(),\n          issuerId: module.issuer && module.issuer.id,\n          issuerName: module.issuer && module.issuer.readableIdentifier(requestShortener),\n          issuerPath: module.issuer && path.map(function (module) {\n            return {\n              id: module.id,\n              identifier: module.identifier(),\n              name: module.readableIdentifier(requestShortener),\n              profile: module.profile\n            };\n          }),\n          profile: module.profile,\n          failed: !!module.error,\n          errors: module.errors ? module.errors.length : 0,\n          warnings: module.warnings ? module.warnings.length : 0\n        };\n\n        if (showModuleAssets) {\n          obj.assets = Object.keys(module.buildInfo.assets || {});\n        }\n\n        if (showReasons) {\n          obj.reasons = module.reasons.sort(function (a, b) {\n            if (a.module && !b.module) return -1;\n            if (!a.module && b.module) return 1;\n\n            if (a.module && b.module) {\n              var cmp = compareId(a.module.id, b.module.id);\n              if (cmp) return cmp;\n            }\n\n            if (a.dependency && !b.dependency) return -1;\n            if (!a.dependency && b.dependency) return 1;\n\n            if (a.dependency && b.dependency) {\n              var _cmp = compareLocations(a.dependency.loc, b.dependency.loc);\n\n              if (_cmp) return _cmp;\n              if (a.dependency.type < b.dependency.type) return -1;\n              if (a.dependency.type > b.dependency.type) return 1;\n            }\n\n            return 0;\n          }).map(function (reason) {\n            var obj = {\n              moduleId: reason.module ? reason.module.id : null,\n              moduleIdentifier: reason.module ? reason.module.identifier() : null,\n              module: reason.module ? reason.module.readableIdentifier(requestShortener) : null,\n              moduleName: reason.module ? reason.module.readableIdentifier(requestShortener) : null,\n              type: reason.dependency ? reason.dependency.type : null,\n              explanation: reason.explanation,\n              userRequest: reason.dependency ? reason.dependency.userRequest : null\n            };\n\n            if (reason.dependency) {\n              var locInfo = formatLocation(reason.dependency.loc);\n\n              if (locInfo) {\n                obj.loc = locInfo;\n              }\n            }\n\n            return obj;\n          });\n        }\n\n        if (showUsedExports) {\n          if (module.used === true) {\n            obj.usedExports = module.usedExports;\n          } else if (module.used === false) {\n            obj.usedExports = false;\n          }\n        }\n\n        if (showProvidedExports) {\n          obj.providedExports = Array.isArray(module.buildMeta.providedExports) ? module.buildMeta.providedExports : null;\n        }\n\n        if (showOptimizationBailout) {\n          obj.optimizationBailout = module.optimizationBailout.map(function (item) {\n            if (typeof item === \"function\") return item(requestShortener);\n            return item;\n          });\n        }\n\n        if (showDepth) {\n          obj.depth = module.depth;\n        }\n\n        if (showNestedModules) {\n          if (module.modules) {\n            var modules = module.modules;\n            obj.modules = modules.sort(sortByField(\"depth\", modules)).filter(createModuleFilter()).map(fnModule);\n            obj.filteredModules = modules.length - obj.modules.length;\n            obj.modules.sort(sortByField(sortModules, obj.modules));\n          }\n        }\n\n        if (showSource && module._source) {\n          obj.source = module._source.source();\n        }\n\n        return obj;\n      };\n\n      if (showChunks) {\n        obj.chunks = compilation.chunks.map(function (chunk) {\n          var parents = new Set();\n          var children = new Set();\n          var siblings = new Set();\n          var childIdByOrder = chunk.getChildIdsByOrders();\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = chunk.groupsIterable[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var chunkGroup = _step8.value;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = chunkGroup.parentsIterable[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var parentGroup = _step9.value;\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = parentGroup.chunks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _chunk2 = _step12.value;\n                      parents.add(_chunk2.id);\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = chunkGroup.childrenIterable[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var childGroup = _step10.value;\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = childGroup.chunks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _chunk3 = _step13.value;\n                      children.add(_chunk3.id);\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = chunkGroup.chunks[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var sibling = _step11.value;\n                  if (sibling !== chunk) siblings.add(sibling.id);\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n\n          var obj = {\n            id: chunk.id,\n            rendered: chunk.rendered,\n            initial: chunk.canBeInitial(),\n            entry: chunk.hasRuntime(),\n            recorded: chunk.recorded,\n            reason: chunk.chunkReason,\n            size: chunk.modulesSize(),\n            names: chunk.name ? [chunk.name] : [],\n            files: chunk.files.slice(),\n            hash: chunk.renderedHash,\n            siblings: Array.from(siblings).sort(compareId),\n            parents: Array.from(parents).sort(compareId),\n            children: Array.from(children).sort(compareId),\n            childrenByOrder: childIdByOrder\n          };\n\n          if (showChunkModules) {\n            var modules = chunk.getModules();\n            obj.modules = modules.slice().sort(sortByField(\"depth\", modules)).filter(createModuleFilter()).map(fnModule);\n            obj.filteredModules = chunk.getNumberOfModules() - obj.modules.length;\n            obj.modules.sort(sortByField(sortModules, obj.modules));\n          }\n\n          if (showChunkOrigins) {\n            obj.origins = Array.from(chunk.groupsIterable, function (g) {\n              return g.origins;\n            }).reduce(function (a, b) {\n              return a.concat(b);\n            }, []).map(function (origin) {\n              return {\n                moduleId: origin.module ? origin.module.id : undefined,\n                module: origin.module ? origin.module.identifier() : \"\",\n                moduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n                moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : \"\",\n                loc: formatLocation(origin.loc),\n                request: origin.request,\n                reasons: origin.reasons || []\n              };\n            }).sort(function (a, b) {\n              var cmp1 = compareId(a.moduleId, b.moduleId);\n              if (cmp1) return cmp1;\n              var cmp2 = compareId(a.loc, b.loc);\n              if (cmp2) return cmp2;\n              var cmp3 = compareId(a.request, b.request);\n              if (cmp3) return cmp3;\n              return 0;\n            });\n          }\n\n          return obj;\n        });\n        obj.chunks.sort(sortByField(sortChunks, obj.chunks));\n      }\n\n      if (showModules) {\n        obj.modules = compilation.modules.slice().sort(sortByField(\"depth\", compilation.modules)).filter(createModuleFilter()).map(fnModule);\n        obj.filteredModules = compilation.modules.length - obj.modules.length;\n        obj.modules.sort(sortByField(sortModules, obj.modules));\n      }\n\n      if (showChildren) {\n        obj.children = compilation.children.map(function (child, idx) {\n          var childOptions = Stats.getChildOptions(options, idx);\n          var obj = new Stats(child).toJson(childOptions, forToString);\n          delete obj.hash;\n          delete obj.version;\n\n          if (child.name) {\n            obj.name = identifierUtils.makePathsRelative(context, child.name, compilation.cache);\n          }\n\n          return obj;\n        });\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var useColors = optionsOrFallback(options.colors, false);\n      var obj = this.toJson(options, true);\n      return Stats.jsonToString(obj, useColors);\n    }\n  }], [{\n    key: \"filterWarnings\",\n    value: function filterWarnings(warnings, warningsFilter) {\n      // we dont have anything to filter so all warnings can be shown\n      if (!warningsFilter) {\n        return warnings;\n      } // create a chain of filters\n      // if they return \"true\" a warning should be suppressed\n\n\n      var normalizedWarningsFilters = [].concat(warningsFilter).map(function (filter) {\n        if (typeof filter === \"string\") {\n          return function (warning) {\n            return warning.includes(filter);\n          };\n        }\n\n        if (filter instanceof RegExp) {\n          return function (warning) {\n            return filter.test(warning);\n          };\n        }\n\n        if (typeof filter === \"function\") {\n          return filter;\n        }\n\n        throw new Error(\"Can only filter warnings with Strings or RegExps. (Given: \".concat(filter, \")\"));\n      });\n      return warnings.filter(function (warning) {\n        return !normalizedWarningsFilters.some(function (check) {\n          return check(warning);\n        });\n      });\n    }\n  }, {\n    key: \"jsonToString\",\n    value: function jsonToString(obj, useColors) {\n      var buf = [];\n      var defaultColors = {\n        bold: \"\\x1B[1m\",\n        yellow: \"\\x1B[1m\\x1B[33m\",\n        red: \"\\x1B[1m\\x1B[31m\",\n        green: \"\\x1B[1m\\x1B[32m\",\n        cyan: \"\\x1B[1m\\x1B[36m\",\n        magenta: \"\\x1B[1m\\x1B[35m\"\n      };\n      var colors = Object.keys(defaultColors).reduce(function (obj, color) {\n        obj[color] = function (str) {\n          if (useColors) {\n            buf.push(useColors === true || useColors[color] === undefined ? defaultColors[color] : useColors[color]);\n          }\n\n          buf.push(str);\n\n          if (useColors) {\n            buf.push(\"\\x1B[39m\\x1B[22m\");\n          }\n        };\n\n        return obj;\n      }, {\n        normal: function normal(str) {\n          return buf.push(str);\n        }\n      });\n\n      var coloredTime = function coloredTime(time) {\n        var times = [800, 400, 200, 100];\n\n        if (obj.time) {\n          times = [obj.time / 2, obj.time / 4, obj.time / 8, obj.time / 16];\n        }\n\n        if (time < times[3]) colors.normal(\"\".concat(time, \"ms\"));else if (time < times[2]) colors.bold(\"\".concat(time, \"ms\"));else if (time < times[1]) colors.green(\"\".concat(time, \"ms\"));else if (time < times[0]) colors.yellow(\"\".concat(time, \"ms\"));else colors.red(\"\".concat(time, \"ms\"));\n      };\n\n      var newline = function newline() {\n        return buf.push(\"\\n\");\n      };\n\n      var getText = function getText(arr, row, col) {\n        return arr[row][col].value;\n      };\n\n      var table = function table(array, align, splitter) {\n        var rows = array.length;\n        var cols = array[0].length;\n        var colSizes = new Array(cols);\n\n        for (var col = 0; col < cols; col++) {\n          colSizes[col] = 0;\n        }\n\n        for (var row = 0; row < rows; row++) {\n          for (var _col = 0; _col < cols; _col++) {\n            var value = \"\".concat(getText(array, row, _col));\n\n            if (value.length > colSizes[_col]) {\n              colSizes[_col] = value.length;\n            }\n          }\n        }\n\n        for (var _row = 0; _row < rows; _row++) {\n          for (var _col2 = 0; _col2 < cols; _col2++) {\n            var format = array[_row][_col2].color;\n\n            var _value = \"\".concat(getText(array, _row, _col2));\n\n            var l = _value.length;\n\n            if (align[_col2] === \"l\") {\n              format(_value);\n            }\n\n            for (; l < colSizes[_col2] && _col2 !== cols - 1; l++) {\n              colors.normal(\" \");\n            }\n\n            if (align[_col2] === \"r\") {\n              format(_value);\n            }\n\n            if (_col2 + 1 < cols && colSizes[_col2] !== 0) {\n              colors.normal(splitter || \"  \");\n            }\n          }\n\n          newline();\n        }\n      };\n\n      var getAssetColor = function getAssetColor(asset, defaultColor) {\n        if (asset.isOverSizeLimit) {\n          return colors.yellow;\n        }\n\n        return defaultColor;\n      };\n\n      if (obj.hash) {\n        colors.normal(\"Hash: \");\n        colors.bold(obj.hash);\n        newline();\n      }\n\n      if (obj.version) {\n        colors.normal(\"Version: webpack \");\n        colors.bold(obj.version);\n        newline();\n      }\n\n      if (typeof obj.time === \"number\") {\n        colors.normal(\"Time: \");\n        colors.bold(obj.time);\n        colors.normal(\"ms\");\n        newline();\n      }\n\n      if (typeof obj.builtAt === \"number\") {\n        var builtAtDate = new Date(obj.builtAt);\n        colors.normal(\"Built at: \");\n        colors.normal(builtAtDate.toLocaleDateString(undefined, {\n          day: \"2-digit\",\n          month: \"2-digit\",\n          year: \"numeric\"\n        }));\n        colors.normal(\" \");\n        colors.bold(builtAtDate.toLocaleTimeString());\n        newline();\n      }\n\n      if (obj.env) {\n        colors.normal(\"Environment (--env): \");\n        colors.bold(JSON.stringify(obj.env, null, 2));\n        newline();\n      }\n\n      if (obj.publicPath) {\n        colors.normal(\"PublicPath: \");\n        colors.bold(obj.publicPath);\n        newline();\n      }\n\n      if (obj.assets && obj.assets.length > 0) {\n        var t = [[{\n          value: \"Asset\",\n          color: colors.bold\n        }, {\n          value: \"Size\",\n          color: colors.bold\n        }, {\n          value: \"Chunks\",\n          color: colors.bold\n        }, {\n          value: \"\",\n          color: colors.bold\n        }, {\n          value: \"\",\n          color: colors.bold\n        }, {\n          value: \"Chunk Names\",\n          color: colors.bold\n        }]];\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = obj.assets[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var asset = _step14.value;\n            t.push([{\n              value: asset.name,\n              color: getAssetColor(asset, colors.green)\n            }, {\n              value: SizeFormatHelpers.formatSize(asset.size),\n              color: getAssetColor(asset, colors.normal)\n            }, {\n              value: asset.chunks.join(\", \"),\n              color: colors.bold\n            }, {\n              value: asset.emitted ? \"[emitted]\" : \"\",\n              color: colors.green\n            }, {\n              value: asset.isOverSizeLimit ? \"[big]\" : \"\",\n              color: getAssetColor(asset, colors.normal)\n            }, {\n              value: asset.chunkNames.join(\", \"),\n              color: colors.normal\n            }]);\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n              _iterator14.return();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n\n        table(t, \"rrrlll\");\n      }\n\n      if (obj.filteredAssets > 0) {\n        colors.normal(\" \");\n        if (obj.assets.length > 0) colors.normal(\"+ \");\n        colors.normal(obj.filteredAssets);\n        if (obj.assets.length > 0) colors.normal(\" hidden\");\n        colors.normal(obj.filteredAssets !== 1 ? \" assets\" : \" asset\");\n        newline();\n      }\n\n      var processChunkGroups = function processChunkGroups(namedGroups, prefix) {\n        var _arr = Object.keys(namedGroups);\n\n        for (var _i = 0; _i < _arr.length; _i++) {\n          var name = _arr[_i];\n          var cg = namedGroups[name];\n          colors.normal(\"\".concat(prefix, \" \"));\n          colors.bold(name);\n\n          if (cg.isOverSizeLimit) {\n            colors.normal(\" \");\n            colors.yellow(\"[big]\");\n          }\n\n          colors.normal(\" =\");\n          var _iteratorNormalCompletion15 = true;\n          var _didIteratorError15 = false;\n          var _iteratorError15 = undefined;\n\n          try {\n            for (var _iterator15 = cg.assets[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n              var _asset2 = _step15.value;\n              colors.normal(\" \");\n              colors.green(_asset2);\n            }\n          } catch (err) {\n            _didIteratorError15 = true;\n            _iteratorError15 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n                _iterator15.return();\n              }\n            } finally {\n              if (_didIteratorError15) {\n                throw _iteratorError15;\n              }\n            }\n          }\n\n          var _arr2 = Object.keys(cg.childAssets);\n\n          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n            var _name = _arr2[_i2];\n            var assets = cg.childAssets[_name];\n\n            if (assets && assets.length > 0) {\n              colors.normal(\" \");\n              colors.magenta(\"(\".concat(_name, \":\"));\n              var _iteratorNormalCompletion16 = true;\n              var _didIteratorError16 = false;\n              var _iteratorError16 = undefined;\n\n              try {\n                for (var _iterator16 = assets[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n                  var _asset3 = _step16.value;\n                  colors.normal(\" \");\n                  colors.green(_asset3);\n                }\n              } catch (err) {\n                _didIteratorError16 = true;\n                _iteratorError16 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion16 && _iterator16.return != null) {\n                    _iterator16.return();\n                  }\n                } finally {\n                  if (_didIteratorError16) {\n                    throw _iteratorError16;\n                  }\n                }\n              }\n\n              colors.magenta(\")\");\n            }\n          }\n\n          newline();\n        }\n      };\n\n      if (obj.entrypoints) {\n        processChunkGroups(obj.entrypoints, \"Entrypoint\");\n      }\n\n      if (obj.namedChunkGroups) {\n        var outputChunkGroups = obj.namedChunkGroups;\n\n        if (obj.entrypoints) {\n          outputChunkGroups = Object.keys(outputChunkGroups).filter(function (name) {\n            return !obj.entrypoints[name];\n          }).reduce(function (result, name) {\n            result[name] = obj.namedChunkGroups[name];\n            return result;\n          }, {});\n        }\n\n        processChunkGroups(outputChunkGroups, \"Chunk Group\");\n      }\n\n      var modulesByIdentifier = {};\n\n      if (obj.modules) {\n        var _iteratorNormalCompletion17 = true;\n        var _didIteratorError17 = false;\n        var _iteratorError17 = undefined;\n\n        try {\n          for (var _iterator17 = obj.modules[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var _module = _step17.value;\n            modulesByIdentifier[\"$\".concat(_module.identifier)] = _module;\n          }\n        } catch (err) {\n          _didIteratorError17 = true;\n          _iteratorError17 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return != null) {\n              _iterator17.return();\n            }\n          } finally {\n            if (_didIteratorError17) {\n              throw _iteratorError17;\n            }\n          }\n        }\n      } else if (obj.chunks) {\n        var _iteratorNormalCompletion18 = true;\n        var _didIteratorError18 = false;\n        var _iteratorError18 = undefined;\n\n        try {\n          for (var _iterator18 = obj.chunks[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n            var chunk = _step18.value;\n\n            if (chunk.modules) {\n              var _iteratorNormalCompletion19 = true;\n              var _didIteratorError19 = false;\n              var _iteratorError19 = undefined;\n\n              try {\n                for (var _iterator19 = chunk.modules[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                  var _module2 = _step19.value;\n                  modulesByIdentifier[\"$\".concat(_module2.identifier)] = _module2;\n                }\n              } catch (err) {\n                _didIteratorError19 = true;\n                _iteratorError19 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion19 && _iterator19.return != null) {\n                    _iterator19.return();\n                  }\n                } finally {\n                  if (_didIteratorError19) {\n                    throw _iteratorError19;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError18 = true;\n          _iteratorError18 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion18 && _iterator18.return != null) {\n              _iterator18.return();\n            }\n          } finally {\n            if (_didIteratorError18) {\n              throw _iteratorError18;\n            }\n          }\n        }\n      }\n\n      var processModuleAttributes = function processModuleAttributes(module) {\n        colors.normal(\" \");\n        colors.normal(SizeFormatHelpers.formatSize(module.size));\n\n        if (module.chunks) {\n          var _iteratorNormalCompletion20 = true;\n          var _didIteratorError20 = false;\n          var _iteratorError20 = undefined;\n\n          try {\n            for (var _iterator20 = module.chunks[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n              var _chunk4 = _step20.value;\n              colors.normal(\" {\");\n              colors.yellow(_chunk4);\n              colors.normal(\"}\");\n            }\n          } catch (err) {\n            _didIteratorError20 = true;\n            _iteratorError20 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion20 && _iterator20.return != null) {\n                _iterator20.return();\n              }\n            } finally {\n              if (_didIteratorError20) {\n                throw _iteratorError20;\n              }\n            }\n          }\n        }\n\n        if (typeof module.depth === \"number\") {\n          colors.normal(\" [depth \".concat(module.depth, \"]\"));\n        }\n\n        if (module.cacheable === false) {\n          colors.red(\" [not cacheable]\");\n        }\n\n        if (module.optional) {\n          colors.yellow(\" [optional]\");\n        }\n\n        if (module.built) {\n          colors.green(\" [built]\");\n        }\n\n        if (module.assets && module.assets.length) {\n          colors.magenta(\" [\".concat(module.assets.length, \" asset\").concat(module.assets.length === 1 ? \"\" : \"s\", \"]\"));\n        }\n\n        if (module.prefetched) {\n          colors.magenta(\" [prefetched]\");\n        }\n\n        if (module.failed) colors.red(\" [failed]\");\n\n        if (module.warnings) {\n          colors.yellow(\" [\".concat(module.warnings, \" warning\").concat(module.warnings === 1 ? \"\" : \"s\", \"]\"));\n        }\n\n        if (module.errors) {\n          colors.red(\" [\".concat(module.errors, \" error\").concat(module.errors === 1 ? \"\" : \"s\", \"]\"));\n        }\n      };\n\n      var processModuleContent = function processModuleContent(module, prefix) {\n        if (Array.isArray(module.providedExports)) {\n          colors.normal(prefix);\n\n          if (module.providedExports.length === 0) {\n            colors.cyan(\"[no exports]\");\n          } else {\n            colors.cyan(\"[exports: \".concat(module.providedExports.join(\", \"), \"]\"));\n          }\n\n          newline();\n        }\n\n        if (module.usedExports !== undefined) {\n          if (module.usedExports !== true) {\n            colors.normal(prefix);\n\n            if (module.usedExports === null) {\n              colors.cyan(\"[used exports unknown]\");\n            } else if (module.usedExports === false) {\n              colors.cyan(\"[no exports used]\");\n            } else if (Array.isArray(module.usedExports) && module.usedExports.length === 0) {\n              colors.cyan(\"[no exports used]\");\n            } else if (Array.isArray(module.usedExports)) {\n              var providedExportsCount = Array.isArray(module.providedExports) ? module.providedExports.length : null;\n\n              if (providedExportsCount !== null && providedExportsCount === module.usedExports.length) {\n                colors.cyan(\"[all exports used]\");\n              } else {\n                colors.cyan(\"[only some exports used: \".concat(module.usedExports.join(\", \"), \"]\"));\n              }\n            }\n\n            newline();\n          }\n        }\n\n        if (Array.isArray(module.optimizationBailout)) {\n          var _iteratorNormalCompletion21 = true;\n          var _didIteratorError21 = false;\n          var _iteratorError21 = undefined;\n\n          try {\n            for (var _iterator21 = module.optimizationBailout[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n              var item = _step21.value;\n              colors.normal(prefix);\n              colors.yellow(item);\n              newline();\n            }\n          } catch (err) {\n            _didIteratorError21 = true;\n            _iteratorError21 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion21 && _iterator21.return != null) {\n                _iterator21.return();\n              }\n            } finally {\n              if (_didIteratorError21) {\n                throw _iteratorError21;\n              }\n            }\n          }\n        }\n\n        if (module.reasons) {\n          var _iteratorNormalCompletion22 = true;\n          var _didIteratorError22 = false;\n          var _iteratorError22 = undefined;\n\n          try {\n            for (var _iterator22 = module.reasons[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n              var reason = _step22.value;\n              colors.normal(prefix);\n\n              if (reason.type) {\n                colors.normal(reason.type);\n                colors.normal(\" \");\n              }\n\n              if (reason.userRequest) {\n                colors.cyan(reason.userRequest);\n                colors.normal(\" \");\n              }\n\n              if (reason.moduleId !== null) {\n                colors.normal(\"[\");\n                colors.normal(reason.moduleId);\n                colors.normal(\"]\");\n              }\n\n              if (reason.module && reason.module !== reason.moduleId) {\n                colors.normal(\" \");\n                colors.magenta(reason.module);\n              }\n\n              if (reason.loc) {\n                colors.normal(\" \");\n                colors.normal(reason.loc);\n              }\n\n              if (reason.explanation) {\n                colors.normal(\" \");\n                colors.cyan(reason.explanation);\n              }\n\n              newline();\n            }\n          } catch (err) {\n            _didIteratorError22 = true;\n            _iteratorError22 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion22 && _iterator22.return != null) {\n                _iterator22.return();\n              }\n            } finally {\n              if (_didIteratorError22) {\n                throw _iteratorError22;\n              }\n            }\n          }\n        }\n\n        if (module.profile) {\n          colors.normal(prefix);\n          var sum = 0;\n\n          if (module.issuerPath) {\n            var _iteratorNormalCompletion23 = true;\n            var _didIteratorError23 = false;\n            var _iteratorError23 = undefined;\n\n            try {\n              for (var _iterator23 = module.issuerPath[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                var m = _step23.value;\n                colors.normal(\"[\");\n                colors.normal(m.id);\n                colors.normal(\"] \");\n\n                if (m.profile) {\n                  var time = (m.profile.factory || 0) + (m.profile.building || 0);\n                  coloredTime(time);\n                  sum += time;\n                  colors.normal(\" \");\n                }\n\n                colors.normal(\"-> \");\n              }\n            } catch (err) {\n              _didIteratorError23 = true;\n              _iteratorError23 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion23 && _iterator23.return != null) {\n                  _iterator23.return();\n                }\n              } finally {\n                if (_didIteratorError23) {\n                  throw _iteratorError23;\n                }\n              }\n            }\n          }\n\n          var _arr3 = Object.keys(module.profile);\n\n          for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n            var key = _arr3[_i3];\n            colors.normal(\"\".concat(key, \":\"));\n            var _time = module.profile[key];\n            coloredTime(_time);\n            colors.normal(\" \");\n            sum += _time;\n          }\n\n          colors.normal(\"= \");\n          coloredTime(sum);\n          newline();\n        }\n\n        if (module.modules) {\n          processModulesList(module, prefix + \"| \");\n        }\n      };\n\n      var processModulesList = function processModulesList(obj, prefix) {\n        if (obj.modules) {\n          var maxModuleId = 0;\n          var _iteratorNormalCompletion24 = true;\n          var _didIteratorError24 = false;\n          var _iteratorError24 = undefined;\n\n          try {\n            for (var _iterator24 = obj.modules[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n              var _module3 = _step24.value;\n\n              if (typeof _module3.id === \"number\") {\n                if (maxModuleId < _module3.id) maxModuleId = _module3.id;\n              }\n            }\n          } catch (err) {\n            _didIteratorError24 = true;\n            _iteratorError24 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion24 && _iterator24.return != null) {\n                _iterator24.return();\n              }\n            } finally {\n              if (_didIteratorError24) {\n                throw _iteratorError24;\n              }\n            }\n          }\n\n          var contentPrefix = prefix + \"    \";\n          if (maxModuleId >= 10) contentPrefix += \" \";\n          if (maxModuleId >= 100) contentPrefix += \" \";\n          if (maxModuleId >= 1000) contentPrefix += \" \";\n          var _iteratorNormalCompletion25 = true;\n          var _didIteratorError25 = false;\n          var _iteratorError25 = undefined;\n\n          try {\n            for (var _iterator25 = obj.modules[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n              var _module4 = _step25.value;\n              colors.normal(prefix);\n              var name = _module4.name || _module4.identifier;\n\n              if (typeof _module4.id === \"string\" || typeof _module4.id === \"number\") {\n                if (typeof _module4.id === \"number\") {\n                  if (_module4.id < 1000 && maxModuleId >= 1000) colors.normal(\" \");\n                  if (_module4.id < 100 && maxModuleId >= 100) colors.normal(\" \");\n                  if (_module4.id < 10 && maxModuleId >= 10) colors.normal(\" \");\n                } else {\n                  if (maxModuleId >= 1000) colors.normal(\" \");\n                  if (maxModuleId >= 100) colors.normal(\" \");\n                  if (maxModuleId >= 10) colors.normal(\" \");\n                }\n\n                if (name !== _module4.id) {\n                  colors.normal(\"[\");\n                  colors.normal(_module4.id);\n                  colors.normal(\"]\");\n                  colors.normal(\" \");\n                } else {\n                  colors.normal(\"[\");\n                  colors.bold(_module4.id);\n                  colors.normal(\"]\");\n                }\n              }\n\n              if (name !== _module4.id) {\n                colors.bold(name);\n              }\n\n              processModuleAttributes(_module4);\n              newline();\n              processModuleContent(_module4, contentPrefix);\n            }\n          } catch (err) {\n            _didIteratorError25 = true;\n            _iteratorError25 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion25 && _iterator25.return != null) {\n                _iterator25.return();\n              }\n            } finally {\n              if (_didIteratorError25) {\n                throw _iteratorError25;\n              }\n            }\n          }\n\n          if (obj.filteredModules > 0) {\n            colors.normal(prefix);\n            colors.normal(\"   \");\n            if (obj.modules.length > 0) colors.normal(\" + \");\n            colors.normal(obj.filteredModules);\n            if (obj.modules.length > 0) colors.normal(\" hidden\");\n            colors.normal(obj.filteredModules !== 1 ? \" modules\" : \" module\");\n            newline();\n          }\n        }\n      };\n\n      if (obj.chunks) {\n        var _iteratorNormalCompletion26 = true;\n        var _didIteratorError26 = false;\n        var _iteratorError26 = undefined;\n\n        try {\n          for (var _iterator26 = obj.chunks[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n            var _chunk5 = _step26.value;\n            colors.normal(\"chunk \");\n            if (_chunk5.id < 1000) colors.normal(\" \");\n            if (_chunk5.id < 100) colors.normal(\" \");\n            if (_chunk5.id < 10) colors.normal(\" \");\n            colors.normal(\"{\");\n            colors.yellow(_chunk5.id);\n            colors.normal(\"} \");\n            colors.green(_chunk5.files.join(\", \"));\n\n            if (_chunk5.names && _chunk5.names.length > 0) {\n              colors.normal(\" (\");\n              colors.normal(_chunk5.names.join(\", \"));\n              colors.normal(\")\");\n            }\n\n            colors.normal(\" \");\n            colors.normal(SizeFormatHelpers.formatSize(_chunk5.size));\n            var _iteratorNormalCompletion27 = true;\n            var _didIteratorError27 = false;\n            var _iteratorError27 = undefined;\n\n            try {\n              for (var _iterator27 = _chunk5.parents[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n                var _id = _step27.value;\n                colors.normal(\" <{\");\n                colors.yellow(_id);\n                colors.normal(\"}>\");\n              }\n            } catch (err) {\n              _didIteratorError27 = true;\n              _iteratorError27 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion27 && _iterator27.return != null) {\n                  _iterator27.return();\n                }\n              } finally {\n                if (_didIteratorError27) {\n                  throw _iteratorError27;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion28 = true;\n            var _didIteratorError28 = false;\n            var _iteratorError28 = undefined;\n\n            try {\n              for (var _iterator28 = _chunk5.siblings[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n                var _id2 = _step28.value;\n                colors.normal(\" ={\");\n                colors.yellow(_id2);\n                colors.normal(\"}=\");\n              }\n            } catch (err) {\n              _didIteratorError28 = true;\n              _iteratorError28 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion28 && _iterator28.return != null) {\n                  _iterator28.return();\n                }\n              } finally {\n                if (_didIteratorError28) {\n                  throw _iteratorError28;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion29 = true;\n            var _didIteratorError29 = false;\n            var _iteratorError29 = undefined;\n\n            try {\n              for (var _iterator29 = _chunk5.children[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n                var _id3 = _step29.value;\n                colors.normal(\" >{\");\n                colors.yellow(_id3);\n                colors.normal(\"}<\");\n              }\n            } catch (err) {\n              _didIteratorError29 = true;\n              _iteratorError29 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion29 && _iterator29.return != null) {\n                  _iterator29.return();\n                }\n              } finally {\n                if (_didIteratorError29) {\n                  throw _iteratorError29;\n                }\n              }\n            }\n\n            if (_chunk5.childrenByOrder) {\n              var _arr4 = Object.keys(_chunk5.childrenByOrder);\n\n              for (var _i4 = 0; _i4 < _arr4.length; _i4++) {\n                var name = _arr4[_i4];\n                var children = _chunk5.childrenByOrder[name];\n                colors.normal(\" \");\n                colors.magenta(\"(\".concat(name, \":\"));\n                var _iteratorNormalCompletion30 = true;\n                var _didIteratorError30 = false;\n                var _iteratorError30 = undefined;\n\n                try {\n                  for (var _iterator30 = children[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n                    var id = _step30.value;\n                    colors.normal(\" {\");\n                    colors.yellow(id);\n                    colors.normal(\"}\");\n                  }\n                } catch (err) {\n                  _didIteratorError30 = true;\n                  _iteratorError30 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion30 && _iterator30.return != null) {\n                      _iterator30.return();\n                    }\n                  } finally {\n                    if (_didIteratorError30) {\n                      throw _iteratorError30;\n                    }\n                  }\n                }\n\n                colors.magenta(\")\");\n              }\n            }\n\n            if (_chunk5.entry) {\n              colors.yellow(\" [entry]\");\n            } else if (_chunk5.initial) {\n              colors.yellow(\" [initial]\");\n            }\n\n            if (_chunk5.rendered) {\n              colors.green(\" [rendered]\");\n            }\n\n            if (_chunk5.recorded) {\n              colors.green(\" [recorded]\");\n            }\n\n            if (_chunk5.reason) {\n              colors.yellow(\" \".concat(_chunk5.reason));\n            }\n\n            newline();\n\n            if (_chunk5.origins) {\n              var _iteratorNormalCompletion31 = true;\n              var _didIteratorError31 = false;\n              var _iteratorError31 = undefined;\n\n              try {\n                for (var _iterator31 = _chunk5.origins[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n                  var origin = _step31.value;\n                  colors.normal(\"    > \");\n\n                  if (origin.reasons && origin.reasons.length) {\n                    colors.yellow(origin.reasons.join(\" \"));\n                    colors.normal(\" \");\n                  }\n\n                  if (origin.request) {\n                    colors.normal(origin.request);\n                    colors.normal(\" \");\n                  }\n\n                  if (origin.module) {\n                    colors.normal(\"[\");\n                    colors.normal(origin.moduleId);\n                    colors.normal(\"] \");\n                    var _module5 = modulesByIdentifier[\"$\".concat(origin.module)];\n\n                    if (_module5) {\n                      colors.bold(_module5.name);\n                      colors.normal(\" \");\n                    }\n                  }\n\n                  if (origin.loc) {\n                    colors.normal(origin.loc);\n                  }\n\n                  newline();\n                }\n              } catch (err) {\n                _didIteratorError31 = true;\n                _iteratorError31 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion31 && _iterator31.return != null) {\n                    _iterator31.return();\n                  }\n                } finally {\n                  if (_didIteratorError31) {\n                    throw _iteratorError31;\n                  }\n                }\n              }\n            }\n\n            processModulesList(_chunk5, \" \");\n          }\n        } catch (err) {\n          _didIteratorError26 = true;\n          _iteratorError26 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion26 && _iterator26.return != null) {\n              _iterator26.return();\n            }\n          } finally {\n            if (_didIteratorError26) {\n              throw _iteratorError26;\n            }\n          }\n        }\n      }\n\n      processModulesList(obj, \"\");\n\n      if (obj._showWarnings && obj.warnings) {\n        var _iteratorNormalCompletion32 = true;\n        var _didIteratorError32 = false;\n        var _iteratorError32 = undefined;\n\n        try {\n          for (var _iterator32 = obj.warnings[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n            var warning = _step32.value;\n            newline();\n            colors.yellow(\"WARNING in \".concat(warning));\n            newline();\n          }\n        } catch (err) {\n          _didIteratorError32 = true;\n          _iteratorError32 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion32 && _iterator32.return != null) {\n              _iterator32.return();\n            }\n          } finally {\n            if (_didIteratorError32) {\n              throw _iteratorError32;\n            }\n          }\n        }\n      }\n\n      if (obj._showErrors && obj.errors) {\n        var _iteratorNormalCompletion33 = true;\n        var _didIteratorError33 = false;\n        var _iteratorError33 = undefined;\n\n        try {\n          for (var _iterator33 = obj.errors[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n            var error = _step33.value;\n            newline();\n            colors.red(\"ERROR in \".concat(error));\n            newline();\n          }\n        } catch (err) {\n          _didIteratorError33 = true;\n          _iteratorError33 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion33 && _iterator33.return != null) {\n              _iterator33.return();\n            }\n          } finally {\n            if (_didIteratorError33) {\n              throw _iteratorError33;\n            }\n          }\n        }\n      }\n\n      if (obj.children) {\n        var _iteratorNormalCompletion34 = true;\n        var _didIteratorError34 = false;\n        var _iteratorError34 = undefined;\n\n        try {\n          for (var _iterator34 = obj.children[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n            var child = _step34.value;\n            var childString = Stats.jsonToString(child, useColors);\n\n            if (childString) {\n              if (child.name) {\n                colors.normal(\"Child \");\n                colors.bold(child.name);\n                colors.normal(\":\");\n              } else {\n                colors.normal(\"Child\");\n              }\n\n              newline();\n              buf.push(\"    \");\n              buf.push(childString.replace(/\\n/g, \"\\n    \"));\n              newline();\n            }\n          }\n        } catch (err) {\n          _didIteratorError34 = true;\n          _iteratorError34 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion34 && _iterator34.return != null) {\n              _iterator34.return();\n            }\n          } finally {\n            if (_didIteratorError34) {\n              throw _iteratorError34;\n            }\n          }\n        }\n      }\n\n      if (obj.needAdditionalPass) {\n        colors.yellow(\"Compilation needs an additional pass and will compile again.\");\n      }\n\n      while (buf[buf.length - 1] === \"\\n\") {\n        buf.pop();\n      }\n\n      return buf.join(\"\");\n    }\n  }, {\n    key: \"presetToOptions\",\n    value: function presetToOptions(name) {\n      // Accepted values: none, errors-only, minimal, normal, detailed, verbose\n      // Any other falsy value will behave as 'none', truthy values as 'normal'\n      var pn = typeof name === \"string\" && name.toLowerCase() || name || \"none\";\n\n      switch (pn) {\n        case \"none\":\n          return {\n            all: false\n          };\n\n        case \"verbose\":\n          return {\n            entrypoints: true,\n            chunkGroups: true,\n            modules: false,\n            chunks: true,\n            chunkModules: true,\n            chunkOrigins: true,\n            depth: true,\n            env: true,\n            reasons: true,\n            usedExports: true,\n            providedExports: true,\n            optimizationBailout: true,\n            errorDetails: true,\n            publicPath: true,\n            exclude: false,\n            maxModules: Infinity\n          };\n\n        case \"detailed\":\n          return {\n            entrypoints: true,\n            chunkGroups: true,\n            chunks: true,\n            chunkModules: false,\n            chunkOrigins: true,\n            depth: true,\n            usedExports: true,\n            providedExports: true,\n            optimizationBailout: true,\n            errorDetails: true,\n            publicPath: true,\n            exclude: false,\n            maxModules: Infinity\n          };\n\n        case \"minimal\":\n          return {\n            all: false,\n            modules: true,\n            maxModules: 0,\n            errors: true,\n            warnings: true\n          };\n\n        case \"errors-only\":\n          return {\n            all: false,\n            errors: true,\n            moduleTrace: true\n          };\n\n        default:\n          return {};\n      }\n    }\n  }, {\n    key: \"getChildOptions\",\n    value: function getChildOptions(options, idx) {\n      var innerOptions;\n\n      if (Array.isArray(options.children)) {\n        if (idx < options.children.length) {\n          innerOptions = options.children[idx];\n        }\n      } else if (typeof options.children === \"object\" && options.children) {\n        innerOptions = options.children;\n      }\n\n      if (typeof innerOptions === \"boolean\" || typeof innerOptions === \"string\") {\n        innerOptions = Stats.presetToOptions(innerOptions);\n      }\n\n      if (!innerOptions) {\n        return options;\n      }\n\n      var childOptions = Object.assign({}, options);\n      delete childOptions.children; // do not inherit children\n\n      return Object.assign(childOptions, innerOptions);\n    }\n  }]);\n\n  return Stats;\n}();\n\nmodule.exports = Stats;","map":null,"metadata":{},"sourceType":"script"}