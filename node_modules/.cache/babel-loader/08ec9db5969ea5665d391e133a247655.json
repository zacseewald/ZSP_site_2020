{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar getPaths = require(\"./getPaths\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function SymlinkPlugin(source, target) {\n    _classCallCheck(this, SymlinkPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n\n  _createClass(SymlinkPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var fs = resolver.fileSystem;\n      resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", function (request, resolveContext, callback) {\n        var pathsResult = getPaths(request.path);\n        var pathSeqments = pathsResult.seqments;\n        var paths = pathsResult.paths;\n        var containsSymlink = false;\n        forEachBail.withIndex(paths, function (path, idx, callback) {\n          fs.readlink(path, function (err, result) {\n            if (!err && result) {\n              pathSeqments[idx] = result;\n              containsSymlink = true; // Shortcut when absolute symlink found\n\n              if (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result)) return callback(null, idx);\n            }\n\n            callback();\n          });\n        }, function (err, idx) {\n          if (!containsSymlink) return callback();\n          var resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n          var result = resultSeqments.reverse().reduce(function (a, b) {\n            return resolver.join(a, b);\n          });\n          var obj = Object.assign({}, request, {\n            path: result\n          });\n          resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return SymlinkPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}