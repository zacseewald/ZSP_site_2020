{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar util = require(\"util\");\n\nvar TOMBSTONE = {};\nvar UNDEFINED_MARKER = {};\n\nvar StackedSetMap =\n/*#__PURE__*/\nfunction () {\n  function StackedSetMap(parentStack) {\n    _classCallCheck(this, StackedSetMap);\n\n    this.stack = parentStack === undefined ? [] : parentStack.slice();\n    this.map = new Map();\n    this.stack.push(this.map);\n  }\n\n  _createClass(StackedSetMap, [{\n    key: \"add\",\n    value: function add(item) {\n      this.map.set(item, true);\n    }\n  }, {\n    key: \"set\",\n    value: function set(item, value) {\n      this.map.set(item, value === undefined ? UNDEFINED_MARKER : value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      if (this.stack.length > 1) {\n        this.map.set(item, TOMBSTONE);\n      } else {\n        this.map.delete(item);\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(item) {\n      var topValue = this.map.get(item);\n      if (topValue !== undefined) return topValue !== TOMBSTONE;\n\n      if (this.stack.length > 1) {\n        for (var i = this.stack.length - 2; i >= 0; i--) {\n          var value = this.stack[i].get(item);\n\n          if (value !== undefined) {\n            this.map.set(item, value);\n            return value !== TOMBSTONE;\n          }\n        }\n\n        this.map.set(item, TOMBSTONE);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"get\",\n    value: function get(item) {\n      var topValue = this.map.get(item);\n\n      if (topValue !== undefined) {\n        return topValue === TOMBSTONE || topValue === UNDEFINED_MARKER ? undefined : topValue;\n      }\n\n      if (this.stack.length > 1) {\n        for (var i = this.stack.length - 2; i >= 0; i--) {\n          var value = this.stack[i].get(item);\n\n          if (value !== undefined) {\n            this.map.set(item, value);\n            return value === TOMBSTONE || value === UNDEFINED_MARKER ? undefined : value;\n          }\n        }\n\n        this.map.set(item, TOMBSTONE);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"_compress\",\n    value: function _compress() {\n      if (this.stack.length === 1) return;\n      this.map = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.stack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var data = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var pair = _step2.value;\n\n              if (pair[1] === TOMBSTONE) {\n                this.map.delete(pair[0]);\n              } else {\n                this.map.set(pair[0], pair[1]);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.stack = [this.map];\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      this._compress();\n\n      return Array.from(this.map.entries(), function (pair) {\n        return pair[0];\n      });\n    }\n  }, {\n    key: \"asSet\",\n    value: function asSet() {\n      return new Set(this.asArray());\n    }\n  }, {\n    key: \"asPairArray\",\n    value: function asPairArray() {\n      this._compress();\n\n      return Array.from(this.map.entries(), function (pair) {\n        return (\n          /** @type {[TODO, TODO]} */\n          pair[1] === UNDEFINED_MARKER ? [pair[0], undefined] : pair\n        );\n      });\n    }\n  }, {\n    key: \"asMap\",\n    value: function asMap() {\n      return new Map(this.asPairArray());\n    }\n  }, {\n    key: \"createChild\",\n    value: function createChild() {\n      return new StackedSetMap(this.stack);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      this._compress();\n\n      return this.map.size;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      throw new Error(\"This is no longer an Array\");\n    },\n    set: function set(value) {\n      throw new Error(\"This is no longer an Array\");\n    }\n  }]);\n\n  return StackedSetMap;\n}(); // TODO remove in webpack 5\n\n\nStackedSetMap.prototype.push = util.deprecate(\n/**\n * @deprecated\n * @this {StackedSetMap}\n * @param {any} item Item to add\n * @returns {void}\n */\nfunction (item) {\n  this.add(item);\n}, \"This is no longer an Array: Use add instead.\");\nmodule.exports = StackedSetMap;","map":null,"metadata":{},"sourceType":"script"}