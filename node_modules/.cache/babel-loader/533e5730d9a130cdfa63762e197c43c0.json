{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/get\");\n\nvar Module = require(\"../Module\");\n\nvar Template = require(\"../Template\");\n\nvar Parser = require(\"../Parser\");\n\nvar eslintScope = require(\"eslint-scope\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    ReplaceSource = _require.ReplaceSource;\n\nvar DependencyReference = require(\"../dependencies/DependencyReference\");\n\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\n\nvar HarmonyImportSideEffectDependency = require(\"../dependencies/HarmonyImportSideEffectDependency\");\n\nvar HarmonyImportSpecifierDependency = require(\"../dependencies/HarmonyImportSpecifierDependency\");\n\nvar HarmonyExportSpecifierDependency = require(\"../dependencies/HarmonyExportSpecifierDependency\");\n\nvar HarmonyExportExpressionDependency = require(\"../dependencies/HarmonyExportExpressionDependency\");\n\nvar HarmonyExportImportedSpecifierDependency = require(\"../dependencies/HarmonyExportImportedSpecifierDependency\");\n\nvar HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n\nvar createHash = require(\"../util/createHash\");\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../util/createHash\").Hash} Hash */\n\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n */\n\n\nvar ensureNsObjSource = function ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule) {\n  if (!info.hasNamespaceObject) {\n    info.hasNamespaceObject = true;\n    var name = info.exportMap.get(true);\n    var nsObj = [\"var \".concat(name, \" = {};\"), \"__webpack_require__.r(\".concat(name, \");\")];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = info.module.buildMeta.providedExports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var exportName = _step.value;\n        var finalName = getFinalName(info, exportName, moduleToInfoMap, requestShortener, false, strictHarmonyModule);\n        nsObj.push(\"__webpack_require__.d(\".concat(name, \", \").concat(JSON.stringify(exportName), \", function() { return \").concat(finalName, \"; });\"));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    info.namespaceObjectSource = nsObj.join(\"\\n\") + \"\\n\";\n  }\n};\n\nvar getExternalImport = function getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule) {\n  var used = importedModule.isUsed(exportName);\n  if (!used) return \"/* unused reexport */undefined\";\n  var comment = used !== exportName ? \" \".concat(Template.toNormalComment(exportName)) : \"\";\n\n  switch (importedModule.buildMeta.exportsType) {\n    case \"named\":\n      if (exportName === \"default\") {\n        return info.name;\n      } else if (exportName === true) {\n        info.interopNamespaceObjectUsed = true;\n        return info.interopNamespaceObjectName;\n      } else {\n        break;\n      }\n\n    case \"namespace\":\n      if (exportName === true) {\n        return info.name;\n      } else {\n        break;\n      }\n\n    default:\n      if (strictHarmonyModule) {\n        if (exportName === \"default\") {\n          return info.name;\n        } else if (exportName === true) {\n          info.interopNamespaceObjectUsed = true;\n          return info.interopNamespaceObjectName;\n        } else {\n          return \"/* non-default import from non-esm module */undefined\";\n        }\n      } else {\n        if (exportName === \"default\") {\n          info.interopDefaultAccessUsed = true;\n          return asCall ? \"\".concat(info.interopDefaultAccessName, \"()\") : \"\".concat(info.interopDefaultAccessName, \".a\");\n        } else if (exportName === true) {\n          return info.name;\n        } else {\n          break;\n        }\n      }\n\n  }\n\n  var reference = \"\".concat(info.name, \"[\").concat(JSON.stringify(used)).concat(comment, \"]\");\n  if (asCall) return \"Object(\".concat(reference, \")\");\n  return reference;\n};\n\nvar getFinalName = function getFinalName(info, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule) {\n  var alreadyVisited = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Set();\n\n  switch (info.type) {\n    case \"concatenated\":\n      {\n        var directExport = info.exportMap.get(exportName);\n\n        if (directExport) {\n          if (exportName === true) {\n            ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule);\n          } else if (!info.module.isUsed(exportName)) {\n            return \"/* unused export */ undefined\";\n          }\n\n          if (info.globalExports.has(directExport)) {\n            return directExport;\n          }\n\n          var name = info.internalNames.get(directExport);\n\n          if (!name) {\n            throw new Error(\"The export \\\"\".concat(directExport, \"\\\" in \\\"\").concat(info.module.readableIdentifier(requestShortener), \"\\\" has no internal name\"));\n          }\n\n          return name;\n        }\n\n        var reexport = info.reexportMap.get(exportName);\n\n        if (reexport) {\n          if (alreadyVisited.has(reexport)) {\n            throw new Error(\"Circular reexports \".concat(Array.from(alreadyVisited, function (e) {\n              return \"\\\"\".concat(e.module.readableIdentifier(requestShortener), \"\\\".\").concat(e.exportName);\n            }).join(\" --> \"), \" -(circular)-> \\\"\").concat(reexport.module.readableIdentifier(requestShortener), \"\\\".\").concat(reexport.exportName));\n          }\n\n          alreadyVisited.add(reexport);\n          var refInfo = moduleToInfoMap.get(reexport.module);\n\n          if (refInfo) {\n            // module is in the concatenation\n            return getFinalName(refInfo, reexport.exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule, alreadyVisited);\n          }\n        }\n\n        var problem = \"Cannot get final name for export \\\"\".concat(exportName, \"\\\" in \\\"\").concat(info.module.readableIdentifier(requestShortener), \"\\\"\") + \" (known exports: \".concat(Array.from(info.exportMap.keys()).filter(function (name) {\n          return name !== true;\n        }).join(\" \"), \", \") + \"known reexports: \".concat(Array.from(info.reexportMap.keys()).join(\" \"), \")\");\n        return \"\".concat(Template.toNormalComment(problem), \" undefined\");\n      }\n\n    case \"external\":\n      {\n        var importedModule = info.module;\n        return getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule);\n      }\n  }\n};\n\nvar addScopeSymbols1 = function addScopeSymbols1(s, nameSet, scopeSet) {\n  var scope = s;\n\n  while (scope) {\n    if (scopeSet.has(scope)) break;\n    scopeSet.add(scope);\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = scope.variables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var variable = _step2.value;\n        nameSet.add(variable.name);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    scope = scope.upper;\n  }\n};\n\nvar addScopeSymbols2 = function addScopeSymbols2(s, nameSet, scopeSet1, scopeSet2) {\n  var scope = s;\n\n  while (scope) {\n    if (scopeSet1.has(scope)) break;\n    if (scopeSet2.has(scope)) break;\n    scopeSet1.add(scope);\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = scope.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var variable = _step3.value;\n        nameSet.add(variable.name);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    scope = scope.upper;\n  }\n};\n\nvar getAllReferences = function getAllReferences(variable) {\n  var set = variable.references; // Look for inner scope variables too (like in class Foo { t() { Foo } })\n\n  var identifiers = new Set(variable.identifiers);\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = variable.scope.childScopes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var scope = _step4.value;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = scope.variables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var innerVar = _step5.value;\n\n          if (innerVar.identifiers.some(function (id) {\n            return identifiers.has(id);\n          })) {\n            set = set.concat(innerVar.references);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return set;\n};\n\nvar getPathInAst = function getPathInAst(ast, node) {\n  if (ast === node) {\n    return [];\n  }\n\n  var nr = node.range;\n\n  var enterNode = function enterNode(n) {\n    if (!n) return undefined;\n    var r = n.range;\n\n    if (r) {\n      if (r[0] <= nr[0] && r[1] >= nr[1]) {\n        var path = getPathInAst(n, node);\n\n        if (path) {\n          path.push(n);\n          return path;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  var i;\n\n  if (Array.isArray(ast)) {\n    for (i = 0; i < ast.length; i++) {\n      var enterResult = enterNode(ast[i]);\n      if (enterResult !== undefined) return enterResult;\n    }\n  } else if (ast && typeof ast === \"object\") {\n    var keys = Object.keys(ast);\n\n    for (i = 0; i < keys.length; i++) {\n      var value = ast[keys[i]];\n\n      if (Array.isArray(value)) {\n        var pathResult = getPathInAst(value, node);\n        if (pathResult !== undefined) return pathResult;\n      } else if (value && typeof value === \"object\") {\n        var _enterResult = enterNode(value);\n\n        if (_enterResult !== undefined) return _enterResult;\n      }\n    }\n  }\n};\n\nvar ConcatenatedModule =\n/*#__PURE__*/\nfunction (_Module) {\n  _inherits(ConcatenatedModule, _Module);\n\n  function ConcatenatedModule(rootModule, modules, concatenationList) {\n    var _this;\n\n    _classCallCheck(this, ConcatenatedModule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConcatenatedModule).call(this, \"javascript/esm\", null));\n\n    _get(_getPrototypeOf(ConcatenatedModule.prototype), \"setChunks\", _assertThisInitialized(_this)).call(_assertThisInitialized(_this), rootModule._chunks); // Info from Factory\n\n\n    _this.rootModule = rootModule;\n    _this.factoryMeta = rootModule.factoryMeta; // Info from Compilation\n\n    _this.index = rootModule.index;\n    _this.index2 = rootModule.index2;\n    _this.depth = rootModule.depth; // Info from Optimization\n\n    _this.used = rootModule.used;\n    _this.usedExports = rootModule.usedExports; // Info from Build\n\n    _this.buildInfo = {\n      strict: true,\n      cacheable: modules.every(function (m) {\n        return m.buildInfo.cacheable;\n      }),\n      moduleArgument: rootModule.buildInfo.moduleArgument,\n      exportsArgument: rootModule.buildInfo.exportsArgument,\n      fileDependencies: new Set(),\n      contextDependencies: new Set(),\n      assets: undefined\n    };\n    _this.built = modules.some(function (m) {\n      return m.built;\n    });\n    _this.buildMeta = rootModule.buildMeta; // Caching\n\n    _this._numberOfConcatenatedModules = modules.length; // Graph\n\n    var modulesSet = new Set(modules);\n    _this.reasons = rootModule.reasons.filter(function (reason) {\n      return !(reason.dependency instanceof HarmonyImportDependency) || !modulesSet.has(reason.module);\n    });\n    _this.dependencies = [];\n    _this.warnings = [];\n    _this.errors = [];\n    _this._orderedConcatenationList = concatenationList || ConcatenatedModule.createConcatenationList(rootModule, modulesSet, null);\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = _this._orderedConcatenationList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        var info = _step6.value;\n\n        if (info.type === \"concatenated\") {\n          var m = info.module; // populate dependencies\n\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = m.dependencies.filter(function (dep) {\n              return !(dep instanceof HarmonyImportDependency) || !modulesSet.has(dep._module);\n            })[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var d = _step7.value;\n\n              _this.dependencies.push(d);\n            } // populate file dependencies\n\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          if (m.buildInfo.fileDependencies) {\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = m.buildInfo.fileDependencies[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var file = _step8.value;\n\n                _this.buildInfo.fileDependencies.add(file);\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                  _iterator8.return();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n          } // populate context dependencies\n\n\n          if (m.buildInfo.contextDependencies) {\n            var _iteratorNormalCompletion9 = true;\n            var _didIteratorError9 = false;\n            var _iteratorError9 = undefined;\n\n            try {\n              for (var _iterator9 = m.buildInfo.contextDependencies[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                var context = _step9.value;\n\n                _this.buildInfo.contextDependencies.add(context);\n              }\n            } catch (err) {\n              _didIteratorError9 = true;\n              _iteratorError9 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                  _iterator9.return();\n                }\n              } finally {\n                if (_didIteratorError9) {\n                  throw _iteratorError9;\n                }\n              }\n            }\n          } // populate warnings\n\n\n          var _iteratorNormalCompletion10 = true;\n          var _didIteratorError10 = false;\n          var _iteratorError10 = undefined;\n\n          try {\n            for (var _iterator10 = m.warnings[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n              var warning = _step10.value;\n\n              _this.warnings.push(warning);\n            } // populate errors\n\n          } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                _iterator10.return();\n              }\n            } finally {\n              if (_didIteratorError10) {\n                throw _iteratorError10;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion11 = true;\n          var _didIteratorError11 = false;\n          var _iteratorError11 = undefined;\n\n          try {\n            for (var _iterator11 = m.errors[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n              var error = _step11.value;\n\n              _this.errors.push(error);\n            }\n          } catch (err) {\n            _didIteratorError11 = true;\n            _iteratorError11 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n                _iterator11.return();\n              }\n            } finally {\n              if (_didIteratorError11) {\n                throw _iteratorError11;\n              }\n            }\n          }\n\n          if (m.buildInfo.assets) {\n            if (_this.buildInfo.assets === undefined) {\n              _this.buildInfo.assets = Object.create(null);\n            }\n\n            Object.assign(_this.buildInfo.assets, m.buildInfo.assets);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n\n    _this._identifier = _this._createIdentifier();\n    return _this;\n  }\n\n  _createClass(ConcatenatedModule, [{\n    key: \"identifier\",\n    value: function identifier() {\n      return this._identifier;\n    }\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier(requestShortener) {\n      return this.rootModule.readableIdentifier(requestShortener) + \" + \".concat(this._numberOfConcatenatedModules - 1, \" modules\");\n    }\n  }, {\n    key: \"libIdent\",\n    value: function libIdent(options) {\n      return this.rootModule.libIdent(options);\n    }\n  }, {\n    key: \"nameForCondition\",\n    value: function nameForCondition() {\n      return this.rootModule.nameForCondition();\n    }\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      throw new Error(\"Cannot build this module. It should be already built.\");\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      // Guess size from embedded modules\n      return this._orderedConcatenationList.reduce(function (sum, info) {\n        switch (info.type) {\n          case \"concatenated\":\n            return sum + info.module.size();\n\n          case \"external\":\n            return sum + 5;\n        }\n\n        return sum;\n      }, 0);\n    }\n    /**\n     * @param {Module} rootModule the root of the concatenation\n     * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n     * @param {Compilation} compilation the compilation context\n     * @returns {ConcatenationEntry[]} concatenation list\n     */\n\n  }, {\n    key: \"_createIdentifier\",\n    value: function _createIdentifier() {\n      var orderedConcatenationListIdentifiers = \"\";\n\n      for (var i = 0; i < this._orderedConcatenationList.length; i++) {\n        if (this._orderedConcatenationList[i].type === \"concatenated\") {\n          orderedConcatenationListIdentifiers += this._orderedConcatenationList[i].module.identifier();\n          orderedConcatenationListIdentifiers += \" \";\n        }\n      }\n\n      var hash = createHash(\"md4\");\n      hash.update(orderedConcatenationListIdentifiers);\n      return this.rootModule.identifier() + \" \" + hash.digest(\"hex\");\n    }\n  }, {\n    key: \"source\",\n    value: function source(dependencyTemplates, runtimeTemplate) {\n      var requestShortener = runtimeTemplate.requestShortener; // Metainfo for each module\n\n      var modulesWithInfo = this._orderedConcatenationList.map(function (info, idx) {\n        switch (info.type) {\n          case \"concatenated\":\n            {\n              var exportMap = new Map();\n              var reexportMap = new Map();\n              var _iteratorNormalCompletion12 = true;\n              var _didIteratorError12 = false;\n              var _iteratorError12 = undefined;\n\n              try {\n                for (var _iterator12 = info.module.dependencies[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                  var dep = _step12.value;\n\n                  if (dep instanceof HarmonyExportSpecifierDependency) {\n                    if (!exportMap.has(dep.name)) {\n                      exportMap.set(dep.name, dep.id);\n                    }\n                  } else if (dep instanceof HarmonyExportExpressionDependency) {\n                    if (!exportMap.has(\"default\")) {\n                      exportMap.set(\"default\", \"__WEBPACK_MODULE_DEFAULT_EXPORT__\");\n                    }\n                  } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {\n                    var exportName = dep.name;\n                    var importName = dep.id;\n                    var importedModule = dep._module;\n\n                    if (exportName && importName) {\n                      if (!reexportMap.has(exportName)) {\n                        reexportMap.set(exportName, {\n                          module: importedModule,\n                          exportName: importName,\n                          dependency: dep\n                        });\n                      }\n                    } else if (exportName) {\n                      if (!reexportMap.has(exportName)) {\n                        reexportMap.set(exportName, {\n                          module: importedModule,\n                          exportName: true,\n                          dependency: dep\n                        });\n                      }\n                    } else if (importedModule) {\n                      var _iteratorNormalCompletion13 = true;\n                      var _didIteratorError13 = false;\n                      var _iteratorError13 = undefined;\n\n                      try {\n                        for (var _iterator13 = importedModule.buildMeta.providedExports[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                          var name = _step13.value;\n\n                          if (dep.activeExports.has(name) || name === \"default\") {\n                            continue;\n                          }\n\n                          if (!reexportMap.has(name)) {\n                            reexportMap.set(name, {\n                              module: importedModule,\n                              exportName: name,\n                              dependency: dep\n                            });\n                          }\n                        }\n                      } catch (err) {\n                        _didIteratorError13 = true;\n                        _iteratorError13 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n                            _iterator13.return();\n                          }\n                        } finally {\n                          if (_didIteratorError13) {\n                            throw _iteratorError13;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError12 = true;\n                _iteratorError12 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n                    _iterator12.return();\n                  }\n                } finally {\n                  if (_didIteratorError12) {\n                    throw _iteratorError12;\n                  }\n                }\n              }\n\n              return {\n                type: \"concatenated\",\n                module: info.module,\n                index: idx,\n                ast: undefined,\n                internalSource: undefined,\n                source: undefined,\n                globalScope: undefined,\n                moduleScope: undefined,\n                internalNames: new Map(),\n                globalExports: new Set(),\n                exportMap: exportMap,\n                reexportMap: reexportMap,\n                hasNamespaceObject: false,\n                namespaceObjectSource: null\n              };\n            }\n\n          case \"external\":\n            return {\n              type: \"external\",\n              module: info.module,\n              index: idx,\n              name: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n\n          default:\n            throw new Error(\"Unsupported concatenation entry type \".concat(info.type));\n        }\n      }); // Create mapping from module to info\n\n\n      var moduleToInfoMap = new Map();\n      var _iteratorNormalCompletion14 = true;\n      var _didIteratorError14 = false;\n      var _iteratorError14 = undefined;\n\n      try {\n        for (var _iterator14 = modulesWithInfo[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n          var m = _step14.value;\n          moduleToInfoMap.set(m.module, m);\n        } // Configure template decorators for dependencies\n\n      } catch (err) {\n        _didIteratorError14 = true;\n        _iteratorError14 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n            _iterator14.return();\n          }\n        } finally {\n          if (_didIteratorError14) {\n            throw _iteratorError14;\n          }\n        }\n      }\n\n      var innerDependencyTemplates = new Map(dependencyTemplates);\n      innerDependencyTemplates.set(HarmonyImportSpecifierDependency, new HarmonyImportSpecifierDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSpecifierDependency), moduleToInfoMap));\n      innerDependencyTemplates.set(HarmonyImportSideEffectDependency, new HarmonyImportSideEffectDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSideEffectDependency), moduleToInfoMap));\n      innerDependencyTemplates.set(HarmonyExportSpecifierDependency, new HarmonyExportSpecifierDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyExportSpecifierDependency), this.rootModule));\n      innerDependencyTemplates.set(HarmonyExportExpressionDependency, new HarmonyExportExpressionDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyExportExpressionDependency), this.rootModule));\n      innerDependencyTemplates.set(HarmonyExportImportedSpecifierDependency, new HarmonyExportImportedSpecifierDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyExportImportedSpecifierDependency), this.rootModule, moduleToInfoMap));\n      innerDependencyTemplates.set(HarmonyCompatibilityDependency, new HarmonyCompatibilityDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyCompatibilityDependency), this.rootModule, moduleToInfoMap)); // Must use full identifier in our cache here to ensure that the source\n      // is updated should our dependencies list change.\n      // TODO webpack 5 refactor\n\n      innerDependencyTemplates.set(\"hash\", innerDependencyTemplates.get(\"hash\") + this.identifier()); // Generate source code and analyse scopes\n      // Prepare a ReplaceSource for the final source\n\n      var _iteratorNormalCompletion15 = true;\n      var _didIteratorError15 = false;\n      var _iteratorError15 = undefined;\n\n      try {\n        for (var _iterator15 = modulesWithInfo[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n          var info = _step15.value;\n\n          if (info.type === \"concatenated\") {\n            var _m = info.module;\n\n            var source = _m.source(innerDependencyTemplates, runtimeTemplate);\n\n            var code = source.source();\n            var ast = void 0;\n\n            try {\n              ast = Parser.parse(code, {\n                sourceType: \"module\"\n              });\n            } catch (err) {\n              if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n                var lineNumber = err.loc.line;\n                var lines = code.split(\"\\n\");\n                err.message += \"\\n| \" + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join(\"\\n| \");\n              }\n\n              throw err;\n            }\n\n            var scopeManager = eslintScope.analyze(ast, {\n              ecmaVersion: 6,\n              sourceType: \"module\",\n              optimistic: true,\n              ignoreEval: true,\n              impliedStrict: true\n            });\n            var globalScope = scopeManager.acquire(ast);\n            var moduleScope = globalScope.childScopes[0];\n            var resultSource = new ReplaceSource(source);\n            info.ast = ast;\n            info.internalSource = source;\n            info.source = resultSource;\n            info.globalScope = globalScope;\n            info.moduleScope = moduleScope;\n          }\n        } // List of all used names to avoid conflicts\n\n      } catch (err) {\n        _didIteratorError15 = true;\n        _iteratorError15 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n            _iterator15.return();\n          }\n        } finally {\n          if (_didIteratorError15) {\n            throw _iteratorError15;\n          }\n        }\n      }\n\n      var allUsedNames = new Set([\"__WEBPACK_MODULE_DEFAULT_EXPORT__\", // avoid using this internal name\n      \"abstract\", \"arguments\", \"async\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"eval\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\", \"module\", \"__dirname\", \"__filename\", \"exports\", \"Array\", \"Date\", \"eval\", \"function\", \"hasOwnProperty\", \"Infinity\", \"isFinite\", \"isNaN\", \"isPrototypeOf\", \"length\", \"Math\", \"NaN\", \"name\", \"Number\", \"Object\", \"prototype\", \"String\", \"toString\", \"undefined\", \"valueOf\", \"alert\", \"all\", \"anchor\", \"anchors\", \"area\", \"assign\", \"blur\", \"button\", \"checkbox\", \"clearInterval\", \"clearTimeout\", \"clientInformation\", \"close\", \"closed\", \"confirm\", \"constructor\", \"crypto\", \"decodeURI\", \"decodeURIComponent\", \"defaultStatus\", \"document\", \"element\", \"elements\", \"embed\", \"embeds\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"event\", \"fileUpload\", \"focus\", \"form\", \"forms\", \"frame\", \"innerHeight\", \"innerWidth\", \"layer\", \"layers\", \"link\", \"location\", \"mimeTypes\", \"navigate\", \"navigator\", \"frames\", \"frameRate\", \"hidden\", \"history\", \"image\", \"images\", \"offscreenBuffering\", \"open\", \"opener\", \"option\", \"outerHeight\", \"outerWidth\", \"packages\", \"pageXOffset\", \"pageYOffset\", \"parent\", \"parseFloat\", \"parseInt\", \"password\", \"pkcs11\", \"plugin\", \"prompt\", \"propertyIsEnum\", \"radio\", \"reset\", \"screenX\", \"screenY\", \"scroll\", \"secure\", \"select\", \"self\", \"setInterval\", \"setTimeout\", \"status\", \"submit\", \"taint\", \"text\", \"textarea\", \"top\", \"unescape\", \"untaint\", \"window\", \"onblur\", \"onclick\", \"onerror\", \"onfocus\", \"onkeydown\", \"onkeypress\", \"onkeyup\", \"onmouseover\", \"onload\", \"onmouseup\", \"onmousedown\", \"onsubmit\"]); // Set of already checked scopes\n\n      var alreadyCheckedScopes = new Set(); // get all global names\n\n      var _iteratorNormalCompletion16 = true;\n      var _didIteratorError16 = false;\n      var _iteratorError16 = undefined;\n\n      try {\n        for (var _iterator16 = modulesWithInfo[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n          var _info = _step16.value;\n          var superClassExpressions = []; // ignore symbols from moduleScope\n\n          if (_info.moduleScope) {\n            alreadyCheckedScopes.add(_info.moduleScope); // The super class expression in class scopes behaves weird\n            // We store ranges of all super class expressions to make\n            // renaming to work correctly\n\n            var _iteratorNormalCompletion21 = true;\n            var _didIteratorError21 = false;\n            var _iteratorError21 = undefined;\n\n            try {\n              for (var _iterator21 = _info.moduleScope.childScopes[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n                var childScope = _step21.value;\n                if (childScope.type !== \"class\") continue;\n                if (!childScope.block.superClass) continue;\n                superClassExpressions.push({\n                  range: childScope.block.superClass.range,\n                  variables: childScope.variables\n                });\n              }\n            } catch (err) {\n              _didIteratorError21 = true;\n              _iteratorError21 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion21 && _iterator21.return != null) {\n                  _iterator21.return();\n                }\n              } finally {\n                if (_didIteratorError21) {\n                  throw _iteratorError21;\n                }\n              }\n            }\n          } // add global symbols\n\n\n          if (_info.globalScope) {\n            var _iteratorNormalCompletion22 = true;\n            var _didIteratorError22 = false;\n            var _iteratorError22 = undefined;\n\n            try {\n              for (var _iterator22 = _info.globalScope.through[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n                var reference = _step22.value;\n                var name = reference.identifier.name;\n\n                if (/^__WEBPACK_MODULE_REFERENCE__\\d+_([\\da-f]+|ns)(_call)?(_strict)?__$/.test(name)) {\n                  var _iteratorNormalCompletion23 = true;\n                  var _didIteratorError23 = false;\n                  var _iteratorError23 = undefined;\n\n                  try {\n                    for (var _iterator23 = superClassExpressions[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                      var expr = _step23.value;\n\n                      if (expr.range[0] <= reference.identifier.range[0] && expr.range[1] >= reference.identifier.range[1]) {\n                        var _iteratorNormalCompletion24 = true;\n                        var _didIteratorError24 = false;\n                        var _iteratorError24 = undefined;\n\n                        try {\n                          for (var _iterator24 = expr.variables[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n                            var variable = _step24.value;\n                            allUsedNames.add(variable.name);\n                          }\n                        } catch (err) {\n                          _didIteratorError24 = true;\n                          _iteratorError24 = err;\n                        } finally {\n                          try {\n                            if (!_iteratorNormalCompletion24 && _iterator24.return != null) {\n                              _iterator24.return();\n                            }\n                          } finally {\n                            if (_didIteratorError24) {\n                              throw _iteratorError24;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError23 = true;\n                    _iteratorError23 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion23 && _iterator23.return != null) {\n                        _iterator23.return();\n                      }\n                    } finally {\n                      if (_didIteratorError23) {\n                        throw _iteratorError23;\n                      }\n                    }\n                  }\n\n                  addScopeSymbols1(reference.from, allUsedNames, alreadyCheckedScopes);\n                } else {\n                  allUsedNames.add(name);\n                }\n              }\n            } catch (err) {\n              _didIteratorError22 = true;\n              _iteratorError22 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion22 && _iterator22.return != null) {\n                  _iterator22.return();\n                }\n              } finally {\n                if (_didIteratorError22) {\n                  throw _iteratorError22;\n                }\n              }\n            }\n          } // add exported globals\n\n\n          if (_info.type === \"concatenated\") {\n            var variables = new Set();\n            var _iteratorNormalCompletion25 = true;\n            var _didIteratorError25 = false;\n            var _iteratorError25 = undefined;\n\n            try {\n              for (var _iterator25 = _info.moduleScope.variables[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n                var _variable = _step25.value;\n                variables.add(_variable.name);\n              }\n            } catch (err) {\n              _didIteratorError25 = true;\n              _iteratorError25 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion25 && _iterator25.return != null) {\n                  _iterator25.return();\n                }\n              } finally {\n                if (_didIteratorError25) {\n                  throw _iteratorError25;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion26 = true;\n            var _didIteratorError26 = false;\n            var _iteratorError26 = undefined;\n\n            try {\n              for (var _iterator26 = _info.exportMap[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n                var _step26$value = _slicedToArray(_step26.value, 2),\n                    _variable2 = _step26$value[1];\n\n                if (!variables.has(_variable2)) {\n                  _info.globalExports.add(_variable2);\n                }\n              }\n            } catch (err) {\n              _didIteratorError26 = true;\n              _iteratorError26 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion26 && _iterator26.return != null) {\n                  _iterator26.return();\n                }\n              } finally {\n                if (_didIteratorError26) {\n                  throw _iteratorError26;\n                }\n              }\n            }\n          }\n        } // generate names for symbols\n\n      } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion16 && _iterator16.return != null) {\n            _iterator16.return();\n          }\n        } finally {\n          if (_didIteratorError16) {\n            throw _iteratorError16;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion17 = true;\n      var _didIteratorError17 = false;\n      var _iteratorError17 = undefined;\n\n      try {\n        for (var _iterator17 = modulesWithInfo[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n          var _info2 = _step17.value;\n\n          switch (_info2.type) {\n            case \"concatenated\":\n              {\n                var namespaceObjectName = this.findNewName(\"namespaceObject\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                allUsedNames.add(namespaceObjectName);\n\n                _info2.internalNames.set(namespaceObjectName, namespaceObjectName);\n\n                _info2.exportMap.set(true, namespaceObjectName);\n\n                var _iteratorNormalCompletion27 = true;\n                var _didIteratorError27 = false;\n                var _iteratorError27 = undefined;\n\n                try {\n                  for (var _iterator27 = _info2.moduleScope.variables[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n                    var _variable3 = _step27.value;\n                    var _name = _variable3.name;\n\n                    if (allUsedNames.has(_name)) {\n                      var references = getAllReferences(_variable3);\n                      var symbolsInReferences = new Set();\n                      var alreadyCheckedInnerScopes = new Set();\n                      var _iteratorNormalCompletion28 = true;\n                      var _didIteratorError28 = false;\n                      var _iteratorError28 = undefined;\n\n                      try {\n                        for (var _iterator28 = references[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n                          var ref = _step28.value;\n                          addScopeSymbols2(ref.from, symbolsInReferences, alreadyCheckedInnerScopes, alreadyCheckedScopes);\n                        }\n                      } catch (err) {\n                        _didIteratorError28 = true;\n                        _iteratorError28 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion28 && _iterator28.return != null) {\n                            _iterator28.return();\n                          }\n                        } finally {\n                          if (_didIteratorError28) {\n                            throw _iteratorError28;\n                          }\n                        }\n                      }\n\n                      var newName = this.findNewName(_name, allUsedNames, symbolsInReferences, _info2.module.readableIdentifier(requestShortener));\n                      allUsedNames.add(newName);\n\n                      _info2.internalNames.set(_name, newName);\n\n                      var _source = _info2.source;\n                      var allIdentifiers = new Set(references.map(function (r) {\n                        return r.identifier;\n                      }).concat(_variable3.identifiers));\n                      var _iteratorNormalCompletion29 = true;\n                      var _didIteratorError29 = false;\n                      var _iteratorError29 = undefined;\n\n                      try {\n                        for (var _iterator29 = allIdentifiers[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n                          var identifier = _step29.value;\n                          var r = identifier.range;\n                          var path = getPathInAst(_info2.ast, identifier);\n\n                          if (path && path.length > 1 && path[1].type === \"Property\" && path[1].shorthand) {\n                            _source.insert(r[1], \": \".concat(newName));\n                          } else {\n                            _source.replace(r[0], r[1] - 1, newName);\n                          }\n                        }\n                      } catch (err) {\n                        _didIteratorError29 = true;\n                        _iteratorError29 = err;\n                      } finally {\n                        try {\n                          if (!_iteratorNormalCompletion29 && _iterator29.return != null) {\n                            _iterator29.return();\n                          }\n                        } finally {\n                          if (_didIteratorError29) {\n                            throw _iteratorError29;\n                          }\n                        }\n                      }\n                    } else {\n                      allUsedNames.add(_name);\n\n                      _info2.internalNames.set(_name, _name);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError27 = true;\n                  _iteratorError27 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion27 && _iterator27.return != null) {\n                      _iterator27.return();\n                    }\n                  } finally {\n                    if (_didIteratorError27) {\n                      throw _iteratorError27;\n                    }\n                  }\n                }\n\n                break;\n              }\n\n            case \"external\":\n              {\n                var externalName = this.findNewName(\"\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                allUsedNames.add(externalName);\n                _info2.name = externalName;\n\n                if (_info2.module.buildMeta.exportsType === \"named\" || !_info2.module.buildMeta.exportsType) {\n                  var externalNameInterop = this.findNewName(\"namespaceObject\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                  allUsedNames.add(externalNameInterop);\n                  _info2.interopNamespaceObjectName = externalNameInterop;\n                }\n\n                if (!_info2.module.buildMeta.exportsType) {\n                  var _externalNameInterop = this.findNewName(\"default\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n\n                  allUsedNames.add(_externalNameInterop);\n                  _info2.interopDefaultAccessName = _externalNameInterop;\n                }\n\n                break;\n              }\n          }\n        } // Find and replace referenced to modules\n\n      } catch (err) {\n        _didIteratorError17 = true;\n        _iteratorError17 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion17 && _iterator17.return != null) {\n            _iterator17.return();\n          }\n        } finally {\n          if (_didIteratorError17) {\n            throw _iteratorError17;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion18 = true;\n      var _didIteratorError18 = false;\n      var _iteratorError18 = undefined;\n\n      try {\n        for (var _iterator18 = modulesWithInfo[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n          var _info3 = _step18.value;\n\n          if (_info3.type === \"concatenated\") {\n            var _iteratorNormalCompletion30 = true;\n            var _didIteratorError30 = false;\n            var _iteratorError30 = undefined;\n\n            try {\n              for (var _iterator30 = _info3.globalScope.through[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n                var _reference = _step30.value;\n                var _name2 = _reference.identifier.name;\n                var match = /^__WEBPACK_MODULE_REFERENCE__(\\d+)_([\\da-f]+|ns)(_call)?(_strict)?__$/.exec(_name2);\n\n                if (match) {\n                  var referencedModule = modulesWithInfo[+match[1]];\n                  var exportName = void 0;\n\n                  if (match[2] === \"ns\") {\n                    exportName = true;\n                  } else {\n                    var exportData = match[2];\n                    exportName = Buffer.from(exportData, \"hex\").toString(\"utf-8\");\n                  }\n\n                  var asCall = !!match[3];\n                  var strictHarmonyModule = !!match[4];\n                  var finalName = getFinalName(referencedModule, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule);\n                  var _r = _reference.identifier.range;\n                  var _source2 = _info3.source;\n\n                  _source2.replace(_r[0], _r[1] - 1, finalName);\n                }\n              }\n            } catch (err) {\n              _didIteratorError30 = true;\n              _iteratorError30 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion30 && _iterator30.return != null) {\n                  _iterator30.return();\n                }\n              } finally {\n                if (_didIteratorError30) {\n                  throw _iteratorError30;\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError18 = true;\n        _iteratorError18 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion18 && _iterator18.return != null) {\n            _iterator18.return();\n          }\n        } finally {\n          if (_didIteratorError18) {\n            throw _iteratorError18;\n          }\n        }\n      }\n\n      var result = new ConcatSource(); // add harmony compatibility flag (must be first because of possible circular dependencies)\n\n      var usedExports = this.rootModule.usedExports;\n\n      if (usedExports === true) {\n        result.add(runtimeTemplate.defineEsModuleFlagStatement({\n          exportsArgument: this.exportsArgument\n        }));\n      } // define required namespace objects (must be before evaluation modules)\n\n\n      var _iteratorNormalCompletion19 = true;\n      var _didIteratorError19 = false;\n      var _iteratorError19 = undefined;\n\n      try {\n        for (var _iterator19 = modulesWithInfo[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n          var _info4 = _step19.value;\n\n          if (_info4.namespaceObjectSource) {\n            result.add(_info4.namespaceObjectSource);\n          }\n        } // evaluate modules in order\n\n      } catch (err) {\n        _didIteratorError19 = true;\n        _iteratorError19 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion19 && _iterator19.return != null) {\n            _iterator19.return();\n          }\n        } finally {\n          if (_didIteratorError19) {\n            throw _iteratorError19;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion20 = true;\n      var _didIteratorError20 = false;\n      var _iteratorError20 = undefined;\n\n      try {\n        for (var _iterator20 = modulesWithInfo[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n          var _info5 = _step20.value;\n\n          switch (_info5.type) {\n            case \"concatenated\":\n              result.add(\"\\n// CONCATENATED MODULE: \".concat(_info5.module.readableIdentifier(requestShortener), \"\\n\"));\n              result.add(_info5.source);\n              break;\n\n            case \"external\":\n              result.add(\"\\n// EXTERNAL MODULE: \".concat(_info5.module.readableIdentifier(requestShortener), \"\\n\"));\n              result.add(\"var \".concat(_info5.name, \" = __webpack_require__(\").concat(JSON.stringify(_info5.module.id), \");\\n\"));\n\n              if (_info5.interopNamespaceObjectUsed) {\n                if (_info5.module.buildMeta.exportsType === \"named\") {\n                  result.add(\"var \".concat(_info5.interopNamespaceObjectName, \" = /*#__PURE__*/__webpack_require__.t(\").concat(_info5.name, \", 2);\\n\"));\n                } else if (!_info5.module.buildMeta.exportsType) {\n                  result.add(\"var \".concat(_info5.interopNamespaceObjectName, \" = /*#__PURE__*/__webpack_require__.t(\").concat(_info5.name, \");\\n\"));\n                }\n              }\n\n              if (_info5.interopDefaultAccessUsed) {\n                result.add(\"var \".concat(_info5.interopDefaultAccessName, \" = /*#__PURE__*/__webpack_require__.n(\").concat(_info5.name, \");\\n\"));\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Unsupported concatenation entry type \".concat(_info5.type));\n          }\n        }\n      } catch (err) {\n        _didIteratorError20 = true;\n        _iteratorError20 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion20 && _iterator20.return != null) {\n            _iterator20.return();\n          }\n        } finally {\n          if (_didIteratorError20) {\n            throw _iteratorError20;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"findNewName\",\n    value: function findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n      var name = oldName;\n      if (name === \"__WEBPACK_MODULE_DEFAULT_EXPORT__\") name = \"\"; // Remove uncool stuff\n\n      extraInfo = extraInfo.replace(/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g, \"\");\n      var splittedInfo = extraInfo.split(\"/\");\n\n      while (splittedInfo.length) {\n        name = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n        var nameIdent = Template.toIdentifier(name);\n        if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;\n      }\n\n      var i = 0;\n      var nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n\n      while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {\n        i++;\n        nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n      }\n\n      return nameWithNumber;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var _iteratorNormalCompletion31 = true;\n      var _didIteratorError31 = false;\n      var _iteratorError31 = undefined;\n\n      try {\n        for (var _iterator31 = this._orderedConcatenationList[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n          var info = _step31.value;\n\n          switch (info.type) {\n            case \"concatenated\":\n              info.module.updateHash(hash);\n              break;\n\n            case \"external\":\n              hash.update(\"\".concat(info.module.id));\n              break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError31 = true;\n        _iteratorError31 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion31 && _iterator31.return != null) {\n            _iterator31.return();\n          }\n        } finally {\n          if (_didIteratorError31) {\n            throw _iteratorError31;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(ConcatenatedModule.prototype), \"updateHash\", this).call(this, hash);\n    }\n  }, {\n    key: \"modules\",\n    get: function get() {\n      return this._orderedConcatenationList.filter(function (info) {\n        return info.type === \"concatenated\";\n      }).map(function (info) {\n        return info.module;\n      });\n    }\n  }], [{\n    key: \"createConcatenationList\",\n    value: function createConcatenationList(rootModule, modulesSet, compilation) {\n      var list = [];\n      var set = new Set();\n      /**\n       * @param {Module} module a module\n       * @returns {(function(): Module)[]} imported modules in order\n       */\n\n      var getConcatenatedImports = function getConcatenatedImports(module) {\n        /** @type {WeakMap<DependencyReference, Dependency>} */\n        var map = new WeakMap();\n        var references = module.dependencies.filter(function (dep) {\n          return dep instanceof HarmonyImportDependency;\n        }).map(function (dep) {\n          var ref = compilation.getDependencyReference(module, dep);\n          if (ref) map.set(ref, dep);\n          return ref;\n        }).filter(function (ref) {\n          return ref;\n        });\n        DependencyReference.sort(references); // TODO webpack 5: remove this hack, see also DependencyReference\n\n        return references.map(function (ref) {\n          var dep = map.get(ref);\n          return function () {\n            return compilation.getDependencyReference(module, dep).module;\n          };\n        });\n      };\n\n      var enterModule = function enterModule(getModule) {\n        var module = getModule();\n        if (!module) return;\n        if (set.has(module)) return;\n        set.add(module);\n\n        if (modulesSet.has(module)) {\n          var imports = getConcatenatedImports(module);\n          imports.forEach(enterModule);\n          list.push({\n            type: \"concatenated\",\n            module: module\n          });\n        } else {\n          list.push({\n            type: \"external\",\n\n            get module() {\n              // We need to use a getter here, because the module in the dependency\n              // could be replaced by some other process (i. e. also replaced with a\n              // concatenated module)\n              return getModule();\n            }\n\n          });\n        }\n      };\n\n      enterModule(function () {\n        return rootModule;\n      });\n      return list;\n    }\n  }]);\n\n  return ConcatenatedModule;\n}(Module);\n\nvar HarmonyImportSpecifierDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyImportSpecifierDependencyConcatenatedTemplate(originalTemplate, modulesMap) {\n    _classCallCheck(this, HarmonyImportSpecifierDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyImportSpecifierDependencyConcatenatedTemplate, [{\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtimeTemplate, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.harmonyInit(dep, source, runtimeTemplate, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n\n      var content;\n      var callFlag = dep.call ? \"_call\" : \"\";\n      var strictFlag = dep.originModule.buildMeta.strictHarmonyModule ? \"_strict\" : \"\";\n\n      if (dep._id === null) {\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_ns\").concat(strictFlag, \"__\");\n      } else if (dep.namespaceObjectAsContext) {\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_ns\").concat(strictFlag, \"__[\").concat(JSON.stringify(dep._id), \"]\");\n      } else {\n        var exportData = Buffer.from(dep._id, \"utf-8\").toString(\"hex\");\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_\").concat(exportData).concat(callFlag).concat(strictFlag, \"__\");\n      }\n\n      if (dep.shorthand) {\n        content = dep.name + \": \" + content;\n      }\n\n      source.replace(dep.range[0], dep.range[1] - 1, content);\n    }\n  }]);\n\n  return HarmonyImportSpecifierDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyImportSideEffectDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyImportSideEffectDependencyConcatenatedTemplate(originalTemplate, modulesMap) {\n    _classCallCheck(this, HarmonyImportSideEffectDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyImportSideEffectDependencyConcatenatedTemplate, [{\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.harmonyInit(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }]);\n\n  return HarmonyImportSideEffectDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyExportSpecifierDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyExportSpecifierDependencyConcatenatedTemplate(originalTemplate, rootModule) {\n    _classCallCheck(this, HarmonyExportSpecifierDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.rootModule = rootModule;\n  }\n\n  _createClass(HarmonyExportSpecifierDependencyConcatenatedTemplate, [{\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      if (dep.originModule === this.rootModule) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {\n      if (dep.originModule === this.rootModule) {\n        this.originalTemplate.harmonyInit(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      if (dep.originModule === this.rootModule) {\n        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n      }\n    }\n  }]);\n\n  return HarmonyExportSpecifierDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyExportExpressionDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyExportExpressionDependencyConcatenatedTemplate(originalTemplate, rootModule) {\n    _classCallCheck(this, HarmonyExportExpressionDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.rootModule = rootModule;\n  }\n\n  _createClass(HarmonyExportExpressionDependencyConcatenatedTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var content = \"/* harmony default export */ var __WEBPACK_MODULE_DEFAULT_EXPORT__ = \";\n\n      if (dep.originModule === this.rootModule) {\n        var used = dep.originModule.isUsed(\"default\");\n        var exportsName = dep.originModule.exportsArgument;\n        if (used) content += \"\".concat(exportsName, \"[\").concat(JSON.stringify(used), \"] = \");\n      }\n\n      if (dep.range) {\n        source.replace(dep.rangeStatement[0], dep.range[0] - 1, content + \"(\" + dep.prefix);\n        source.replace(dep.range[1], dep.rangeStatement[1] - 1, \");\");\n        return;\n      }\n\n      source.replace(dep.rangeStatement[0], dep.rangeStatement[1] - 1, content + dep.prefix);\n    }\n  }]);\n\n  return HarmonyExportExpressionDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyExportImportedSpecifierDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyExportImportedSpecifierDependencyConcatenatedTemplate(originalTemplate, rootModule, modulesMap) {\n    _classCallCheck(this, HarmonyExportImportedSpecifierDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.rootModule = rootModule;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyExportImportedSpecifierDependencyConcatenatedTemplate, [{\n    key: \"getExports\",\n    value: function getExports(dep) {\n      var importModule = dep._module;\n\n      if (dep.id) {\n        // export { named } from \"module\"\n        return [{\n          name: dep.name,\n          id: dep.id,\n          module: importModule\n        }];\n      }\n\n      if (dep.name) {\n        // export * as abc from \"module\"\n        return [{\n          name: dep.name,\n          id: true,\n          module: importModule\n        }];\n      } // export * from \"module\"\n\n\n      return importModule.buildMeta.providedExports.filter(function (exp) {\n        return exp !== \"default\" && !dep.activeExports.has(exp);\n      }).map(function (exp) {\n        return {\n          name: exp,\n          id: exp,\n          module: importModule\n        };\n      });\n    }\n  }, {\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.harmonyInit(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      if (dep.originModule === this.rootModule) {\n        if (this.modulesMap.get(dep._module)) {\n          var exportDefs = this.getExports(dep);\n          var _iteratorNormalCompletion32 = true;\n          var _didIteratorError32 = false;\n          var _iteratorError32 = undefined;\n\n          try {\n            for (var _iterator32 = exportDefs[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n              var def = _step32.value;\n              var info = this.modulesMap.get(def.module);\n              var used = dep.originModule.isUsed(def.name);\n\n              if (!used) {\n                source.insert(-1, \"/* unused concated harmony import \".concat(def.name, \" */\\n\"));\n                continue;\n              }\n\n              var finalName = void 0;\n              var strictFlag = dep.originModule.buildMeta.strictHarmonyModule ? \"_strict\" : \"\";\n\n              if (def.id === true) {\n                finalName = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_ns\").concat(strictFlag, \"__\");\n              } else {\n                var exportData = Buffer.from(def.id, \"utf-8\").toString(\"hex\");\n                finalName = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_\").concat(exportData).concat(strictFlag, \"__\");\n              }\n\n              var exportsName = this.rootModule.exportsArgument;\n              var content = \"/* concated harmony reexport \".concat(def.name, \" */\") + \"__webpack_require__.d(\".concat(exportsName, \", \") + \"\".concat(JSON.stringify(used), \", \") + \"function() { return \".concat(finalName, \"; });\\n\");\n              source.insert(-1, content);\n            }\n          } catch (err) {\n            _didIteratorError32 = true;\n            _iteratorError32 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion32 && _iterator32.return != null) {\n                _iterator32.return();\n              }\n            } finally {\n              if (_didIteratorError32) {\n                throw _iteratorError32;\n              }\n            }\n          }\n        } else {\n          this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n        }\n      }\n    }\n  }]);\n\n  return HarmonyExportImportedSpecifierDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyCompatibilityDependencyConcatenatedTemplate =\n/*#__PURE__*/\nfunction () {\n  function HarmonyCompatibilityDependencyConcatenatedTemplate(originalTemplate, rootModule, modulesMap) {\n    _classCallCheck(this, HarmonyCompatibilityDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.rootModule = rootModule;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyCompatibilityDependencyConcatenatedTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {// do nothing\n    }\n  }]);\n\n  return HarmonyCompatibilityDependencyConcatenatedTemplate;\n}();\n\nmodule.exports = ConcatenatedModule;","map":null,"metadata":{},"sourceType":"script"}