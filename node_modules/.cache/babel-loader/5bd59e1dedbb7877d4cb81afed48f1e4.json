{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar FlagIncludedChunksPlugin =\n/*#__PURE__*/\nfunction () {\n  function FlagIncludedChunksPlugin() {\n    _classCallCheck(this, FlagIncludedChunksPlugin);\n  }\n\n  _createClass(FlagIncludedChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", function (chunks) {\n          // prepare two bit integers for each module\n          // 2^31 is the max number represented as SMI in v8\n          // we want the bits distributed this way:\n          // the bit 2^31 is pretty rar and only one module should get it\n          // so it has a probability of 1 / modulesCount\n          // the first bit (2^0) is the easiest and every module could get it\n          // if it doesn't get a better bit\n          // from bit 2^n to 2^(n+1) there is a probability of p\n          // so 1 / modulesCount == p^31\n          // <=> p = sqrt31(1 / modulesCount)\n          // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n          var moduleBits = new WeakMap();\n          var modulesCount = compilation.modules.length; // precalculate the modulo values for each bit\n\n          var modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n          var modulos = Array.from({\n            length: 31\n          }, function (x, i) {\n            return Math.pow(modulo, i) | 0;\n          }); // iterate all modules to generate bit values\n\n          var i = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = compilation.modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n              var bit = 30;\n\n              while (i % modulos[bit] !== 0) {\n                bit--;\n              }\n\n              moduleBits.set(_module, 1 << bit);\n              i++;\n            } // interate all chunks to generate bitmaps\n\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var chunkModulesHash = new WeakMap();\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var chunk = _step2.value;\n              var hash = 0;\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = chunk.modulesIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var _module2 = _step4.value;\n                  hash |= moduleBits.get(_module2);\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              chunkModulesHash.set(chunk, hash);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = chunks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var chunkA = _step3.value;\n              var chunkAHash = chunkModulesHash.get(chunkA);\n              var chunkAModulesCount = chunkA.getNumberOfModules();\n              if (chunkAModulesCount === 0) continue;\n              var bestModule = undefined;\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = chunkA.modulesIterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var _module3 = _step5.value;\n                  if (bestModule === undefined || bestModule.getNumberOfChunks() > _module3.getNumberOfChunks()) bestModule = _module3;\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                loopB: for (var _iterator6 = bestModule.chunksIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chunkB = _step6.value;\n                  // as we iterate the same iterables twice\n                  // skip if we find ourselves\n                  if (chunkA === chunkB) continue;\n                  var chunkBModulesCount = chunkB.getNumberOfModules(); // ids for empty chunks are not included\n\n                  if (chunkBModulesCount === 0) continue; // instead of swapping A and B just bail\n                  // as we loop twice the current A will be B and B then A\n\n                  if (chunkAModulesCount > chunkBModulesCount) continue; // is chunkA in chunkB?\n                  // we do a cheap check for the hash value\n\n                  var chunkBHash = chunkModulesHash.get(chunkB);\n                  if ((chunkBHash & chunkAHash) !== chunkAHash) continue; // compare all modules\n\n                  var _iteratorNormalCompletion7 = true;\n                  var _didIteratorError7 = false;\n                  var _iteratorError7 = undefined;\n\n                  try {\n                    for (var _iterator7 = chunkA.modulesIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                      var m = _step7.value;\n                      if (!chunkB.containsModule(m)) continue loopB;\n                    }\n                  } catch (err) {\n                    _didIteratorError7 = true;\n                    _iteratorError7 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                        _iterator7.return();\n                      }\n                    } finally {\n                      if (_didIteratorError7) {\n                        throw _iteratorError7;\n                      }\n                    }\n                  }\n\n                  chunkB.ids.push(chunkA.id);\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return FlagIncludedChunksPlugin;\n}();\n\nmodule.exports = FlagIncludedChunksPlugin;","map":null,"metadata":{},"sourceType":"script"}