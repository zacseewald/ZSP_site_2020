{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Queue = require(\"../util/Queue\");\n\nvar _require = require(\"../util/SetHelpers\"),\n    intersect = _require.intersect;\n\nvar getParentChunksWithModule = function getParentChunksWithModule(currentChunk, module) {\n  var chunks = [];\n  var stack = new Set(currentChunk.parentsIterable);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = stack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var chunk = _step.value;\n\n      if (chunk.containsModule(module)) {\n        chunks.push(chunk);\n      } else {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = chunk.parentsIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var parent = _step2.value;\n            stack.add(parent);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return chunks;\n};\n\nvar RemoveParentModulesPlugin =\n/*#__PURE__*/\nfunction () {\n  function RemoveParentModulesPlugin() {\n    _classCallCheck(this, RemoveParentModulesPlugin);\n  }\n\n  _createClass(RemoveParentModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"RemoveParentModulesPlugin\", function (compilation) {\n        var handler = function handler(chunks, chunkGroups) {\n          var queue = new Queue();\n          var availableModulesMap = new WeakMap();\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = compilation.entrypoints.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _chunkGroup = _step3.value;\n              // initialize available modules for chunks without parents\n              availableModulesMap.set(_chunkGroup, new Set());\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = _chunkGroup.childrenIterable[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var _child = _step10.value;\n                  queue.enqueue(_child);\n                }\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          while (queue.length > 0) {\n            var chunkGroup = queue.dequeue();\n            var availableModules = availableModulesMap.get(chunkGroup);\n            var changed = false;\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = chunkGroup.parentsIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var parent = _step4.value;\n                var availableModulesInParent = availableModulesMap.get(parent);\n\n                if (availableModulesInParent !== undefined) {\n                  // If we know the available modules in parent: process these\n                  if (availableModules === undefined) {\n                    // if we have not own info yet: create new entry\n                    availableModules = new Set(availableModulesInParent);\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                      for (var _iterator6 = parent.chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                        var chunk = _step6.value;\n                        var _iteratorNormalCompletion7 = true;\n                        var _didIteratorError7 = false;\n                        var _iteratorError7 = undefined;\n\n                        try {\n                          for (var _iterator7 = chunk.modulesIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                            var m = _step7.value;\n                            availableModules.add(m);\n                          }\n                        } catch (err) {\n                          _didIteratorError7 = true;\n                          _iteratorError7 = err;\n                        } finally {\n                          try {\n                            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                              _iterator7.return();\n                            }\n                          } finally {\n                            if (_didIteratorError7) {\n                              throw _iteratorError7;\n                            }\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _didIteratorError6 = true;\n                      _iteratorError6 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                          _iterator6.return();\n                        }\n                      } finally {\n                        if (_didIteratorError6) {\n                          throw _iteratorError6;\n                        }\n                      }\n                    }\n\n                    availableModulesMap.set(chunkGroup, availableModules);\n                    changed = true;\n                  } else {\n                    var _iteratorNormalCompletion8 = true;\n                    var _didIteratorError8 = false;\n                    var _iteratorError8 = undefined;\n\n                    try {\n                      for (var _iterator8 = availableModules[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                        var _m = _step8.value;\n\n                        if (!parent.containsModule(_m) && !availableModulesInParent.has(_m)) {\n                          availableModules.delete(_m);\n                          changed = true;\n                        }\n                      }\n                    } catch (err) {\n                      _didIteratorError8 = true;\n                      _iteratorError8 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                          _iterator8.return();\n                        }\n                      } finally {\n                        if (_didIteratorError8) {\n                          throw _iteratorError8;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n\n            if (changed) {\n              // if something changed: enqueue our children\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = chunkGroup.childrenIterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var child = _step5.value;\n                  queue.enqueue(child);\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            }\n          } // now we have available modules for every chunk\n\n\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = chunks[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var _chunk = _step9.value;\n              var availableModulesSets = Array.from(_chunk.groupsIterable, function (chunkGroup) {\n                return availableModulesMap.get(chunkGroup);\n              });\n              if (availableModulesSets.some(function (s) {\n                return s === undefined;\n              })) continue; // No info about this chunk group\n\n              var _availableModules = availableModulesSets.length === 1 ? availableModulesSets[0] : intersect(availableModulesSets);\n\n              var numberOfModules = _chunk.getNumberOfModules();\n\n              var toRemove = new Set();\n\n              if (numberOfModules < _availableModules.size) {\n                var _iteratorNormalCompletion11 = true;\n                var _didIteratorError11 = false;\n                var _iteratorError11 = undefined;\n\n                try {\n                  for (var _iterator11 = _chunk.modulesIterable[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                    var _m2 = _step11.value;\n\n                    if (_availableModules.has(_m2)) {\n                      toRemove.add(_m2);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError11 = true;\n                  _iteratorError11 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n                      _iterator11.return();\n                    }\n                  } finally {\n                    if (_didIteratorError11) {\n                      throw _iteratorError11;\n                    }\n                  }\n                }\n              } else {\n                var _iteratorNormalCompletion12 = true;\n                var _didIteratorError12 = false;\n                var _iteratorError12 = undefined;\n\n                try {\n                  for (var _iterator12 = _availableModules[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                    var _m3 = _step12.value;\n\n                    if (_chunk.containsModule(_m3)) {\n                      toRemove.add(_m3);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError12 = true;\n                  _iteratorError12 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n                      _iterator12.return();\n                    }\n                  } finally {\n                    if (_didIteratorError12) {\n                      throw _iteratorError12;\n                    }\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion13 = true;\n              var _didIteratorError13 = false;\n              var _iteratorError13 = undefined;\n\n              try {\n                for (var _iterator13 = toRemove[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                  var _module = _step13.value;\n\n                  _module.rewriteChunkInReasons(_chunk, getParentChunksWithModule(_chunk, _module));\n\n                  _chunk.removeModule(_module);\n                }\n              } catch (err) {\n                _didIteratorError13 = true;\n                _iteratorError13 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n                    _iterator13.return();\n                  }\n                } finally {\n                  if (_didIteratorError13) {\n                    throw _iteratorError13;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        };\n\n        compilation.hooks.optimizeChunksBasic.tap(\"RemoveParentModulesPlugin\", handler);\n        compilation.hooks.optimizeExtractedChunksBasic.tap(\"RemoveParentModulesPlugin\", handler);\n      });\n    }\n  }]);\n\n  return RemoveParentModulesPlugin;\n}();\n\nmodule.exports = RemoveParentModulesPlugin;","map":null,"metadata":{},"sourceType":"script"}