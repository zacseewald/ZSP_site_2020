{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Stats = require(\"./Stats\");\n\nvar optionOrFallback = function optionOrFallback(optionValue, fallbackValue) {\n  return optionValue !== undefined ? optionValue : fallbackValue;\n};\n\nvar MultiStats =\n/*#__PURE__*/\nfunction () {\n  function MultiStats(stats) {\n    _classCallCheck(this, MultiStats);\n\n    this.stats = stats;\n    this.hash = stats.map(function (stat) {\n      return stat.hash;\n    }).join(\"\");\n  }\n\n  _createClass(MultiStats, [{\n    key: \"hasErrors\",\n    value: function hasErrors() {\n      return this.stats.map(function (stat) {\n        return stat.hasErrors();\n      }).reduce(function (a, b) {\n        return a || b;\n      }, false);\n    }\n  }, {\n    key: \"hasWarnings\",\n    value: function hasWarnings() {\n      return this.stats.map(function (stat) {\n        return stat.hasWarnings();\n      }).reduce(function (a, b) {\n        return a || b;\n      }, false);\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson(options, forToString) {\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var jsons = this.stats.map(function (stat, idx) {\n        var childOptions = Stats.getChildOptions(options, idx);\n        var obj = stat.toJson(childOptions, forToString);\n        obj.name = stat.compilation && stat.compilation.name;\n        return obj;\n      });\n      var showVersion = options.version === undefined ? jsons.every(function (j) {\n        return j.version;\n      }) : options.version !== false;\n      var showHash = options.hash === undefined ? jsons.every(function (j) {\n        return j.hash;\n      }) : options.hash !== false;\n\n      if (showVersion) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = jsons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var j = _step.value;\n            delete j.version;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      var obj = {\n        errors: jsons.reduce(function (arr, j) {\n          return arr.concat(j.errors.map(function (msg) {\n            return \"(\".concat(j.name, \") \").concat(msg);\n          }));\n        }, []),\n        warnings: jsons.reduce(function (arr, j) {\n          return arr.concat(j.warnings.map(function (msg) {\n            return \"(\".concat(j.name, \") \").concat(msg);\n          }));\n        }, [])\n      };\n      if (showVersion) obj.version = require(\"../package.json\").version;\n      if (showHash) obj.hash = this.hash;\n      if (options.children !== false) obj.children = jsons;\n      return obj;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var useColors = optionOrFallback(options.colors, false);\n      var obj = this.toJson(options, true);\n      return Stats.jsonToString(obj, useColors);\n    }\n  }]);\n\n  return MultiStats;\n}();\n\nmodule.exports = MultiStats;","map":null,"metadata":{},"sourceType":"script"}