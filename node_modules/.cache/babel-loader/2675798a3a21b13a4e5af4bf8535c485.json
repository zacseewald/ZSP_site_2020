{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\n\nvar RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\n\nvar getFunctionExpression = require(\"./getFunctionExpression\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function RequireEnsureDependenciesBlockParserPlugin() {\n    _classCallCheck(this, RequireEnsureDependenciesBlockParserPlugin);\n  }\n\n  _createClass(RequireEnsureDependenciesBlockParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.ensure\").tap(\"RequireEnsureDependenciesBlockParserPlugin\", function (expr) {\n        var chunkName = null;\n        var chunkNameRange = null;\n        var errorExpressionArg = null;\n        var errorExpression = null;\n\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!chunkNameExpr.isString()) return;\n              chunkNameRange = chunkNameExpr.range;\n              chunkName = chunkNameExpr.string;\n            }\n          // falls through\n\n          case 3:\n            {\n              errorExpressionArg = expr.arguments[2];\n              errorExpression = getFunctionExpression(errorExpressionArg);\n\n              if (!errorExpression && !chunkName) {\n                var _chunkNameExpr = parser.evaluateExpression(expr.arguments[2]);\n\n                if (!_chunkNameExpr.isString()) return;\n                chunkNameRange = _chunkNameExpr.range;\n                chunkName = _chunkNameExpr.string;\n              }\n            }\n          // falls through\n\n          case 2:\n            {\n              var dependenciesExpr = parser.evaluateExpression(expr.arguments[0]);\n              var dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\n              var successExpressionArg = expr.arguments[1];\n              var successExpression = getFunctionExpression(successExpressionArg);\n\n              if (successExpression) {\n                parser.walkExpressions(successExpression.expressions);\n              }\n\n              if (errorExpression) {\n                parser.walkExpressions(errorExpression.expressions);\n              }\n\n              var dep = new RequireEnsureDependenciesBlock(expr, successExpression ? successExpression.fn : successExpressionArg, errorExpression ? errorExpression.fn : errorExpressionArg, chunkName, chunkNameRange, parser.state.module, expr.loc);\n              var old = parser.state.current;\n              parser.state.current = dep;\n\n              try {\n                var failed = false;\n                parser.inScope([], function () {\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    for (var _iterator = dependenciesItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var ee = _step.value;\n\n                      if (ee.isString()) {\n                        var edep = new RequireEnsureItemDependency(ee.string);\n                        edep.loc = dep.loc;\n                        dep.addDependency(edep);\n                      } else {\n                        failed = true;\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                });\n\n                if (failed) {\n                  return;\n                }\n\n                if (successExpression) {\n                  if (successExpression.fn.body.type === \"BlockStatement\") {\n                    parser.walkStatement(successExpression.fn.body);\n                  } else {\n                    parser.walkExpression(successExpression.fn.body);\n                  }\n                }\n\n                old.addBlock(dep);\n              } finally {\n                parser.state.current = old;\n              }\n\n              if (!successExpression) {\n                parser.walkExpression(successExpressionArg);\n              }\n\n              if (errorExpression) {\n                if (errorExpression.fn.body.type === \"BlockStatement\") {\n                  parser.walkStatement(errorExpression.fn.body);\n                } else {\n                  parser.walkExpression(errorExpression.fn.body);\n                }\n              } else if (errorExpressionArg) {\n                parser.walkExpression(errorExpressionArg);\n              }\n\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n\n  return RequireEnsureDependenciesBlockParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}