{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function RequireContextDependencyParserPlugin() {\n    _classCallCheck(this, RequireContextDependencyParserPlugin);\n  }\n\n  _createClass(RequireContextDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.context\").tap(\"RequireContextDependencyParserPlugin\", function (expr) {\n        var regExp = /^\\.\\/.*$/;\n        var recursive = true;\n        var mode = \"sync\";\n\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var modeExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!modeExpr.isString()) return;\n              mode = modeExpr.string;\n            }\n          // falls through\n\n          case 3:\n            {\n              var regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n              if (!regExpExpr.isRegExp()) return;\n              regExp = regExpExpr.regExp;\n            }\n          // falls through\n\n          case 2:\n            {\n              var recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n              if (!recursiveExpr.isBoolean()) return;\n              recursive = recursiveExpr.bool;\n            }\n          // falls through\n\n          case 1:\n            {\n              var requestExpr = parser.evaluateExpression(expr.arguments[0]);\n              if (!requestExpr.isString()) return;\n              var dep = new RequireContextDependency({\n                request: requestExpr.string,\n                recursive: recursive,\n                regExp: regExp,\n                mode: mode\n              }, expr.range);\n              dep.loc = expr.loc;\n              dep.optional = parser.scope.inTry;\n              parser.state.current.addDependency(dep);\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n\n  return RequireContextDependencyParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}