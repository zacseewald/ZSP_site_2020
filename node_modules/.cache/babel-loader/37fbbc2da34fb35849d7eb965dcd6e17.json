{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar MergeDuplicateChunksPlugin =\n/*#__PURE__*/\nfunction () {\n  function MergeDuplicateChunksPlugin() {\n    _classCallCheck(this, MergeDuplicateChunksPlugin);\n  }\n\n  _createClass(MergeDuplicateChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"MergeDuplicateChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksBasic.tap(\"MergeDuplicateChunksPlugin\", function (chunks) {\n          // remember already tested chunks for performance\n          var notDuplicates = new Set(); // for each chunk\n\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var chunk = _step.value;\n              // track a Set of all chunk that could be duplicates\n              var possibleDuplicates = void 0;\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = chunk.modulesIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var _module = _step2.value;\n\n                  if (possibleDuplicates === undefined) {\n                    // when possibleDuplicates is not yet set,\n                    // create a new Set from chunks of the current module\n                    // including only chunks with the same number of modules\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                      for (var _iterator4 = _module.chunksIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                        var dup = _step4.value;\n\n                        if (dup !== chunk && chunk.getNumberOfModules() === dup.getNumberOfModules() && !notDuplicates.has(dup)) {\n                          // delay allocating the new Set until here, reduce memory pressure\n                          if (possibleDuplicates === undefined) {\n                            possibleDuplicates = new Set();\n                          }\n\n                          possibleDuplicates.add(dup);\n                        }\n                      } // when no chunk is possible we can break here\n\n                    } catch (err) {\n                      _didIteratorError4 = true;\n                      _iteratorError4 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                          _iterator4.return();\n                        }\n                      } finally {\n                        if (_didIteratorError4) {\n                          throw _iteratorError4;\n                        }\n                      }\n                    }\n\n                    if (possibleDuplicates === undefined) break;\n                  } else {\n                    // validate existing possible duplicates\n                    var _iteratorNormalCompletion5 = true;\n                    var _didIteratorError5 = false;\n                    var _iteratorError5 = undefined;\n\n                    try {\n                      for (var _iterator5 = possibleDuplicates[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var _dup = _step5.value;\n\n                        // remove possible duplicate when module is not contained\n                        if (!_dup.containsModule(_module)) {\n                          possibleDuplicates.delete(_dup);\n                        }\n                      } // when all chunks has been removed we can break here\n\n                    } catch (err) {\n                      _didIteratorError5 = true;\n                      _iteratorError5 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                          _iterator5.return();\n                        }\n                      } finally {\n                        if (_didIteratorError5) {\n                          throw _iteratorError5;\n                        }\n                      }\n                    }\n\n                    if (possibleDuplicates.size === 0) break;\n                  }\n                } // when we found duplicates\n\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n\n              if (possibleDuplicates !== undefined && possibleDuplicates.size > 0) {\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                  for (var _iterator3 = possibleDuplicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var otherChunk = _step3.value;\n                    if (otherChunk.hasRuntime() !== chunk.hasRuntime()) continue; // merge them\n\n                    if (chunk.integrate(otherChunk, \"duplicate\")) {\n                      chunks.splice(chunks.indexOf(otherChunk), 1);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError3 = true;\n                  _iteratorError3 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                      _iterator3.return();\n                    }\n                  } finally {\n                    if (_didIteratorError3) {\n                      throw _iteratorError3;\n                    }\n                  }\n                }\n              } // don't check already processed chunks twice\n\n\n              notDuplicates.add(chunk);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return MergeDuplicateChunksPlugin;\n}();\n\nmodule.exports = MergeDuplicateChunksPlugin;","map":null,"metadata":{},"sourceType":"script"}