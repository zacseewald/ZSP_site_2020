{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {false | true | string[]} UsedExports */\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar addToSet = function addToSet(a, b) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      if (!a.includes(item)) a.push(item);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return a;\n};\n\nvar isSubset = function isSubset(biggerSet, subset) {\n  if (biggerSet === true) return true;\n  if (subset === true) return false;\n  return subset.every(function (item) {\n    return biggerSet.indexOf(item) >= 0;\n  });\n};\n\nvar FlagDependencyUsagePlugin =\n/*#__PURE__*/\nfunction () {\n  function FlagDependencyUsagePlugin() {\n    _classCallCheck(this, FlagDependencyUsagePlugin);\n  }\n\n  _createClass(FlagDependencyUsagePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagDependencyUsagePlugin\", function (compilation) {\n        compilation.hooks.optimizeDependencies.tap(\"FlagDependencyUsagePlugin\", function (modules) {\n          var processModule = function processModule(module, usedExports) {\n            module.used = true;\n            if (module.usedExports === true) return;\n\n            if (usedExports === true) {\n              module.usedExports = true;\n            } else if (Array.isArray(usedExports)) {\n              var old = module.usedExports ? module.usedExports.length : -1;\n              module.usedExports = addToSet(module.usedExports || [], usedExports);\n\n              if (module.usedExports.length === old) {\n                return;\n              }\n            } else if (Array.isArray(module.usedExports)) {\n              return;\n            } else {\n              module.usedExports = false;\n            } // for a module without side effects we stop tracking usage here when no export is used\n            // This module won't be evaluated in this case\n\n\n            if (module.factoryMeta.sideEffectFree) {\n              if (module.usedExports === false) return;\n              if (Array.isArray(module.usedExports) && module.usedExports.length === 0) return;\n            }\n\n            queue.push([module, module, module.usedExports]);\n          };\n\n          var processDependenciesBlock = function processDependenciesBlock(module, depBlock, usedExports) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = depBlock.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var dep = _step2.value;\n                processDependency(module, dep);\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = depBlock.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var variable = _step3.value;\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                  for (var _iterator5 = variable.dependencies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var _dep = _step5.value;\n                    processDependency(module, _dep);\n                  }\n                } catch (err) {\n                  _didIteratorError5 = true;\n                  _iteratorError5 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                      _iterator5.return();\n                    }\n                  } finally {\n                    if (_didIteratorError5) {\n                      throw _iteratorError5;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = depBlock.blocks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var block = _step4.value;\n                queue.push([module, block, usedExports]);\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          };\n\n          var processDependency = function processDependency(module, dep) {\n            var reference = compilation.getDependencyReference(module, dep);\n            if (!reference) return;\n            var referenceModule = reference.module;\n            var importedNames = reference.importedNames;\n            var oldUsed = referenceModule.used;\n            var oldUsedExports = referenceModule.usedExports;\n\n            if (!oldUsed || importedNames && (!oldUsedExports || !isSubset(oldUsedExports, importedNames))) {\n              processModule(referenceModule, importedNames);\n            }\n          };\n\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = modules[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var _module = _step6.value;\n              _module.used = false;\n            }\n            /** @type {[Module, DependenciesBlock, UsedExports][]} */\n\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n\n          var queue = [];\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = compilation._preparedEntrypoints[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var preparedEntrypoint = _step7.value;\n\n              if (preparedEntrypoint.module) {\n                processModule(preparedEntrypoint.module, true);\n              }\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          while (queue.length) {\n            var queueItem = queue.pop();\n            processDependenciesBlock(queueItem[0], queueItem[1], queueItem[2]);\n          }\n        });\n      });\n    }\n  }]);\n\n  return FlagDependencyUsagePlugin;\n}();\n\nmodule.exports = FlagDependencyUsagePlugin;","map":null,"metadata":{},"sourceType":"script"}