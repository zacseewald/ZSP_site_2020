{"ast":null,"code":"\"use strict\";\n/**\n * @template T\n */\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Queue =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Iterable<T>=} items The initial elements.\n   */\n  function Queue(items) {\n    _classCallCheck(this, Queue);\n\n    /** @private @type {Set<T>} */\n    this.set = new Set(items);\n    /** @private @type {Iterator<T>} */\n\n    this.iterator = this.set[Symbol.iterator]();\n  }\n  /**\n   * Returns the number of elements in this queue.\n   * @returns {number} The number of elements in this queue.\n   */\n\n\n  _createClass(Queue, [{\n    key: \"enqueue\",\n\n    /**\n     * Appends the specified element to this queue.\n     * @param {T} item The element to add.\n     * @returns {void}\n     */\n    value: function enqueue(item) {\n      this.set.add(item);\n    }\n    /**\n     * Retrieves and removes the head of this queue.\n     * @returns {T | undefined} The head of the queue of `undefined` if this queue is empty.\n     */\n\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var result = this.iterator.next();\n      if (result.done) return undefined;\n      this.set.delete(result.value);\n      return result.value;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.set.size;\n    }\n  }]);\n\n  return Queue;\n}();\n\nmodule.exports = Queue;","map":null,"metadata":{},"sourceType":"script"}