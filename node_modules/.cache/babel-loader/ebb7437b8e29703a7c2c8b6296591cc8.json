{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar TypeUnknown = 0;\nvar TypeNull = 1;\nvar TypeString = 2;\nvar TypeNumber = 3;\nvar TypeBoolean = 4;\nvar TypeRegExp = 5;\nvar TypeConditional = 6;\nvar TypeArray = 7;\nvar TypeConstArray = 8;\nvar TypeIdentifier = 9;\nvar TypeWrapped = 10;\nvar TypeTemplateString = 11;\n\nvar BasicEvaluatedExpression =\n/*#__PURE__*/\nfunction () {\n  function BasicEvaluatedExpression() {\n    _classCallCheck(this, BasicEvaluatedExpression);\n\n    this.type = TypeUnknown;\n    this.range = null;\n    this.falsy = false;\n    this.truthy = false;\n    this.bool = null;\n    this.number = null;\n    this.regExp = null;\n    this.string = null;\n    this.quasis = null;\n    this.parts = null;\n    this.array = null;\n    this.items = null;\n    this.options = null;\n    this.prefix = null;\n    this.postfix = null;\n    this.wrappedInnerExpressions = null;\n    this.expression = null;\n  }\n\n  _createClass(BasicEvaluatedExpression, [{\n    key: \"isNull\",\n    value: function isNull() {\n      return this.type === TypeNull;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type === TypeString;\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber() {\n      return this.type === TypeNumber;\n    }\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return this.type === TypeBoolean;\n    }\n  }, {\n    key: \"isRegExp\",\n    value: function isRegExp() {\n      return this.type === TypeRegExp;\n    }\n  }, {\n    key: \"isConditional\",\n    value: function isConditional() {\n      return this.type === TypeConditional;\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray() {\n      return this.type === TypeArray;\n    }\n  }, {\n    key: \"isConstArray\",\n    value: function isConstArray() {\n      return this.type === TypeConstArray;\n    }\n  }, {\n    key: \"isIdentifier\",\n    value: function isIdentifier() {\n      return this.type === TypeIdentifier;\n    }\n  }, {\n    key: \"isWrapped\",\n    value: function isWrapped() {\n      return this.type === TypeWrapped;\n    }\n  }, {\n    key: \"isTemplateString\",\n    value: function isTemplateString() {\n      return this.type === TypeTemplateString;\n    }\n  }, {\n    key: \"isTruthy\",\n    value: function isTruthy() {\n      return this.truthy;\n    }\n  }, {\n    key: \"isFalsy\",\n    value: function isFalsy() {\n      return this.falsy;\n    }\n  }, {\n    key: \"asBool\",\n    value: function asBool() {\n      if (this.truthy) return true;\n      if (this.falsy) return false;\n      if (this.isBoolean()) return this.bool;\n      if (this.isNull()) return false;\n      if (this.isString()) return this.string !== \"\";\n      if (this.isNumber()) return this.number !== 0;\n      if (this.isRegExp()) return true;\n      if (this.isArray()) return true;\n      if (this.isConstArray()) return true;\n\n      if (this.isWrapped()) {\n        return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n      }\n\n      if (this.isTemplateString()) {\n        var str = this.asString();\n        if (typeof str === \"string\") return str !== \"\";\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"asString\",\n    value: function asString() {\n      if (this.isBoolean()) return \"\".concat(this.bool);\n      if (this.isNull()) return \"null\";\n      if (this.isString()) return this.string;\n      if (this.isNumber()) return \"\".concat(this.number);\n      if (this.isRegExp()) return \"\".concat(this.regExp);\n\n      if (this.isArray()) {\n        var array = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n            var itemStr = item.asString();\n            if (itemStr === undefined) return undefined;\n            array.push(itemStr);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return \"\".concat(array);\n      }\n\n      if (this.isConstArray()) return \"\".concat(this.array);\n\n      if (this.isTemplateString()) {\n        var str = \"\";\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.parts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var part = _step2.value;\n            var partStr = part.asString();\n            if (partStr === undefined) return undefined;\n            str += partStr;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return str;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(string) {\n      this.type = TypeString;\n      this.string = string;\n      return this;\n    }\n  }, {\n    key: \"setNull\",\n    value: function setNull() {\n      this.type = TypeNull;\n      return this;\n    }\n  }, {\n    key: \"setNumber\",\n    value: function setNumber(number) {\n      this.type = TypeNumber;\n      this.number = number;\n      return this;\n    }\n  }, {\n    key: \"setBoolean\",\n    value: function setBoolean(bool) {\n      this.type = TypeBoolean;\n      this.bool = bool;\n      return this;\n    }\n  }, {\n    key: \"setRegExp\",\n    value: function setRegExp(regExp) {\n      this.type = TypeRegExp;\n      this.regExp = regExp;\n      return this;\n    }\n  }, {\n    key: \"setIdentifier\",\n    value: function setIdentifier(identifier) {\n      this.type = TypeIdentifier;\n      this.identifier = identifier;\n      return this;\n    }\n  }, {\n    key: \"setWrapped\",\n    value: function setWrapped(prefix, postfix, innerExpressions) {\n      this.type = TypeWrapped;\n      this.prefix = prefix;\n      this.postfix = postfix;\n      this.wrappedInnerExpressions = innerExpressions;\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.type = TypeConditional;\n      this.options = options;\n      return this;\n    }\n  }, {\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      if (!this.options) {\n        this.type = TypeConditional;\n        this.options = [];\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          this.options.push(item);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.type = TypeArray;\n      this.items = items;\n      return this;\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(array) {\n      this.type = TypeConstArray;\n      this.array = array;\n      return this;\n    }\n  }, {\n    key: \"setTemplateString\",\n    value: function setTemplateString(quasis, parts, kind) {\n      this.type = TypeTemplateString;\n      this.quasis = quasis;\n      this.parts = parts;\n      this.templateStringKind = kind;\n      return this;\n    }\n  }, {\n    key: \"setTruthy\",\n    value: function setTruthy() {\n      this.falsy = false;\n      this.truthy = true;\n      return this;\n    }\n  }, {\n    key: \"setFalsy\",\n    value: function setFalsy() {\n      this.falsy = true;\n      this.truthy = false;\n      return this;\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      this.range = range;\n      return this;\n    }\n  }, {\n    key: \"setExpression\",\n    value: function setExpression(expression) {\n      this.expression = expression;\n      return this;\n    }\n  }]);\n\n  return BasicEvaluatedExpression;\n}();\n\nmodule.exports = BasicEvaluatedExpression;","map":null,"metadata":{},"sourceType":"script"}