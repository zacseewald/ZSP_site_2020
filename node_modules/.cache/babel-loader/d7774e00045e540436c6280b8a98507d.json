{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar CachePlugin =\n/*#__PURE__*/\nfunction () {\n  function CachePlugin(cache) {\n    _classCallCheck(this, CachePlugin);\n\n    this.cache = cache || {};\n    this.FS_ACCURACY = 2000;\n  }\n\n  _createClass(CachePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      if (Array.isArray(compiler.compilers)) {\n        compiler.compilers.forEach(function (c, idx) {\n          new CachePlugin(_this.cache[idx] = _this.cache[idx] || {}).apply(c);\n        });\n      } else {\n        var registerCacheToCompiler = function registerCacheToCompiler(compiler, cache) {\n          compiler.hooks.thisCompilation.tap(\"CachePlugin\", function (compilation) {\n            compilation.cache = cache;\n            compilation.hooks.childCompiler.tap(\"CachePlugin\", function (childCompiler, compilerName, compilerIndex) {\n              if (cache) {\n                var childCache;\n\n                if (!cache.children) {\n                  cache.children = {};\n                }\n\n                if (!cache.children[compilerName]) {\n                  cache.children[compilerName] = [];\n                }\n\n                if (cache.children[compilerName][compilerIndex]) {\n                  childCache = cache.children[compilerName][compilerIndex];\n                } else {\n                  cache.children[compilerName].push(childCache = {});\n                }\n\n                registerCacheToCompiler(childCompiler, childCache);\n              }\n            });\n          });\n        };\n\n        registerCacheToCompiler(compiler, this.cache);\n        compiler.hooks.watchRun.tap(\"CachePlugin\", function () {\n          _this.watching = true;\n        });\n        compiler.hooks.run.tapAsync(\"CachePlugin\", function (compiler, callback) {\n          if (!compiler._lastCompilationFileDependencies) {\n            return callback();\n          }\n\n          var fs = compiler.inputFileSystem;\n          var fileTs = compiler.fileTimestamps = new Map();\n          asyncLib.forEach(compiler._lastCompilationFileDependencies, function (file, callback) {\n            fs.stat(file, function (err, stat) {\n              if (err) {\n                if (err.code === \"ENOENT\") return callback();\n                return callback(err);\n              }\n\n              if (stat.mtime) _this.applyMtime(+stat.mtime);\n              fileTs.set(file, +stat.mtime || Infinity);\n              callback();\n            });\n          }, function (err) {\n            if (err) return callback(err);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = fileTs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                    file = _step$value[0],\n                    ts = _step$value[1];\n\n                fileTs.set(file, ts + _this.FS_ACCURACY);\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            callback();\n          });\n        });\n        compiler.hooks.afterCompile.tap(\"CachePlugin\", function (compilation) {\n          compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;\n          compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;\n        });\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"applyMtime\",\n    value: function applyMtime(mtime) {\n      if (this.FS_ACCURACY > 1 && mtime % 2 !== 0) this.FS_ACCURACY = 1;else if (this.FS_ACCURACY > 10 && mtime % 20 !== 0) this.FS_ACCURACY = 10;else if (this.FS_ACCURACY > 100 && mtime % 200 !== 0) this.FS_ACCURACY = 100;else if (this.FS_ACCURACY > 1000 && mtime % 2000 !== 0) this.FS_ACCURACY = 1000;\n    }\n  }]);\n\n  return CachePlugin;\n}();\n\nmodule.exports = CachePlugin;","map":null,"metadata":{},"sourceType":"script"}