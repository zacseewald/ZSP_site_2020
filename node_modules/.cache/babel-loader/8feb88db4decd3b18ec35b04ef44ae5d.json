{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar createHash = require(\"./util/createHash\");\n\nvar RequestShortener = require(\"./RequestShortener\");\n\nvar getHash = function getHash(str) {\n  var hash = createHash(\"md4\");\n  hash.update(str);\n  return hash.digest(\"hex\").substr(0, 4);\n};\n\nvar NamedModulesPlugin =\n/*#__PURE__*/\nfunction () {\n  function NamedModulesPlugin(options) {\n    _classCallCheck(this, NamedModulesPlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(NamedModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"NamedModulesPlugin\", function (compilation) {\n        compilation.hooks.beforeModuleIds.tap(\"NamedModulesPlugin\", function (modules) {\n          var namedModules = new Map();\n          var context = _this.options.context || compiler.options.context;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n\n              if (_module.id === null && _module.libIdent) {\n                _module.id = _module.libIdent({\n                  context: context\n                });\n              }\n\n              if (_module.id !== null) {\n                var namedModule = namedModules.get(_module.id);\n\n                if (namedModule !== undefined) {\n                  namedModule.push(_module);\n                } else {\n                  namedModules.set(_module.id, [_module]);\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = namedModules.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _namedModule = _step2.value;\n\n              if (_namedModule.length > 1) {\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                  for (var _iterator3 = _namedModule[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var _module2 = _step3.value;\n                    var requestShortener = new RequestShortener(context);\n                    _module2.id = \"\".concat(_module2.id, \"?\").concat(getHash(requestShortener.shorten(_module2.identifier())));\n                  }\n                } catch (err) {\n                  _didIteratorError3 = true;\n                  _iteratorError3 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                      _iterator3.return();\n                    }\n                  } finally {\n                    if (_didIteratorError3) {\n                      throw _iteratorError3;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return NamedModulesPlugin;\n}();\n\nmodule.exports = NamedModulesPlugin;","map":null,"metadata":{},"sourceType":"script"}