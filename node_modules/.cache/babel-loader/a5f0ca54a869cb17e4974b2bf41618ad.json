{"ast":null,"code":"module.exports = Writer;\n\nvar fs = require('graceful-fs');\n\nvar inherits = require('inherits');\n\nvar rimraf = require('rimraf');\n\nvar mkdir = require('mkdirp');\n\nvar path = require('path');\n\nvar umask = process.platform === 'win32' ? 0 : process.umask();\n\nvar getType = require('./get-type.js');\n\nvar Abstract = require('./abstract.js'); // Must do this *before* loading the child classes\n\n\ninherits(Writer, Abstract);\nWriter.dirmode = parseInt('0777', 8) & ~umask;\nWriter.filemode = parseInt('0666', 8) & ~umask;\n\nvar DirWriter = require('./dir-writer.js');\n\nvar LinkWriter = require('./link-writer.js');\n\nvar FileWriter = require('./file-writer.js');\n\nvar ProxyWriter = require('./proxy-writer.js'); // props is the desired state.  current is optionally the current stat,\n// provided here so that subclasses can avoid statting the target\n// more than necessary.\n\n\nfunction Writer(props, current) {\n  var self = this;\n\n  if (typeof props === 'string') {\n    props = {\n      path: props\n    };\n  } // polymorphism.\n  // call fstream.Writer(dir) to get a DirWriter object, etc.\n\n\n  var type = getType(props);\n  var ClassType = Writer;\n\n  switch (type) {\n    case 'Directory':\n      ClassType = DirWriter;\n      break;\n\n    case 'File':\n      ClassType = FileWriter;\n      break;\n\n    case 'Link':\n    case 'SymbolicLink':\n      ClassType = LinkWriter;\n      break;\n\n    case null:\n    default:\n      // Don't know yet what type to create, so we wrap in a proxy.\n      ClassType = ProxyWriter;\n      break;\n  }\n\n  if (!(self instanceof ClassType)) return new ClassType(props); // now get down to business.\n\n  Abstract.call(self);\n  if (!props.path) self.error('Must provide a path', null, true); // props is what we want to set.\n  // set some convenience properties as well.\n\n  self.type = props.type;\n  self.props = props;\n  self.depth = props.depth || 0;\n  self.clobber = props.clobber === false ? props.clobber : true;\n  self.parent = props.parent || null;\n  self.root = props.root || props.parent && props.parent.root || self;\n  self._path = self.path = path.resolve(props.path);\n\n  if (process.platform === 'win32') {\n    self.path = self._path = self.path.replace(/\\?/g, '_');\n\n    if (self._path.length >= 260) {\n      self._swallowErrors = true;\n      self._path = '\\\\\\\\?\\\\' + self.path.replace(/\\//g, '\\\\');\n    }\n  }\n\n  self.basename = path.basename(props.path);\n  self.dirname = path.dirname(props.path);\n  self.linkpath = props.linkpath || null;\n  props.parent = props.root = null; // console.error(\"\\n\\n\\n%s setting size to\", props.path, props.size)\n\n  self.size = props.size;\n\n  if (typeof props.mode === 'string') {\n    props.mode = parseInt(props.mode, 8);\n  }\n\n  self.readable = false;\n  self.writable = true; // buffer until ready, or while handling another entry\n\n  self._buffer = [];\n  self.ready = false;\n  self.filter = typeof props.filter === 'function' ? props.filter : null; // start the ball rolling.\n  // this checks what's there already, and then calls\n  // self._create() to call the impl-specific creation stuff.\n\n  self._stat(current);\n} // Calling this means that it's something we can't create.\n// Just assert that it's already there, otherwise raise a warning.\n\n\nWriter.prototype._create = function () {\n  var self = this;\n  fs[self.props.follow ? 'stat' : 'lstat'](self._path, function (er) {\n    if (er) {\n      return self.warn('Cannot create ' + self._path + '\\n' + 'Unsupported type: ' + self.type, 'ENOTSUP');\n    }\n\n    self._finish();\n  });\n};\n\nWriter.prototype._stat = function (current) {\n  var self = this;\n  var props = self.props;\n  var stat = props.follow ? 'stat' : 'lstat';\n  var who = self._proxy || self;\n  if (current) statCb(null, current);else fs[stat](self._path, statCb);\n\n  function statCb(er, current) {\n    if (self.filter && !self.filter.call(who, who, current)) {\n      self._aborted = true;\n      self.emit('end');\n      self.emit('close');\n      return;\n    } // if it's not there, great.  We'll just create it.\n    // if it is there, then we'll need to change whatever differs\n\n\n    if (er || !current) {\n      return create(self);\n    }\n\n    self._old = current;\n    var currentType = getType(current); // if it's a type change, then we need to clobber or error.\n    // if it's not a type change, then let the impl take care of it.\n\n    if (currentType !== self.type || self.type === 'File' && current.nlink > 1) {\n      return rimraf(self._path, function (er) {\n        if (er) return self.error(er);\n        self._old = null;\n        create(self);\n      });\n    } // otherwise, just handle in the app-specific way\n    // this creates a fs.WriteStream, or mkdir's, or whatever\n\n\n    create(self);\n  }\n};\n\nfunction create(self) {\n  // console.error(\"W create\", self._path, Writer.dirmode)\n  // XXX Need to clobber non-dirs that are in the way,\n  // unless { clobber: false } in the props.\n  mkdir(path.dirname(self._path), Writer.dirmode, function (er, made) {\n    // console.error(\"W created\", path.dirname(self._path), er)\n    if (er) return self.error(er); // later on, we have to set the mode and owner for these\n\n    self._madeDir = made;\n    return self._create();\n  });\n}\n\nfunction endChmod(self, want, current, path, cb) {\n  var wantMode = want.mode;\n  var chmod = want.follow || self.type !== 'SymbolicLink' ? 'chmod' : 'lchmod';\n  if (!fs[chmod]) return cb();\n  if (typeof wantMode !== 'number') return cb();\n  var curMode = current.mode & parseInt('0777', 8);\n  wantMode = wantMode & parseInt('0777', 8);\n  if (wantMode === curMode) return cb();\n  fs[chmod](path, wantMode, cb);\n}\n\nfunction endChown(self, want, current, path, cb) {\n  // Don't even try it unless root.  Too easy to EPERM.\n  if (process.platform === 'win32') return cb();\n  if (!process.getuid || process.getuid() !== 0) return cb();\n  if (typeof want.uid !== 'number' && typeof want.gid !== 'number') return cb();\n  if (current.uid === want.uid && current.gid === want.gid) return cb();\n  var chown = self.props.follow || self.type !== 'SymbolicLink' ? 'chown' : 'lchown';\n  if (!fs[chown]) return cb();\n  if (typeof want.uid !== 'number') want.uid = current.uid;\n  if (typeof want.gid !== 'number') want.gid = current.gid;\n  fs[chown](path, want.uid, want.gid, cb);\n}\n\nfunction endUtimes(self, want, current, path, cb) {\n  if (!fs.utimes || process.platform === 'win32') return cb();\n  var utimes = want.follow || self.type !== 'SymbolicLink' ? 'utimes' : 'lutimes';\n\n  if (utimes === 'lutimes' && !fs[utimes]) {\n    utimes = 'utimes';\n  }\n\n  if (!fs[utimes]) return cb();\n  var curA = current.atime;\n  var curM = current.mtime;\n  var meA = want.atime;\n  var meM = want.mtime;\n  if (meA === undefined) meA = curA;\n  if (meM === undefined) meM = curM;\n  if (!isDate(meA)) meA = new Date(meA);\n  if (!isDate(meM)) meA = new Date(meM);\n  if (meA.getTime() === curA.getTime() && meM.getTime() === curM.getTime()) return cb();\n  fs[utimes](path, meA, meM, cb);\n} // XXX This function is beastly.  Break it up!\n\n\nWriter.prototype._finish = function () {\n  var self = this;\n  if (self._finishing) return;\n  self._finishing = true; // console.error(\" W Finish\", self._path, self.size)\n  // set up all the things.\n  // At this point, we're already done writing whatever we've gotta write,\n  // adding files to the dir, etc.\n\n  var todo = 0;\n  var errState = null;\n  var done = false;\n\n  if (self._old) {\n    // the times will almost *certainly* have changed.\n    // adds the utimes syscall, but remove another stat.\n    self._old.atime = new Date(0);\n    self._old.mtime = new Date(0); // console.error(\" W Finish Stale Stat\", self._path, self.size)\n\n    setProps(self._old);\n  } else {\n    var stat = self.props.follow ? 'stat' : 'lstat'; // console.error(\" W Finish Stating\", self._path, self.size)\n\n    fs[stat](self._path, function (er, current) {\n      // console.error(\" W Finish Stated\", self._path, self.size, current)\n      if (er) {\n        // if we're in the process of writing out a\n        // directory, it's very possible that the thing we're linking to\n        // doesn't exist yet (especially if it was intended as a symlink),\n        // so swallow ENOENT errors here and just soldier on.\n        if (er.code === 'ENOENT' && (self.type === 'Link' || self.type === 'SymbolicLink') && process.platform === 'win32') {\n          self.ready = true;\n          self.emit('ready');\n          self.emit('end');\n          self.emit('close');\n\n          self.end = self._finish = function () {};\n\n          return;\n        } else return self.error(er);\n      }\n\n      setProps(self._old = current);\n    });\n  }\n\n  return;\n\n  function setProps(current) {\n    todo += 3;\n    endChmod(self, self.props, current, self._path, next('chmod'));\n    endChown(self, self.props, current, self._path, next('chown'));\n    endUtimes(self, self.props, current, self._path, next('utimes'));\n  }\n\n  function next(what) {\n    return function (er) {\n      // console.error(\"   W Finish\", what, todo)\n      if (errState) return;\n\n      if (er) {\n        er.fstream_finish_call = what;\n        return self.error(errState = er);\n      }\n\n      if (--todo > 0) return;\n      if (done) return;\n      done = true; // we may still need to set the mode/etc. on some parent dirs\n      // that were created previously.  delay end/close until then.\n\n      if (!self._madeDir) return end();else endMadeDir(self, self._path, end);\n\n      function end(er) {\n        if (er) {\n          er.fstream_finish_call = 'setupMadeDir';\n          return self.error(er);\n        } // all the props have been set, so we're completely done.\n\n\n        self.emit('end');\n        self.emit('close');\n      }\n    };\n  }\n};\n\nfunction endMadeDir(self, p, cb) {\n  var made = self._madeDir; // everything *between* made and path.dirname(self._path)\n  // needs to be set up.  Note that this may just be one dir.\n\n  var d = path.dirname(p);\n  endMadeDir_(self, d, function (er) {\n    if (er) return cb(er);\n\n    if (d === made) {\n      return cb();\n    }\n\n    endMadeDir(self, d, cb);\n  });\n}\n\nfunction endMadeDir_(self, p, cb) {\n  var dirProps = {};\n  Object.keys(self.props).forEach(function (k) {\n    dirProps[k] = self.props[k]; // only make non-readable dirs if explicitly requested.\n\n    if (k === 'mode' && self.type !== 'Directory') {\n      dirProps[k] = dirProps[k] | parseInt('0111', 8);\n    }\n  });\n  var todo = 3;\n  var errState = null;\n  fs.stat(p, function (er, current) {\n    if (er) return cb(errState = er);\n    endChmod(self, dirProps, current, p, next);\n    endChown(self, dirProps, current, p, next);\n    endUtimes(self, dirProps, current, p, next);\n  });\n\n  function next(er) {\n    if (errState) return;\n    if (er) return cb(errState = er);\n    if (--todo === 0) return cb();\n  }\n}\n\nWriter.prototype.pipe = function () {\n  this.error(\"Can't pipe from writable stream\");\n};\n\nWriter.prototype.add = function () {\n  this.error(\"Can't add to non-Directory type\");\n};\n\nWriter.prototype.write = function () {\n  return true;\n};\n\nfunction objectToString(d) {\n  return Object.prototype.toString.call(d);\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}","map":null,"metadata":{},"sourceType":"script"}