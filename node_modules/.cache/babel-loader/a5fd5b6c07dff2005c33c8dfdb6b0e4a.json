{"ast":null,"code":"'use strict';\n\nvar BB = require('bluebird');\n\nvar chownr = BB.promisify(require('chownr'));\nvar mkdirp = BB.promisify(require('mkdirp'));\n\nvar inflight = require('promise-inflight');\n\nmodule.exports.chownr = fixOwner;\n\nfunction fixOwner(filepath, uid, gid) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return BB.resolve();\n  }\n\n  if (typeof uid !== 'number' && typeof gid !== 'number') {\n    // There's no permissions override. Nothing to do here.\n    return BB.resolve();\n  }\n\n  if (typeof uid === 'number' && process.getuid() === uid && typeof gid === 'number' && process.getgid() === gid) {\n    // No need to override if it's already what we used.\n    return BB.resolve();\n  }\n\n  return inflight('fixOwner: fixing ownership on ' + filepath, function () {\n    return chownr(filepath, typeof uid === 'number' ? uid : process.getuid(), typeof gid === 'number' ? gid : process.getgid()).catch({\n      code: 'ENOENT'\n    }, function () {\n      return null;\n    });\n  });\n}\n\nmodule.exports.chownr.sync = fixOwnerSync;\n\nfunction fixOwnerSync(filepath, uid, gid) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return;\n  }\n\n  if (typeof uid !== 'number' && typeof gid !== 'number') {\n    // There's no permissions override. Nothing to do here.\n    return;\n  }\n\n  if (typeof uid === 'number' && process.getuid() === uid && typeof gid === 'number' && process.getgid() === gid) {\n    // No need to override if it's already what we used.\n    return;\n  }\n\n  try {\n    chownr.sync(filepath, typeof uid === 'number' ? uid : process.getuid(), typeof gid === 'number' ? gid : process.getgid());\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return null;\n    }\n  }\n}\n\nmodule.exports.mkdirfix = mkdirfix;\n\nfunction mkdirfix(p, uid, gid, cb) {\n  return mkdirp(p).then(function (made) {\n    if (made) {\n      return fixOwner(made, uid, gid).then(function () {\n        return made;\n      });\n    }\n  }).catch({\n    code: 'EEXIST'\n  }, function () {\n    // There's a race in mkdirp!\n    return fixOwner(p, uid, gid).then(function () {\n      return null;\n    });\n  });\n}\n\nmodule.exports.mkdirfix.sync = mkdirfixSync;\n\nfunction mkdirfixSync(p, uid, gid) {\n  try {\n    var made = mkdirp.sync(p);\n\n    if (made) {\n      fixOwnerSync(made, uid, gid);\n      return made;\n    }\n  } catch (err) {\n    if (err.code === 'EEXIST') {\n      fixOwnerSync(p, uid, gid);\n      return null;\n    } else {\n      throw err;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}