{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar GraphHelpers = require(\"../GraphHelpers\");\n\nvar EnsureChunkConditionsPlugin =\n/*#__PURE__*/\nfunction () {\n  function EnsureChunkConditionsPlugin() {\n    _classCallCheck(this, EnsureChunkConditionsPlugin);\n  }\n\n  _createClass(EnsureChunkConditionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"EnsureChunkConditionsPlugin\", function (compilation) {\n        var handler = function handler(chunks) {\n          var changed = false;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = compilation.modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n              if (!_module.chunkCondition) continue;\n              var sourceChunks = new Set();\n              var chunkGroups = new Set();\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = _module.chunksIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var chunk = _step2.value;\n\n                  if (!_module.chunkCondition(chunk)) {\n                    sourceChunks.add(chunk);\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                      for (var _iterator6 = chunk.groupsIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                        var group = _step6.value;\n                        chunkGroups.add(group);\n                      }\n                    } catch (err) {\n                      _didIteratorError6 = true;\n                      _iteratorError6 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                          _iterator6.return();\n                        }\n                      } finally {\n                        if (_didIteratorError6) {\n                          throw _iteratorError6;\n                        }\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n\n              if (sourceChunks.size === 0) continue;\n              var targetChunks = new Set();\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                chunkGroupLoop: for (var _iterator3 = chunkGroups[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var chunkGroup = _step3.value;\n                  // Can module be placed in a chunk of this group?\n                  var _iteratorNormalCompletion7 = true;\n                  var _didIteratorError7 = false;\n                  var _iteratorError7 = undefined;\n\n                  try {\n                    for (var _iterator7 = chunkGroup.chunks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                      var _chunk = _step7.value;\n\n                      if (_module.chunkCondition(_chunk)) {\n                        targetChunks.add(_chunk);\n                        continue chunkGroupLoop;\n                      }\n                    } // We reached the entrypoint: fail\n\n                  } catch (err) {\n                    _didIteratorError7 = true;\n                    _iteratorError7 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                        _iterator7.return();\n                      }\n                    } finally {\n                      if (_didIteratorError7) {\n                        throw _iteratorError7;\n                      }\n                    }\n                  }\n\n                  if (chunkGroup.isInitial()) {\n                    throw new Error(\"Cannot fullfil chunk condition of \" + _module.identifier());\n                  } // Try placing in all parents\n\n\n                  var _iteratorNormalCompletion8 = true;\n                  var _didIteratorError8 = false;\n                  var _iteratorError8 = undefined;\n\n                  try {\n                    for (var _iterator8 = chunkGroup.parentsIterable[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                      var _group = _step8.value;\n                      chunkGroups.add(_group);\n                    }\n                  } catch (err) {\n                    _didIteratorError8 = true;\n                    _iteratorError8 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                        _iterator8.return();\n                      }\n                    } finally {\n                      if (_didIteratorError8) {\n                        throw _iteratorError8;\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = sourceChunks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var sourceChunk = _step4.value;\n                  GraphHelpers.disconnectChunkAndModule(sourceChunk, _module);\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = targetChunks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var targetChunk = _step5.value;\n                  GraphHelpers.connectChunkAndModule(targetChunk, _module);\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          if (changed) return true;\n        };\n\n        compilation.hooks.optimizeChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n        compilation.hooks.optimizeExtractedChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n      });\n    }\n  }]);\n\n  return EnsureChunkConditionsPlugin;\n}();\n\nmodule.exports = EnsureChunkConditionsPlugin;","map":null,"metadata":{},"sourceType":"script"}