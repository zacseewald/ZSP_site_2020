{"ast":null,"code":"// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\nmodule.exports = LinkReader;\n\nvar fs = require('graceful-fs');\n\nvar inherits = require('inherits');\n\nvar Reader = require('./reader.js');\n\ninherits(LinkReader, Reader);\n\nfunction LinkReader(props) {\n  var self = this;\n\n  if (!(self instanceof LinkReader)) {\n    throw new Error('LinkReader must be called as constructor.');\n  }\n\n  if (!(props.type === 'Link' && props.Link || props.type === 'SymbolicLink' && props.SymbolicLink)) {\n    throw new Error('Non-link type ' + props.type);\n  }\n\n  Reader.call(self, props);\n} // When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\n\n\nLinkReader.prototype._stat = function (currentStat) {\n  var self = this;\n  fs.readlink(self._path, function (er, linkpath) {\n    if (er) return self.error(er);\n    self.linkpath = self.props.linkpath = linkpath;\n    self.emit('linkpath', linkpath);\n\n    Reader.prototype._stat.call(self, currentStat);\n  });\n};\n\nLinkReader.prototype._read = function () {\n  var self = this;\n  if (self._paused) return; // basically just a no-op, since we got all the info we need\n  // from the _stat method\n\n  if (!self._ended) {\n    self.emit('end');\n    self.emit('close');\n    self._ended = true;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}