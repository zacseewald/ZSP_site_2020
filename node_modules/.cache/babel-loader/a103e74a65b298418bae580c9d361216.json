{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ImportContextDependency = require(\"./ImportContextDependency\");\n\nvar ImportWeakDependency = require(\"./ImportWeakDependency\");\n\nvar ImportDependenciesBlock = require(\"./ImportDependenciesBlock\");\n\nvar ImportEagerDependency = require(\"./ImportEagerDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\n\nvar CommentCompilationWarning = require(\"../CommentCompilationWarning\");\n\nvar ImportParserPlugin =\n/*#__PURE__*/\nfunction () {\n  function ImportParserPlugin(options) {\n    _classCallCheck(this, ImportParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(ImportParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var _this = this;\n\n      parser.hooks.importCall.tap(\"ImportParserPlugin\", function (expr) {\n        if (expr.arguments.length !== 1) {\n          throw new Error(\"Incorrect number of arguments provided to 'import(module: string) -> Promise'.\");\n        }\n\n        var param = parser.evaluateExpression(expr.arguments[0]);\n        var chunkName = null;\n        var mode = \"lazy\";\n        var include = null;\n        var exclude = null;\n        var groupOptions = {};\n\n        var _parser$parseCommentO = parser.parseCommentOptions(expr.range),\n            importOptions = _parser$parseCommentO.options,\n            commentErrors = _parser$parseCommentO.errors;\n\n        if (commentErrors) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = commentErrors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var e = _step.value;\n              var comment = e.comment;\n              parser.state.module.warnings.push(new CommentCompilationWarning(\"Compilation error while processing magic comment(-s): /*\".concat(comment.value, \"*/: \").concat(e.message), parser.state.module, comment.loc));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        if (importOptions) {\n          if (importOptions.webpackIgnore !== undefined) {\n            if (typeof importOptions.webpackIgnore !== \"boolean\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackIgnore` expected a boolean, but received: \".concat(importOptions.webpackIgnore, \".\"), expr.loc));\n            } else {\n              // Do not instrument `import()` if `webpackIgnore` is `true`\n              if (importOptions.webpackIgnore) {\n                return false;\n              }\n            }\n          }\n\n          if (importOptions.webpackChunkName !== undefined) {\n            if (typeof importOptions.webpackChunkName !== \"string\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackChunkName` expected a string, but received: \".concat(importOptions.webpackChunkName, \".\"), expr.loc));\n            } else {\n              chunkName = importOptions.webpackChunkName;\n            }\n          }\n\n          if (importOptions.webpackMode !== undefined) {\n            if (typeof importOptions.webpackMode !== \"string\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected a string, but received: \".concat(importOptions.webpackMode, \".\"), expr.loc));\n            } else {\n              mode = importOptions.webpackMode;\n            }\n          }\n\n          if (importOptions.webpackPrefetch !== undefined) {\n            if (importOptions.webpackPrefetch === true) {\n              groupOptions.prefetchOrder = 0;\n            } else if (typeof importOptions.webpackPrefetch === \"number\") {\n              groupOptions.prefetchOrder = importOptions.webpackPrefetch;\n            } else {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackPrefetch` expected true or a number, but received: \".concat(importOptions.webpackPrefetch, \".\"), expr.loc));\n            }\n          }\n\n          if (importOptions.webpackPreload !== undefined) {\n            if (importOptions.webpackPreload === true) {\n              groupOptions.preloadOrder = 0;\n            } else if (typeof importOptions.webpackPreload === \"number\") {\n              groupOptions.preloadOrder = importOptions.webpackPreload;\n            } else {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackPreload` expected true or a number, but received: \".concat(importOptions.webpackPreload, \".\"), expr.loc));\n            }\n          }\n\n          if (importOptions.webpackInclude !== undefined) {\n            if (!importOptions.webpackInclude || importOptions.webpackInclude.constructor.name !== \"RegExp\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackInclude` expected a regular expression, but received: \".concat(importOptions.webpackInclude, \".\"), expr.loc));\n            } else {\n              include = new RegExp(importOptions.webpackInclude);\n            }\n          }\n\n          if (importOptions.webpackExclude !== undefined) {\n            if (!importOptions.webpackExclude || importOptions.webpackExclude.constructor.name !== \"RegExp\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackExclude` expected a regular expression, but received: \".concat(importOptions.webpackExclude, \".\"), expr.loc));\n            } else {\n              exclude = new RegExp(importOptions.webpackExclude);\n            }\n          }\n        }\n\n        if (param.isString()) {\n          if (mode !== \"lazy\" && mode !== \"eager\" && mode !== \"weak\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected 'lazy', 'eager' or 'weak', but received: \".concat(mode, \".\"), expr.loc));\n          }\n\n          if (mode === \"eager\") {\n            var dep = new ImportEagerDependency(param.string, parser.state.module, expr.range);\n            parser.state.current.addDependency(dep);\n          } else if (mode === \"weak\") {\n            var _dep = new ImportWeakDependency(param.string, parser.state.module, expr.range);\n\n            parser.state.current.addDependency(_dep);\n          } else {\n            var depBlock = new ImportDependenciesBlock(param.string, expr.range, Object.assign(groupOptions, {\n              name: chunkName\n            }), parser.state.module, expr.loc, parser.state.module);\n            parser.state.current.addBlock(depBlock);\n          }\n\n          return true;\n        } else {\n          if (mode !== \"lazy\" && mode !== \"lazy-once\" && mode !== \"eager\" && mode !== \"weak\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected 'lazy', 'lazy-once', 'eager' or 'weak', but received: \".concat(mode, \".\"), expr.loc));\n            mode = \"lazy\";\n          }\n\n          if (mode === \"weak\") {\n            mode = \"async-weak\";\n          }\n\n          var _dep2 = ContextDependencyHelpers.create(ImportContextDependency, expr.range, param, expr, _this.options, {\n            chunkName: chunkName,\n            groupOptions: groupOptions,\n            include: include,\n            exclude: exclude,\n            mode: mode,\n            namespaceObject: parser.state.module.buildMeta.strictHarmonyModule ? \"strict\" : true\n          }, parser);\n\n          if (!_dep2) return;\n          _dep2.loc = expr.loc;\n          _dep2.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(_dep2);\n          return true;\n        }\n      });\n    }\n  }]);\n\n  return ImportParserPlugin;\n}();\n\nmodule.exports = ImportParserPlugin;","map":null,"metadata":{},"sourceType":"script"}