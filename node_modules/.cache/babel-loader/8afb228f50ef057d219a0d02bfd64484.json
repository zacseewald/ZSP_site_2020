{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction startsWith(string, searchString) {\n  var stringLength = string.length;\n  var searchLength = searchString.length; // early out if the search length is greater than the search string\n\n  if (searchLength > stringLength) {\n    return false;\n  }\n\n  var index = -1;\n\n  while (++index < searchLength) {\n    if (string.charCodeAt(index) !== searchString.charCodeAt(index)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function AliasPlugin(source, options, target) {\n    _classCallCheck(this, AliasPlugin);\n\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n\n  _createClass(AliasPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"AliasPlugin\", function (request, resolveContext, callback) {\n        var innerRequest = request.request || request.path;\n        if (!innerRequest) return callback();\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (innerRequest === item.name || !item.onlyModule && startsWith(innerRequest, item.name + \"/\")) {\n              if (innerRequest !== item.alias && !startsWith(innerRequest, item.alias + \"/\")) {\n                var newRequestStr = item.alias + innerRequest.substr(item.name.length);\n                var obj = Object.assign({}, request, {\n                  request: newRequestStr\n                });\n                return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + item.alias + \"' to '\" + newRequestStr + \"'\", resolveContext, function (err, result) {\n                  if (err) return callback(err); // Don't allow other aliasing or raw request\n\n                  if (result === undefined) return callback(null, null);\n                  callback(null, result);\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return callback();\n      });\n    }\n  }]);\n\n  return AliasPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}