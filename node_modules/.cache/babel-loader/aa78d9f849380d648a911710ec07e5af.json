{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nvar AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nvar AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nvar AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nvar AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nvar UnsupportedDependency = require(\"./UnsupportedDependency\");\n\nvar LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nvar NullFactory = require(\"../NullFactory\");\n\nvar AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nvar AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nvar AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar AMDPlugin =\n/*#__PURE__*/\nfunction () {\n  function AMDPlugin(options, amdOptions) {\n    _classCallCheck(this, AMDPlugin);\n\n    this.amdOptions = amdOptions;\n    this.options = options;\n  }\n\n  _createClass(AMDPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var amdOptions = this.amdOptions;\n      compiler.hooks.compilation.tap(\"AMDPlugin\", function (compilation, _ref) {\n        var contextModuleFactory = _ref.contextModuleFactory,\n            normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n        compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n        compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());\n        compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n        compilation.dependencyFactories.set(UnsupportedDependency, new NullFactory());\n        compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n        compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());\n        compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n          var setExpressionToModule = function setExpressionToModule(outerExpr, module) {\n            parser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", function (expr) {\n              var dep = new AMDRequireItemDependency(module, expr.range);\n              dep.userRequest = outerExpr;\n              dep.loc = expr.loc;\n              parser.state.current.addDependency(dep);\n              return true;\n            });\n          };\n\n          new AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n          new AMDDefineDependencyParserPlugin(options).apply(parser);\n          setExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n          setExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n          setExpressionToModule(\"define\", \"!!webpack amd define\");\n          parser.hooks.expression.for(\"__webpack_amd_options__\").tap(\"AMDPlugin\", function () {\n            return parser.state.current.addVariable(\"__webpack_amd_options__\", JSON.stringify(amdOptions));\n          });\n          parser.hooks.evaluateTypeof.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n          parser.hooks.evaluateTypeof.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n          parser.hooks.evaluateIdentifier.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"define.amd\", true));\n          parser.hooks.evaluateIdentifier.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"require.amd\", true));\n          parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.approve);\n          parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", function (expr) {\n            var dep = new AMDRequireItemDependency(\"!!webpack amd define\", expr.range);\n            dep.userRequest = \"define\";\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return false;\n          });\n          parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n      });\n      compiler.hooks.afterResolvers.tap(\"AMDPlugin\", function () {\n        compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"AMDPlugin\", function (resolver) {\n          new AliasPlugin(\"described-resolve\", {\n            name: \"amdefine\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n          }, \"resolve\").apply(resolver);\n          new AliasPlugin(\"described-resolve\", {\n            name: \"webpack amd options\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-options.js\")\n          }, \"resolve\").apply(resolver);\n          new AliasPlugin(\"described-resolve\", {\n            name: \"webpack amd define\",\n            alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n          }, \"resolve\").apply(resolver);\n        });\n      });\n    }\n  }]);\n\n  return AMDPlugin;\n}();\n\nmodule.exports = AMDPlugin;","map":null,"metadata":{},"sourceType":"script"}