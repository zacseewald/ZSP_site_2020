{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar FiggyPudding =\n/*#__PURE__*/\nfunction () {\n  function FiggyPudding(specs, opts, providers) {\n    var _this = this;\n\n    _classCallCheck(this, FiggyPudding);\n\n    this.__specs = specs || {};\n    Object.keys(this.__specs).forEach(function (alias) {\n      if (typeof _this.__specs[alias] === 'string') {\n        var key = _this.__specs[alias];\n        var realSpec = _this.__specs[key];\n\n        if (realSpec) {\n          var aliasArr = realSpec.aliases || [];\n          aliasArr.push(alias, key);\n          realSpec.aliases = _toConsumableArray(new Set(aliasArr));\n          _this.__specs[alias] = realSpec;\n        } else {\n          throw new Error(\"Alias refers to invalid key: \".concat(key, \" -> \").concat(alias));\n        }\n      }\n    });\n    this.__opts = opts || {};\n    this.__providers = reverse(providers.filter(function (x) {\n      return x != null && typeof x === 'object';\n    }));\n    this.__isFiggyPudding = true;\n  }\n\n  _createClass(FiggyPudding, [{\n    key: \"get\",\n    value: function get(key) {\n      return pudGet(this, key, true);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          fn.call(thisArg, value, key, this);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {};\n      this.forEach(function (val, key) {\n        obj[key] = val;\n      });\n      return obj;\n    }\n  }, {\n    key: \"entries\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function entries(_matcher) {\n      var _arr, _i, _key, matcher, seen, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, p, iter, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, key, val;\n\n      return _regeneratorRuntime.wrap(function entries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _arr = Object.keys(this.__specs);\n              _i = 0;\n\n            case 2:\n              if (!(_i < _arr.length)) {\n                _context.next = 9;\n                break;\n              }\n\n              _key = _arr[_i];\n              _context.next = 6;\n              return [_key, this.get(_key)];\n\n            case 6:\n              _i++;\n              _context.next = 2;\n              break;\n\n            case 9:\n              matcher = _matcher || this.__opts.other;\n\n              if (!matcher) {\n                _context.next = 65;\n                break;\n              }\n\n              seen = new Set();\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 15;\n              _iterator2 = this.__providers[Symbol.iterator]();\n\n            case 17:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context.next = 51;\n                break;\n              }\n\n              p = _step2.value;\n              iter = p.entries ? p.entries(matcher) : _entries(p);\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _iteratorError3 = undefined;\n              _context.prev = 23;\n              _iterator3 = iter[Symbol.iterator]();\n\n            case 25:\n              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                _context.next = 34;\n                break;\n              }\n\n              _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], val = _step3$value[1];\n\n              if (!(matcher(key) && !seen.has(key))) {\n                _context.next = 31;\n                break;\n              }\n\n              seen.add(key);\n              _context.next = 31;\n              return [key, val];\n\n            case 31:\n              _iteratorNormalCompletion3 = true;\n              _context.next = 25;\n              break;\n\n            case 34:\n              _context.next = 40;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t0 = _context[\"catch\"](23);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context.t0;\n\n            case 40:\n              _context.prev = 40;\n              _context.prev = 41;\n\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n\n            case 43:\n              _context.prev = 43;\n\n              if (!_didIteratorError3) {\n                _context.next = 46;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 46:\n              return _context.finish(43);\n\n            case 47:\n              return _context.finish(40);\n\n            case 48:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 17;\n              break;\n\n            case 51:\n              _context.next = 57;\n              break;\n\n            case 53:\n              _context.prev = 53;\n              _context.t1 = _context[\"catch\"](15);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 57:\n              _context.prev = 57;\n              _context.prev = 58;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 60:\n              _context.prev = 60;\n\n              if (!_didIteratorError2) {\n                _context.next = 63;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 63:\n              return _context.finish(60);\n\n            case 64:\n              return _context.finish(57);\n\n            case 65:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, entries, this, [[15, 53, 57, 65], [23, 36, 40, 48], [41,, 43, 47], [58,, 60, 64]]);\n    })\n  }, {\n    key: Symbol.iterator,\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function value() {\n      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, key, value;\n\n      return _regeneratorRuntime.wrap(function value$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorNormalCompletion4 = true;\n              _didIteratorError4 = false;\n              _iteratorError4 = undefined;\n              _context2.prev = 3;\n              _iterator4 = this.entries()[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                _context2.next = 12;\n                break;\n              }\n\n              _step4$value = _slicedToArray(_step4.value, 2), key = _step4$value[0], value = _step4$value[1];\n              _context2.next = 9;\n              return [key, value];\n\n            case 9:\n              _iteratorNormalCompletion4 = true;\n              _context2.next = 5;\n              break;\n\n            case 12:\n              _context2.next = 18;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](3);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context2.t0;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.prev = 19;\n\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n\n            case 21:\n              _context2.prev = 21;\n\n              if (!_didIteratorError4) {\n                _context2.next = 24;\n                break;\n              }\n\n              throw _iteratorError4;\n\n            case 24:\n              return _context2.finish(21);\n\n            case 25:\n              return _context2.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n  }, {\n    key: \"keys\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function keys() {\n      var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, key;\n\n      return _regeneratorRuntime.wrap(function keys$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iteratorNormalCompletion5 = true;\n              _didIteratorError5 = false;\n              _iteratorError5 = undefined;\n              _context3.prev = 3;\n              _iterator5 = this.entries()[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {\n                _context3.next = 12;\n                break;\n              }\n\n              _step5$value = _slicedToArray(_step5.value, 1), key = _step5$value[0];\n              _context3.next = 9;\n              return key;\n\n            case 9:\n              _iteratorNormalCompletion5 = true;\n              _context3.next = 5;\n              break;\n\n            case 12:\n              _context3.next = 18;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](3);\n              _didIteratorError5 = true;\n              _iteratorError5 = _context3.t0;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.prev = 19;\n\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n\n            case 21:\n              _context3.prev = 21;\n\n              if (!_didIteratorError5) {\n                _context3.next = 24;\n                break;\n              }\n\n              throw _iteratorError5;\n\n            case 24:\n              return _context3.finish(21);\n\n            case 25:\n              return _context3.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n  }, {\n    key: \"values\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function values() {\n      var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, value;\n\n      return _regeneratorRuntime.wrap(function values$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iteratorNormalCompletion6 = true;\n              _didIteratorError6 = false;\n              _iteratorError6 = undefined;\n              _context4.prev = 3;\n              _iterator6 = this.entries()[Symbol.iterator]();\n\n            case 5:\n              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {\n                _context4.next = 12;\n                break;\n              }\n\n              _step6$value = _slicedToArray(_step6.value, 2), value = _step6$value[1];\n              _context4.next = 9;\n              return value;\n\n            case 9:\n              _iteratorNormalCompletion6 = true;\n              _context4.next = 5;\n              break;\n\n            case 12:\n              _context4.next = 18;\n              break;\n\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](3);\n              _didIteratorError6 = true;\n              _iteratorError6 = _context4.t0;\n\n            case 18:\n              _context4.prev = 18;\n              _context4.prev = 19;\n\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n\n            case 21:\n              _context4.prev = 21;\n\n              if (!_didIteratorError6) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw _iteratorError6;\n\n            case 24:\n              return _context4.finish(21);\n\n            case 25:\n              return _context4.finish(18);\n\n            case 26:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n    })\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, moreConfig = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        moreConfig[_key2] = arguments[_key2];\n      }\n\n      return new Proxy(new FiggyPudding(this.__specs, this.__opts, reverse(this.__providers).concat(moreConfig)), proxyHandler);\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'FiggyPudding';\n    }\n  }]);\n\n  return FiggyPudding;\n}();\n\ntry {\n  var util = require('util');\n\n  FiggyPudding.prototype[util.inspect.custom] = function (depth, opts) {\n    return this[Symbol.toStringTag] + ' ' + util.inspect(this.toJSON(), opts);\n  };\n} catch (e) {}\n\nfunction BadKeyError(key) {\n  throw Object.assign(new Error(\"invalid config key requested: \".concat(key)), {\n    code: 'EBADKEY'\n  });\n}\n\nfunction pudGet(pud, key, validate) {\n  var spec = pud.__specs[key];\n\n  if (validate && !spec && (!pud.__opts.other || !pud.__opts.other(key))) {\n    BadKeyError(key);\n  } else {\n    if (!spec) {\n      spec = {};\n    }\n\n    var ret;\n    var _iteratorNormalCompletion7 = true;\n    var _didIteratorError7 = false;\n    var _iteratorError7 = undefined;\n\n    try {\n      for (var _iterator7 = pud.__providers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n        var p = _step7.value;\n        ret = tryGet(key, p);\n\n        if (ret === undefined && spec.aliases && spec.aliases.length) {\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = spec.aliases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var alias = _step8.value;\n\n              if (alias === key) {\n                continue;\n              }\n\n              ret = tryGet(alias, p);\n\n              if (ret !== undefined) {\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        if (ret !== undefined) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError7 = true;\n      _iteratorError7 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n          _iterator7.return();\n        }\n      } finally {\n        if (_didIteratorError7) {\n          throw _iteratorError7;\n        }\n      }\n    }\n\n    if (ret === undefined && spec.default !== undefined) {\n      if (typeof spec.default === 'function') {\n        return spec.default(pud);\n      } else {\n        return spec.default;\n      }\n    } else {\n      return ret;\n    }\n  }\n}\n\nfunction tryGet(key, p) {\n  var ret;\n\n  if (p.__isFiggyPudding) {\n    ret = pudGet(p, key, false);\n  } else if (typeof p.get === 'function') {\n    ret = p.get(key);\n  } else {\n    ret = p[key];\n  }\n\n  return ret;\n}\n\nvar proxyHandler = {\n  has: function has(obj, prop) {\n    return prop in obj.__specs && pudGet(obj, prop, false) !== undefined;\n  },\n  ownKeys: function ownKeys(obj) {\n    return Object.keys(obj.__specs);\n  },\n  get: function get(obj, prop) {\n    if (typeof prop === 'symbol' || prop.slice(0, 2) === '__' || prop in FiggyPudding.prototype) {\n      return obj[prop];\n    }\n\n    return obj.get(prop);\n  },\n  set: function set(obj, prop, value) {\n    if (typeof prop === 'symbol' || prop.slice(0, 2) === '__') {\n      obj[prop] = value;\n      return true;\n    } else {\n      throw new Error('figgyPudding options cannot be modified. Use .concat() instead.');\n    }\n  },\n  deleteProperty: function deleteProperty() {\n    throw new Error('figgyPudding options cannot be deleted. Use .concat() and shadow them instead.');\n  }\n};\nmodule.exports = figgyPudding;\n\nfunction figgyPudding(specs, opts) {\n  function factory() {\n    for (var _len2 = arguments.length, providers = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      providers[_key3] = arguments[_key3];\n    }\n\n    return new Proxy(new FiggyPudding(specs, opts, providers), proxyHandler);\n  }\n\n  return factory;\n}\n\nfunction reverse(arr) {\n  var ret = [];\n  arr.forEach(function (x) {\n    return ret.unshift(x);\n  });\n  return ret;\n}\n\nfunction _entries(obj) {\n  return Object.keys(obj).map(function (k) {\n    return [k, obj[k]];\n  });\n}","map":null,"metadata":{},"sourceType":"script"}