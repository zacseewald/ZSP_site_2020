{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function ModuleAppendPlugin(source, appending, target) {\n    _classCallCheck(this, ModuleAppendPlugin);\n\n    this.source = source;\n    this.appending = appending;\n    this.target = target;\n  }\n\n  _createClass(ModuleAppendPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ModuleAppendPlugin\", function (request, resolveContext, callback) {\n        var i = request.request.indexOf(\"/\"),\n            j = request.request.indexOf(\"\\\\\");\n        var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;\n        var moduleName, remainingRequest;\n\n        if (p < 0) {\n          moduleName = request.request;\n          remainingRequest = \"\";\n        } else {\n          moduleName = request.request.substr(0, p);\n          remainingRequest = request.request.substr(p);\n        }\n\n        if (moduleName === \".\" || moduleName === \"..\") return callback();\n        var moduleFinalName = moduleName + _this.appending;\n        var obj = Object.assign({}, request, {\n          request: moduleFinalName + remainingRequest\n        });\n        resolver.doResolve(target, obj, \"module variation \" + moduleFinalName, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return ModuleAppendPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}