{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Module\")} Module */\n\n\nvar ModuleParseError =\n/*#__PURE__*/\nfunction (_WebpackError) {\n  _inherits(ModuleParseError, _WebpackError);\n\n  /**\n   * @param {Module} module the errored module\n   * @param {string} source source code\n   * @param {Error&any} err the parse error\n   */\n  function ModuleParseError(module, source, err) {\n    var _this;\n\n    _classCallCheck(this, ModuleParseError);\n\n    var message = \"Module parse failed: \" + err.message;\n    var loc = undefined;\n    message += \"\\nYou may need an appropriate loader to handle this file type.\";\n\n    if (err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n\n      if (/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        var sourceLines = source.split(\"\\n\");\n        var start = Math.max(0, lineNumber - 3);\n        var linesBefore = sourceLines.slice(start, lineNumber - 1);\n        var theLine = sourceLines[lineNumber - 1];\n        var linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\") + \"\\n> \".concat(theLine) + linesAfter.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\");\n      }\n\n      loc = err.loc;\n    } else {\n      message += \"\\n\" + err.stack;\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleParseError).call(this, message));\n    _this.name = \"ModuleParseError\";\n    _this.module = module;\n    _this.loc = loc;\n    _this.error = err;\n    Error.captureStackTrace(_assertThisInitialized(_assertThisInitialized(_this)), _this.constructor);\n    return _this;\n  }\n\n  return ModuleParseError;\n}(WebpackError);\n\nmodule.exports = ModuleParseError;","map":null,"metadata":{},"sourceType":"script"}