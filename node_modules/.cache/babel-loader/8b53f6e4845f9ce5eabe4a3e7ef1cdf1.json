{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar UnsupportedWebAssemblyFeatureError = require(\"./UnsupportedWebAssemblyFeatureError\");\n\nvar WasmFinalizeExportsPlugin =\n/*#__PURE__*/\nfunction () {\n  function WasmFinalizeExportsPlugin() {\n    _classCallCheck(this, WasmFinalizeExportsPlugin);\n  }\n\n  _createClass(WasmFinalizeExportsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"WasmFinalizeExportsPlugin\", function (compilation) {\n        compilation.hooks.finishModules.tap(\"WasmFinalizeExportsPlugin\", function (modules) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              // 1. if a WebAssembly module\n              if (module.type.startsWith(\"webassembly\") === true) {\n                var _ret2 = function () {\n                  var jsIncompatibleExports = module.buildMeta.jsIncompatibleExports;\n\n                  if (jsIncompatibleExports === undefined) {\n                    return {\n                      v: \"continue\"\n                    };\n                  }\n\n                  var _iteratorNormalCompletion2 = true;\n                  var _didIteratorError2 = false;\n                  var _iteratorError2 = undefined;\n\n                  try {\n                    var _loop2 = function _loop2() {\n                      var reason = _step2.value;\n\n                      // 2. is referenced by a non-WebAssembly module\n                      if (reason.module.type.startsWith(\"webassembly\") === false) {\n                        var ref = compilation.getDependencyReference(reason.module, reason.dependency);\n                        if (!ref) return \"continue\";\n                        var importedNames = ref.importedNames;\n\n                        if (Array.isArray(importedNames)) {\n                          importedNames.forEach(function (name) {\n                            // 3. and uses a func with an incompatible JS signature\n                            if (Object.prototype.hasOwnProperty.call(jsIncompatibleExports, name)) {\n                              // 4. error\n\n                              /** @type {any} */\n                              var error = new UnsupportedWebAssemblyFeatureError(\"Export \\\"\".concat(name, \"\\\" with \").concat(jsIncompatibleExports[name], \" can only be used for direct wasm to wasm dependencies\"));\n                              error.module = module;\n                              error.origin = reason.module;\n                              error.originLoc = reason.dependency.loc;\n                              error.dependencies = [reason.dependency];\n                              compilation.errors.push(error);\n                            }\n                          });\n                        }\n                      }\n                    };\n\n                    for (var _iterator2 = module.reasons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                      var _ret3 = _loop2();\n\n                      if (_ret3 === \"continue\") continue;\n                    }\n                  } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                        _iterator2.return();\n                      }\n                    } finally {\n                      if (_didIteratorError2) {\n                        throw _iteratorError2;\n                      }\n                    }\n                  }\n                }();\n\n                if (typeof _ret2 === \"object\") return _ret2.v;\n              }\n            };\n\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _ret = _loop();\n\n              if (_ret === \"continue\") continue;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return WasmFinalizeExportsPlugin;\n}();\n\nmodule.exports = WasmFinalizeExportsPlugin;","map":null,"metadata":{},"sourceType":"script"}