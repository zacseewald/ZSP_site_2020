{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {{new(): Hash}} HashConstructor */\n\n/**\n * @typedef {Object} Hash\n * @property {function(string|Buffer, string=): Hash} update\n * @property {function(string): string} digest\n */\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar BULK_SIZE = 1000;\n/**\n * @implements {Hash}\n */\n\nvar BulkUpdateDecorator =\n/*#__PURE__*/\nfunction () {\n  function BulkUpdateDecorator(hash) {\n    _classCallCheck(this, BulkUpdateDecorator);\n\n    this.hash = hash;\n    this.buffer = \"\";\n  }\n\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n\n        if (this.buffer.length > BULK_SIZE) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n      }\n\n      var digestResult = this.hash.digest(encoding);\n      return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n    }\n  }]);\n\n  return BulkUpdateDecorator;\n}();\n/* istanbul ignore next */\n\n\nvar DebugHash =\n/*#__PURE__*/\nfunction () {\n  function DebugHash() {\n    _classCallCheck(this, DebugHash);\n\n    this.string = \"\";\n  }\n\n  _createClass(DebugHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n      this.string += data;\n      return this;\n    }\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      return this.string.replace(/[^a-z0-9]+/gi, function (m) {\n        return Buffer.from(m).toString(\"hex\");\n      });\n    }\n  }]);\n\n  return DebugHash;\n}();\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\n\n\nmodule.exports = function (algorithm) {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}