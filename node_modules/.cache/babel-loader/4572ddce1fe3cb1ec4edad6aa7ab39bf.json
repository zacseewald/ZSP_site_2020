{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Stats = require(\"./Stats\");\n\nvar Watching =\n/*#__PURE__*/\nfunction () {\n  function Watching(compiler, watchOptions, handler) {\n    var _this = this;\n\n    _classCallCheck(this, Watching);\n\n    this.startTime = null;\n    this.invalid = false;\n    this.handler = handler;\n    this.callbacks = [];\n    this.closed = false;\n\n    if (typeof watchOptions === \"number\") {\n      this.watchOptions = {\n        aggregateTimeout: watchOptions\n      };\n    } else if (watchOptions && typeof watchOptions === \"object\") {\n      this.watchOptions = Object.assign({}, watchOptions);\n    } else {\n      this.watchOptions = {};\n    }\n\n    this.watchOptions.aggregateTimeout = this.watchOptions.aggregateTimeout || 200;\n    this.compiler = compiler;\n    this.running = true;\n    this.compiler.readRecords(function (err) {\n      if (err) return _this._done(err);\n\n      _this._go();\n    });\n  }\n\n  _createClass(Watching, [{\n    key: \"_go\",\n    value: function _go() {\n      var _this2 = this;\n\n      this.startTime = Date.now();\n      this.running = true;\n      this.invalid = false;\n      this.compiler.hooks.watchRun.callAsync(this.compiler, function (err) {\n        if (err) return _this2._done(err);\n\n        var onCompiled = function onCompiled(err, compilation) {\n          if (err) return _this2._done(err);\n          if (_this2.invalid) return _this2._done();\n\n          if (_this2.compiler.hooks.shouldEmit.call(compilation) === false) {\n            return _this2._done(null, compilation);\n          }\n\n          _this2.compiler.emitAssets(compilation, function (err) {\n            if (err) return _this2._done(err);\n            if (_this2.invalid) return _this2._done();\n\n            _this2.compiler.emitRecords(function (err) {\n              if (err) return _this2._done(err);\n\n              if (compilation.hooks.needAdditionalPass.call()) {\n                compilation.needAdditionalPass = true;\n                var stats = new Stats(compilation);\n                stats.startTime = _this2.startTime;\n                stats.endTime = Date.now();\n\n                _this2.compiler.hooks.done.callAsync(stats, function (err) {\n                  if (err) return _this2._done(err);\n\n                  _this2.compiler.hooks.additionalPass.callAsync(function (err) {\n                    if (err) return _this2._done(err);\n\n                    _this2.compiler.compile(onCompiled);\n                  });\n                });\n\n                return;\n              }\n\n              return _this2._done(null, compilation);\n            });\n          });\n        };\n\n        _this2.compiler.compile(onCompiled);\n      });\n    }\n  }, {\n    key: \"_getStats\",\n    value: function _getStats(compilation) {\n      var stats = new Stats(compilation);\n      stats.startTime = this.startTime;\n      stats.endTime = Date.now();\n      return stats;\n    }\n  }, {\n    key: \"_done\",\n    value: function _done(err, compilation) {\n      var _this3 = this;\n\n      this.running = false;\n      if (this.invalid) return this._go();\n      var stats = compilation ? this._getStats(compilation) : null;\n\n      if (err) {\n        this.compiler.hooks.failed.call(err);\n        this.handler(err, stats);\n        return;\n      }\n\n      this.compiler.hooks.done.callAsync(stats, function () {\n        _this3.handler(null, stats);\n\n        if (!_this3.closed) {\n          _this3.watch(Array.from(compilation.fileDependencies), Array.from(compilation.contextDependencies), Array.from(compilation.missingDependencies));\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this3.callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var cb = _step.value;\n            cb();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        _this3.callbacks.length = 0;\n      });\n    }\n  }, {\n    key: \"watch\",\n    value: function watch(files, dirs, missing) {\n      var _this4 = this;\n\n      this.pausedWatcher = null;\n      this.watcher = this.compiler.watchFileSystem.watch(files, dirs, missing, this.startTime, this.watchOptions, function (err, filesModified, contextModified, missingModified, fileTimestamps, contextTimestamps, removedFiles) {\n        _this4.pausedWatcher = _this4.watcher;\n        _this4.watcher = null;\n\n        if (err) {\n          return _this4.handler(err);\n        }\n\n        _this4.compiler.fileTimestamps = fileTimestamps;\n        _this4.compiler.contextTimestamps = contextTimestamps;\n        _this4.compiler.removedFiles = removedFiles;\n\n        _this4._invalidate();\n      }, function (fileName, changeTime) {\n        _this4.compiler.hooks.invalid.call(fileName, changeTime);\n      });\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(callback) {\n      if (callback) {\n        this.callbacks.push(callback);\n      }\n\n      if (this.watcher) {\n        this.compiler.fileTimestamps = this.watcher.getFileTimestamps();\n        this.compiler.contextTimestamps = this.watcher.getContextTimestamps();\n      }\n\n      return this._invalidate();\n    }\n  }, {\n    key: \"_invalidate\",\n    value: function _invalidate() {\n      if (this.watcher) {\n        this.pausedWatcher = this.watcher;\n        this.watcher.pause();\n        this.watcher = null;\n      }\n\n      if (this.running) {\n        this.invalid = true;\n        return false;\n      } else {\n        this._go();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this5 = this;\n\n      var finalCallback = function finalCallback() {\n        _this5.compiler.hooks.watchClose.call();\n\n        _this5.compiler.running = false;\n        _this5.compiler.watchMode = false;\n        if (callback !== undefined) callback();\n      };\n\n      this.closed = true;\n\n      if (this.watcher) {\n        this.watcher.close();\n        this.watcher = null;\n      }\n\n      if (this.pausedWatcher) {\n        this.pausedWatcher.close();\n        this.pausedWatcher = null;\n      }\n\n      if (this.running) {\n        this.invalid = true;\n        this._done = finalCallback;\n      } else {\n        finalCallback();\n      }\n    }\n  }]);\n\n  return Watching;\n}();\n\nmodule.exports = Watching;","map":null,"metadata":{},"sourceType":"script"}