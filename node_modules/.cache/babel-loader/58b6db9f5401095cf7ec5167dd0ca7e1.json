{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nvar FetchCompileWasmTemplatePlugin =\n/*#__PURE__*/\nfunction () {\n  function FetchCompileWasmTemplatePlugin(options) {\n    _classCallCheck(this, FetchCompileWasmTemplatePlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(FetchCompileWasmTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"FetchCompileWasmTemplatePlugin\", function (compilation) {\n        var mainTemplate = compilation.mainTemplate;\n\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return \"fetch(\".concat(mainTemplate.requireFn, \".p + \").concat(path, \")\");\n        };\n\n        var plugin = new WasmMainTemplatePlugin(Object.assign({\n          generateLoadBinaryCode: generateLoadBinaryCode,\n          supportsStreaming: true\n        }, _this.options));\n        plugin.apply(mainTemplate);\n      });\n    }\n  }]);\n\n  return FetchCompileWasmTemplatePlugin;\n}();\n\nmodule.exports = FetchCompileWasmTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}