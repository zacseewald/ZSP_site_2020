{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Queue = require(\"./util/Queue\");\n\nvar addToSet = function addToSet(a, b) {\n  var changed = false;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n\n      if (!a.has(item)) {\n        a.add(item);\n        changed = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return changed;\n};\n\nvar FlagDependencyExportsPlugin =\n/*#__PURE__*/\nfunction () {\n  function FlagDependencyExportsPlugin() {\n    _classCallCheck(this, FlagDependencyExportsPlugin);\n  }\n\n  _createClass(FlagDependencyExportsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagDependencyExportsPlugin\", function (compilation) {\n        compilation.hooks.finishModules.tap(\"FlagDependencyExportsPlugin\", function (modules) {\n          var dependencies = new Map();\n          var queue = new Queue();\n          var module;\n          var moduleWithExports;\n          var moduleProvidedExports;\n          var providedExportsAreTemporary;\n\n          var processDependenciesBlock = function processDependenciesBlock(depBlock) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = depBlock.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var dep = _step2.value;\n                if (processDependency(dep)) return true;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = depBlock.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var variable = _step3.value;\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                  for (var _iterator5 = variable.dependencies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var _dep = _step5.value;\n                    if (processDependency(_dep)) return true;\n                  }\n                } catch (err) {\n                  _didIteratorError5 = true;\n                  _iteratorError5 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                      _iterator5.return();\n                    }\n                  } finally {\n                    if (_didIteratorError5) {\n                      throw _iteratorError5;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = depBlock.blocks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var block = _step4.value;\n                if (processDependenciesBlock(block)) return true;\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n\n            return false;\n          };\n\n          var processDependency = function processDependency(dep) {\n            var exportDesc = dep.getExports && dep.getExports();\n            if (!exportDesc) return;\n            moduleWithExports = true;\n            var exports = exportDesc.exports; // break early if it's only in the worst state\n\n            if (module.buildMeta.providedExports === true) {\n              return true;\n            } // break if it should move to the worst state\n\n\n            if (exports === true) {\n              module.buildMeta.providedExports = true;\n              notifyDependencies();\n              return true;\n            } // merge in new exports\n\n\n            if (Array.isArray(exports)) {\n              if (addToSet(moduleProvidedExports, exports)) {\n                notifyDependencies();\n              }\n            } // store dependencies\n\n\n            var exportDeps = exportDesc.dependencies;\n\n            if (exportDeps) {\n              providedExportsAreTemporary = true;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = exportDeps[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var exportDependency = _step6.value;\n                  // add dependency for this module\n                  var set = dependencies.get(exportDependency);\n\n                  if (set === undefined) {\n                    dependencies.set(exportDependency, new Set([module]));\n                  } else {\n                    set.add(module);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n            }\n\n            return false;\n          };\n\n          var notifyDependencies = function notifyDependencies() {\n            var deps = dependencies.get(module);\n\n            if (deps !== undefined) {\n              var _iteratorNormalCompletion7 = true;\n              var _didIteratorError7 = false;\n              var _iteratorError7 = undefined;\n\n              try {\n                for (var _iterator7 = deps[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                  var dep = _step7.value;\n                  queue.enqueue(dep);\n                }\n              } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                    _iterator7.return();\n                  }\n                } finally {\n                  if (_didIteratorError7) {\n                    throw _iteratorError7;\n                  }\n                }\n              }\n            }\n          }; // Start with all modules without provided exports\n\n\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = modules[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _module = _step8.value;\n\n              if (_module.buildInfo.temporaryProvidedExports) {\n                // Clear exports when they are temporary\n                // and recreate them\n                _module.buildMeta.providedExports = null;\n                queue.enqueue(_module);\n              } else if (!_module.buildMeta.providedExports) {\n                queue.enqueue(_module);\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n\n          while (queue.length > 0) {\n            module = queue.dequeue();\n\n            if (module.buildMeta.providedExports !== true) {\n              moduleWithExports = module.buildMeta && module.buildMeta.exportsType;\n              moduleProvidedExports = Array.isArray(module.buildMeta.providedExports) ? new Set(module.buildMeta.providedExports) : new Set();\n              providedExportsAreTemporary = false;\n              processDependenciesBlock(module);\n              module.buildInfo.temporaryProvidedExports = providedExportsAreTemporary;\n\n              if (!moduleWithExports) {\n                module.buildMeta.providedExports = true;\n                notifyDependencies();\n              } else if (module.buildMeta.providedExports !== true) {\n                module.buildMeta.providedExports = Array.from(moduleProvidedExports);\n              }\n            }\n          }\n        });\n        var providedExportsCache = new WeakMap();\n        compilation.hooks.rebuildModule.tap(\"FlagDependencyExportsPlugin\", function (module) {\n          providedExportsCache.set(module, module.buildMeta.providedExports);\n        });\n        compilation.hooks.finishRebuildingModule.tap(\"FlagDependencyExportsPlugin\", function (module) {\n          module.buildMeta.providedExports = providedExportsCache.get(module);\n        });\n      });\n    }\n  }]);\n\n  return FlagDependencyExportsPlugin;\n}();\n\nmodule.exports = FlagDependencyExportsPlugin;","map":null,"metadata":{},"sourceType":"script"}