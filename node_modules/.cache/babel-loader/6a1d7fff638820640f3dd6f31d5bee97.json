{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Gajus Kuizinas @gajus\n*/\n\"use strict\";\n\nvar Ajv = require(\"ajv\");\n\nvar ajv = new Ajv({\n  errorDataPath: \"configuration\",\n  allErrors: true,\n  verbose: true\n});\n\nrequire(\"ajv-keywords\")(ajv, [\"instanceof\"]);\n\nrequire(\"../schemas/ajv.absolutePath\")(ajv);\n\nvar validateSchema = function validateSchema(schema, options) {\n  if (Array.isArray(options)) {\n    var errors = options.map(function (options) {\n      return validateObject(schema, options);\n    });\n    errors.forEach(function (list, idx) {\n      var applyPrefix = function applyPrefix(err) {\n        err.dataPath = \"[\".concat(idx, \"]\").concat(err.dataPath);\n\n        if (err.children) {\n          err.children.forEach(applyPrefix);\n        }\n      };\n\n      list.forEach(applyPrefix);\n    });\n    return errors.reduce(function (arr, items) {\n      return arr.concat(items);\n    }, []);\n  } else {\n    return validateObject(schema, options);\n  }\n};\n\nvar validateObject = function validateObject(schema, options) {\n  var validate = ajv.compile(schema);\n  var valid = validate(options);\n  return valid ? [] : filterErrors(validate.errors);\n};\n\nvar filterErrors = function filterErrors(errors) {\n  var newErrors = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var err = _step.value;\n      var dataPath = err.dataPath;\n      var children = [];\n      newErrors = newErrors.filter(function (oldError) {\n        if (oldError.dataPath.includes(dataPath)) {\n          if (oldError.children) {\n            children = children.concat(oldError.children.slice(0));\n          }\n\n          oldError.children = undefined;\n          children.push(oldError);\n          return false;\n        }\n\n        return true;\n      });\n\n      if (children.length) {\n        err.children = children;\n      }\n\n      newErrors.push(err);\n    };\n\n    for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return newErrors;\n};\n\nmodule.exports = validateSchema;","map":null,"metadata":{},"sourceType":"script"}