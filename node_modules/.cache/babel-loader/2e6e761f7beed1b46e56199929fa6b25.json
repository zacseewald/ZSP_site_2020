{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\n\nvar CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\n\nvar RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nvar LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar CommonJsRequireDependencyParserPlugin =\n/*#__PURE__*/\nfunction () {\n  function CommonJsRequireDependencyParserPlugin(options) {\n    _classCallCheck(this, CommonJsRequireDependencyParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(CommonJsRequireDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var options = this.options;\n\n      var processItem = function processItem(expr, param) {\n        if (param.isString()) {\n          var dep = new CommonJsRequireDependency(param.string, param.range);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(dep);\n          return true;\n        }\n      };\n\n      var processContext = function processContext(expr, param) {\n        var dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options, {}, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      };\n\n      parser.hooks.expression.for(\"require.cache\").tap(\"CommonJsRequireDependencyParserPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, \"__webpack_require__.c\"));\n      parser.hooks.expression.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", function (expr) {\n        var dep = new CommonJsRequireContextDependency({\n          request: options.unknownContextRequest,\n          recursive: options.unknownContextRecursive,\n          regExp: options.unknownContextRegExp,\n          mode: \"sync\"\n        }, expr.range);\n        dep.critical = options.unknownContextCritical && \"require function is used in a way in which dependencies cannot be statically extracted\";\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n\n      var createHandler = function createHandler(callNew) {\n        return function (expr) {\n          if (expr.arguments.length !== 1) return;\n          var localModule;\n          var param = parser.evaluateExpression(expr.arguments[0]);\n\n          if (param.isConditional()) {\n            var isExpression = false;\n            var prevLength = parser.state.current.dependencies.length;\n            var dep = new RequireHeaderDependency(expr.callee.range);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = param.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var p = _step.value;\n                var result = processItem(expr, p);\n\n                if (result === undefined) {\n                  isExpression = true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            if (isExpression) {\n              parser.state.current.dependencies.length = prevLength;\n            } else {\n              return true;\n            }\n          }\n\n          if (param.isString() && (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string))) {\n            var _dep = new LocalModuleDependency(localModule, expr.range, callNew);\n\n            _dep.loc = expr.loc;\n            parser.state.current.addDependency(_dep);\n            return true;\n          } else {\n            var _result = processItem(expr, param);\n\n            if (_result === undefined) {\n              processContext(expr, param);\n            } else {\n              var _dep2 = new RequireHeaderDependency(expr.callee.range);\n\n              _dep2.loc = expr.loc;\n              parser.state.current.addDependency(_dep2);\n            }\n\n            return true;\n          }\n        };\n      };\n\n      parser.hooks.call.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n      parser.hooks.new.for(\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n      parser.hooks.call.for(\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n      parser.hooks.new.for(\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n    }\n  }]);\n\n  return CommonJsRequireDependencyParserPlugin;\n}();\n\nmodule.exports = CommonJsRequireDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"script"}