{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar identifierUtils = require(\"./util/identifier\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\n\nvar RecordIdsPlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Object} options Options object\n   * @param {boolean=} options.portableIds true, when ids need to be portable\n   */\n  function RecordIdsPlugin(options) {\n    _classCallCheck(this, RecordIdsPlugin);\n\n    this.options = options || {};\n  }\n  /**\n   * @param {Compiler} compiler the Compiler\n   * @returns {void}\n   */\n\n\n  _createClass(RecordIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var portableIds = this.options.portableIds;\n      compiler.hooks.compilation.tap(\"RecordIdsPlugin\", function (compilation) {\n        compilation.hooks.recordModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) records.modules = {};\n          if (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n          if (!records.modules.usedIds) records.modules.usedIds = {};\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n              if (typeof _module.id !== \"number\") continue;\n              var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module.identifier(), compilation.cache) : _module.identifier();\n              records.modules.byIdentifier[identifier] = _module.id;\n              records.modules.usedIds[_module.id] = _module.id;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n        compilation.hooks.reviveModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) return;\n\n          if (records.modules.byIdentifier) {\n            /** @type {Set<number>} */\n            var usedIds = new Set();\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var _module2 = _step2.value;\n                if (_module2.id !== null) continue;\n                var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module2.identifier(), compilation.cache) : _module2.identifier();\n                var id = records.modules.byIdentifier[identifier];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                _module2.id = id;\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n\n          if (Array.isArray(records.modules.usedIds)) {\n            compilation.usedModuleIds = new Set(records.modules.usedIds);\n          }\n        });\n        /**\n         * @param {Module} module the module\n         * @returns {string} the (portable) identifier\n         */\n\n        var getModuleIdentifier = function getModuleIdentifier(module) {\n          if (portableIds) {\n            return identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache);\n          }\n\n          return module.identifier();\n        };\n        /**\n         * @param {Chunk} chunk the chunk\n         * @returns {string[]} sources of the chunk\n         */\n\n\n        var getChunkSources = function getChunkSources(chunk) {\n          /** @type {string[]} */\n          var sources = [];\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = chunk.groupsIterable[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var chunkGroup = _step3.value;\n              var index = chunkGroup.chunks.indexOf(chunk);\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = chunkGroup.origins[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var origin = _step4.value;\n\n                  if (origin.module) {\n                    if (origin.request) {\n                      sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.request));\n                    } else if (typeof origin.loc === \"string\") {\n                      sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.loc));\n                    } else if (origin.loc && typeof origin.loc === \"object\" && origin.loc.start) {\n                      sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(JSON.stringify(origin.loc.start)));\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          return sources;\n        };\n\n        compilation.hooks.recordChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) records.chunks = {};\n          if (!records.chunks.byName) records.chunks.byName = {};\n          if (!records.chunks.bySource) records.chunks.bySource = {};\n          /** @type {Set<number>} */\n\n          var usedIds = new Set();\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = chunks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var chunk = _step5.value;\n              if (typeof chunk.id !== \"number\") continue;\n              var name = chunk.name;\n              if (name) records.chunks.byName[name] = chunk.id;\n              var sources = getChunkSources(chunk);\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = sources[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var source = _step6.value;\n                  records.chunks.bySource[source] = chunk.id;\n                }\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              usedIds.add(chunk.id);\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          records.chunks.usedIds = Array.from(usedIds).sort();\n        });\n        compilation.hooks.reviveChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) return;\n          /** @type {Set<number>} */\n\n          var usedIds = new Set();\n\n          if (records.chunks.byName) {\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n              for (var _iterator7 = chunks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var chunk = _step7.value;\n                if (chunk.id !== null) continue;\n                if (!chunk.name) continue;\n                var id = records.chunks.byName[chunk.name];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                chunk.id = id;\n              }\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                  _iterator7.return();\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n          }\n\n          if (records.chunks.bySource) {\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = chunks[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var _chunk = _step8.value;\n                var sources = getChunkSources(_chunk);\n                var _iteratorNormalCompletion9 = true;\n                var _didIteratorError9 = false;\n                var _iteratorError9 = undefined;\n\n                try {\n                  for (var _iterator9 = sources[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                    var source = _step9.value;\n                    var _id = records.chunks.bySource[source];\n                    if (_id === undefined) continue;\n                    if (usedIds.has(_id)) continue;\n                    usedIds.add(_id);\n                    _chunk.id = _id;\n                    break;\n                  }\n                } catch (err) {\n                  _didIteratorError9 = true;\n                  _iteratorError9 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                      _iterator9.return();\n                    }\n                  } finally {\n                    if (_didIteratorError9) {\n                      throw _iteratorError9;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                  _iterator8.return();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n          }\n\n          if (Array.isArray(records.chunks.usedIds)) {\n            compilation.usedChunkIds = new Set(records.chunks.usedIds);\n          }\n        });\n      });\n    }\n  }]);\n\n  return RecordIdsPlugin;\n}();\n\nmodule.exports = RecordIdsPlugin;","map":null,"metadata":{},"sourceType":"script"}