{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar createHash = require(\"./util/createHash\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\n\nvar HashedModuleIdsPlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  function HashedModuleIdsPlugin(options) {\n    _classCallCheck(this, HashedModuleIdsPlugin);\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n    /** @type {HashedModuleIdsPluginOptions} */\n\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n\n  _createClass(HashedModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", function (compilation) {\n        var usedIds = new Set();\n        compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", function (modules) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n\n              if (_module.id === null && _module.libIdent) {\n                var id = _module.libIdent({\n                  context: _this.options.context || compiler.options.context\n                });\n\n                var hash = createHash(options.hashFunction);\n                hash.update(id);\n                var hashId = hash.digest(options.hashDigest);\n                var len = options.hashDigestLength;\n\n                while (usedIds.has(hashId.substr(0, len))) {\n                  len++;\n                }\n\n                _module.id = hashId.substr(0, len);\n                usedIds.add(_module.id);\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return HashedModuleIdsPlugin;\n}();\n\nmodule.exports = HashedModuleIdsPlugin;","map":null,"metadata":{},"sourceType":"script"}