{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"tapable\"),\n    SyncBailHook = _require.SyncBailHook;\n\nvar _require2 = require(\"webpack-sources\"),\n    RawSource = _require2.RawSource;\n\nvar Template = require(\"./Template\");\n\nvar ModuleHotAcceptDependency = require(\"./dependencies/ModuleHotAcceptDependency\");\n\nvar ModuleHotDeclineDependency = require(\"./dependencies/ModuleHotDeclineDependency\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function HotModuleReplacementPlugin(options) {\n    _classCallCheck(this, HotModuleReplacementPlugin);\n\n    this.options = options || {};\n    this.multiStep = this.options.multiStep;\n    this.fullBuildTimeout = this.options.fullBuildTimeout || 200;\n    this.requestTimeout = this.options.requestTimeout || 10000;\n  }\n\n  _createClass(HotModuleReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var multiStep = this.multiStep;\n      var fullBuildTimeout = this.fullBuildTimeout;\n      var requestTimeout = this.requestTimeout;\n      var hotUpdateChunkFilename = compiler.options.output.hotUpdateChunkFilename;\n      var hotUpdateMainFilename = compiler.options.output.hotUpdateMainFilename;\n      compiler.hooks.additionalPass.tapAsync(\"HotModuleReplacementPlugin\", function (callback) {\n        if (multiStep) return setTimeout(callback, fullBuildTimeout);\n        return callback();\n      });\n\n      var addParserPlugins = function addParserPlugins(parser, parserOptions) {\n        parser.hooks.expression.for(\"__webpack_hash__\").tap(\"HotModuleReplacementPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, \"__webpack_require__.h()\"));\n        parser.hooks.evaluateTypeof.for(\"__webpack_hash__\").tap(\"HotModuleReplacementPlugin\", ParserHelpers.evaluateToString(\"string\"));\n        parser.hooks.evaluateIdentifier.for(\"module.hot\").tap({\n          name: \"HotModuleReplacementPlugin\",\n          before: \"NodeStuffPlugin\"\n        }, function (expr) {\n          return ParserHelpers.evaluateToIdentifier(\"module.hot\", !!parser.state.compilation.hotUpdateChunkTemplate)(expr);\n        }); // TODO webpack 5: refactor this, no custom hooks\n\n        if (!parser.hooks.hotAcceptCallback) {\n          parser.hooks.hotAcceptCallback = new SyncBailHook([\"expression\", \"requests\"]);\n        }\n\n        if (!parser.hooks.hotAcceptWithoutCallback) {\n          parser.hooks.hotAcceptWithoutCallback = new SyncBailHook([\"expression\", \"requests\"]);\n        }\n\n        parser.hooks.call.for(\"module.hot.accept\").tap(\"HotModuleReplacementPlugin\", function (expr) {\n          if (!parser.state.compilation.hotUpdateChunkTemplate) {\n            return false;\n          }\n\n          if (expr.arguments.length >= 1) {\n            var arg = parser.evaluateExpression(expr.arguments[0]);\n            var params = [];\n            var requests = [];\n\n            if (arg.isString()) {\n              params = [arg];\n            } else if (arg.isArray()) {\n              params = arg.items.filter(function (param) {\n                return param.isString();\n              });\n            }\n\n            if (params.length > 0) {\n              params.forEach(function (param, idx) {\n                var request = param.string;\n                var dep = new ModuleHotAcceptDependency(request, param.range);\n                dep.optional = true;\n                dep.loc = Object.create(expr.loc);\n                dep.loc.index = idx;\n                parser.state.module.addDependency(dep);\n                requests.push(request);\n              });\n\n              if (expr.arguments.length > 1) {\n                parser.hooks.hotAcceptCallback.call(expr.arguments[1], requests);\n                parser.walkExpression(expr.arguments[1]); // other args are ignored\n\n                return true;\n              } else {\n                parser.hooks.hotAcceptWithoutCallback.call(expr, requests);\n                return true;\n              }\n            }\n          }\n        });\n        parser.hooks.call.for(\"module.hot.decline\").tap(\"HotModuleReplacementPlugin\", function (expr) {\n          if (!parser.state.compilation.hotUpdateChunkTemplate) {\n            return false;\n          }\n\n          if (expr.arguments.length === 1) {\n            var arg = parser.evaluateExpression(expr.arguments[0]);\n            var params = [];\n\n            if (arg.isString()) {\n              params = [arg];\n            } else if (arg.isArray()) {\n              params = arg.items.filter(function (param) {\n                return param.isString();\n              });\n            }\n\n            params.forEach(function (param, idx) {\n              var dep = new ModuleHotDeclineDependency(param.string, param.range);\n              dep.optional = true;\n              dep.loc = Object.create(expr.loc);\n              dep.loc.index = idx;\n              parser.state.module.addDependency(dep);\n            });\n          }\n        });\n        parser.hooks.expression.for(\"module.hot\").tap(\"HotModuleReplacementPlugin\", ParserHelpers.skipTraversal);\n      };\n\n      compiler.hooks.compilation.tap(\"HotModuleReplacementPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var hotUpdateChunkTemplate = compilation.hotUpdateChunkTemplate;\n        if (!hotUpdateChunkTemplate) return;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        compilation.dependencyFactories.set(ModuleHotAcceptDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ModuleHotAcceptDependency, new ModuleHotAcceptDependency.Template());\n        compilation.dependencyFactories.set(ModuleHotDeclineDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(ModuleHotDeclineDependency, new ModuleHotDeclineDependency.Template());\n        compilation.hooks.record.tap(\"HotModuleReplacementPlugin\", function (compilation, records) {\n          if (records.hash === compilation.hash) return;\n          records.hash = compilation.hash;\n          records.moduleHashs = {};\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = compilation.modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _module = _step.value;\n\n              var identifier = _module.identifier();\n\n              records.moduleHashs[identifier] = _module.hash;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          records.chunkHashs = {};\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = compilation.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var chunk = _step2.value;\n              records.chunkHashs[chunk.id] = chunk.hash;\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          records.chunkModuleIds = {};\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = compilation.chunks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _chunk = _step3.value;\n              records.chunkModuleIds[_chunk.id] = Array.from(_chunk.modulesIterable, function (m) {\n                return m.id;\n              });\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        });\n        var initialPass = false;\n        var recompilation = false;\n        compilation.hooks.afterHash.tap(\"HotModuleReplacementPlugin\", function () {\n          var records = compilation.records;\n\n          if (!records) {\n            initialPass = true;\n            return;\n          }\n\n          if (!records.hash) initialPass = true;\n          var preHash = records.preHash || \"x\";\n          var prepreHash = records.prepreHash || \"x\";\n\n          if (preHash === compilation.hash) {\n            recompilation = true;\n            compilation.modifyHash(prepreHash);\n            return;\n          }\n\n          records.prepreHash = records.hash || \"x\";\n          records.preHash = compilation.hash;\n          compilation.modifyHash(records.prepreHash);\n        });\n        compilation.hooks.shouldGenerateChunkAssets.tap(\"HotModuleReplacementPlugin\", function () {\n          if (multiStep && !recompilation && !initialPass) return false;\n        });\n        compilation.hooks.needAdditionalPass.tap(\"HotModuleReplacementPlugin\", function () {\n          if (multiStep && !recompilation && !initialPass) return true;\n        });\n        compilation.hooks.additionalChunkAssets.tap(\"HotModuleReplacementPlugin\", function () {\n          var records = compilation.records;\n          if (records.hash === compilation.hash) return;\n          if (!records.moduleHashs || !records.chunkHashs || !records.chunkModuleIds) return;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = compilation.modules[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var _module2 = _step4.value;\n\n              var identifier = _module2.identifier();\n\n              var hash = _module2.hash;\n              _module2.hotUpdate = records.moduleHashs[identifier] !== hash;\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          var hotUpdateMainContent = {\n            h: compilation.hash,\n            c: {}\n          };\n\n          var _arr = Object.keys(records.chunkHashs);\n\n          var _loop = function _loop() {\n            var key = _arr[_i];\n            var chunkId = isNaN(+key) ? key : +key;\n            var currentChunk = compilation.chunks.find(function (chunk) {\n              return \"\".concat(chunk.id) === key;\n            });\n\n            if (currentChunk) {\n              var newModules = currentChunk.getModules().filter(function (module) {\n                return module.hotUpdate;\n              });\n              var allModules = new Set();\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = currentChunk.modulesIterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var _module3 = _step5.value;\n                  allModules.add(_module3.id);\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n\n              var removedModules = records.chunkModuleIds[chunkId].filter(function (id) {\n                return !allModules.has(id);\n              });\n\n              if (newModules.length > 0 || removedModules.length > 0) {\n                var _source = hotUpdateChunkTemplate.render(chunkId, newModules, removedModules, compilation.hash, compilation.moduleTemplates.javascript, compilation.dependencyTemplates);\n\n                var _filename = compilation.getPath(hotUpdateChunkFilename, {\n                  hash: records.hash,\n                  chunk: currentChunk\n                });\n\n                compilation.additionalChunkAssets.push(_filename);\n                compilation.assets[_filename] = _source;\n                hotUpdateMainContent.c[chunkId] = true;\n                currentChunk.files.push(_filename);\n                compilation.hooks.chunkAsset.call(currentChunk, _filename);\n              }\n            } else {\n              hotUpdateMainContent.c[chunkId] = false;\n            }\n          };\n\n          for (var _i = 0; _i < _arr.length; _i++) {\n            _loop();\n          }\n\n          var source = new RawSource(JSON.stringify(hotUpdateMainContent));\n          var filename = compilation.getPath(hotUpdateMainFilename, {\n            hash: records.hash\n          });\n          compilation.assets[filename] = source;\n        });\n        var mainTemplate = compilation.mainTemplate;\n        mainTemplate.hooks.hash.tap(\"HotModuleReplacementPlugin\", function (hash) {\n          hash.update(\"HotMainTemplateDecorator\");\n        });\n        mainTemplate.hooks.moduleRequire.tap(\"HotModuleReplacementPlugin\", function (_, chunk, hash, varModuleId) {\n          return \"hotCreateRequire(\".concat(varModuleId, \")\");\n        });\n        mainTemplate.hooks.requireExtensions.tap(\"HotModuleReplacementPlugin\", function (source) {\n          var buf = [source];\n          buf.push(\"\");\n          buf.push(\"// __webpack_hash__\");\n          buf.push(mainTemplate.requireFn + \".h = function() { return hotCurrentHash; };\");\n          return Template.asString(buf);\n        });\n\n        var needChunkLoadingCode = function needChunkLoadingCode(chunk) {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = chunk.groupsIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var chunkGroup = _step6.value;\n              if (chunkGroup.chunks.length > 1) return true;\n              if (chunkGroup.getNumberOfChildren() > 0) return true;\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n\n          return false;\n        };\n\n        mainTemplate.hooks.bootstrap.tap(\"HotModuleReplacementPlugin\", function (source, chunk, hash) {\n          source = mainTemplate.hooks.hotBootstrap.call(source, chunk, hash);\n          return Template.asString([source, \"\", hotInitCode.replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hash\\$/g, JSON.stringify(hash)).replace(/\\$requestTimeout\\$/g, requestTimeout).replace(/\\/\\*foreachInstalledChunks\\*\\//g, needChunkLoadingCode(chunk) ? \"for(var chunkId in installedChunks)\" : \"var chunkId = \".concat(JSON.stringify(chunk.id), \";\"))]);\n        });\n        mainTemplate.hooks.globalHash.tap(\"HotModuleReplacementPlugin\", function () {\n          return true;\n        });\n        mainTemplate.hooks.currentHash.tap(\"HotModuleReplacementPlugin\", function (_, length) {\n          if (isFinite(length)) {\n            return \"hotCurrentHash.substr(0, \".concat(length, \")\");\n          } else {\n            return \"hotCurrentHash\";\n          }\n        });\n        mainTemplate.hooks.moduleObj.tap(\"HotModuleReplacementPlugin\", function (source, chunk, hash, varModuleId) {\n          return Template.asString([\"\".concat(source, \",\"), \"hot: hotCreateModule(\".concat(varModuleId, \"),\"), \"parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),\", \"children: []\"]);\n        }); // TODO add HMR support for javascript/esm\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"HotModuleReplacementPlugin\", addParserPlugins);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"HotModuleReplacementPlugin\", addParserPlugins);\n        compilation.hooks.normalModuleLoader.tap(\"HotModuleReplacementPlugin\", function (context) {\n          context.hot = true;\n        });\n      });\n    }\n  }]);\n\n  return HotModuleReplacementPlugin;\n}();\n\nvar hotInitCode = Template.getFunctionContent(require(\"./HotModuleReplacement.runtime\"));","map":null,"metadata":{},"sourceType":"script"}