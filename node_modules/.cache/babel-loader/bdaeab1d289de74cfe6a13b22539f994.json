{"ast":null,"code":"// A passthrough read/write stream that sets its properties\n// based on a header, extendedHeader, and globalHeader\n//\n// Can be either a file system object of some sort, or\n// a pax/ustar metadata entry.\nmodule.exports = Entry;\n\nvar TarHeader = require(\"./header.js\"),\n    tar = require(\"../tar\"),\n    assert = require(\"assert\").ok,\n    Stream = require(\"stream\").Stream,\n    inherits = require(\"inherits\"),\n    fstream = require(\"fstream\").Abstract;\n\nfunction Entry(header, extended, global) {\n  Stream.call(this);\n  this.readable = true;\n  this.writable = true;\n  this._needDrain = false;\n  this._paused = false;\n  this._reading = false;\n  this._ending = false;\n  this._ended = false;\n  this._remaining = 0;\n  this._abort = false;\n  this._queue = [];\n  this._index = 0;\n  this._queueLen = 0;\n  this._read = this._read.bind(this);\n  this.props = {};\n  this._header = header;\n  this._extended = extended || {}; // globals can change throughout the course of\n  // a file parse operation.  Freeze it at its current state.\n\n  this._global = {};\n  var me = this;\n  Object.keys(global || {}).forEach(function (g) {\n    me._global[g] = global[g];\n  });\n\n  this._setProps();\n}\n\ninherits(Entry, Stream);\n\nEntry.prototype.write = function (c) {\n  if (this._ending) this.error(\"write() after end()\", null, true);\n\n  if (this._remaining === 0) {\n    this.error(\"invalid bytes past eof\");\n  } // often we'll get a bunch of \\0 at the end of the last write,\n  // since chunks will always be 512 bytes when reading a tarball.\n\n\n  if (c.length > this._remaining) {\n    c = c.slice(0, this._remaining);\n  }\n\n  this._remaining -= c.length; // put it on the stack.\n\n  var ql = this._queueLen;\n\n  this._queue.push(c);\n\n  this._queueLen++;\n\n  this._read(); // either paused, or buffered\n\n\n  if (this._paused || ql > 0) {\n    this._needDrain = true;\n    return false;\n  }\n\n  return true;\n};\n\nEntry.prototype.end = function (c) {\n  if (c) this.write(c);\n  this._ending = true;\n\n  this._read();\n};\n\nEntry.prototype.pause = function () {\n  this._paused = true;\n  this.emit(\"pause\");\n};\n\nEntry.prototype.resume = function () {\n  // console.error(\"    Tar Entry resume\", this.path)\n  this.emit(\"resume\");\n  this._paused = false;\n\n  this._read();\n\n  return this._queueLen - this._index > 1;\n}; // This is bound to the instance\n\n\nEntry.prototype._read = function () {\n  // console.error(\"    Tar Entry _read\", this.path)\n  if (this._paused || this._reading || this._ended) return; // set this flag so that event handlers don't inadvertently\n  // get multiple _read() calls running.\n\n  this._reading = true; // have any data to emit?\n\n  while (this._index < this._queueLen && !this._paused) {\n    var chunk = this._queue[this._index++];\n    this.emit(\"data\", chunk);\n  } // check if we're drained\n\n\n  if (this._index >= this._queueLen) {\n    this._queue.length = this._queueLen = this._index = 0;\n\n    if (this._needDrain) {\n      this._needDrain = false;\n      this.emit(\"drain\");\n    }\n\n    if (this._ending) {\n      this._ended = true;\n      this.emit(\"end\");\n    }\n  } // if the queue gets too big, then pluck off whatever we can.\n  // this should be fairly rare.\n\n\n  var mql = this._maxQueueLen;\n\n  if (this._queueLen > mql && this._index > 0) {\n    mql = Math.min(this._index, mql);\n    this._index -= mql;\n    this._queueLen -= mql;\n    this._queue = this._queue.slice(mql);\n  }\n\n  this._reading = false;\n};\n\nEntry.prototype._setProps = function () {\n  // props = extended->global->header->{}\n  var header = this._header,\n      extended = this._extended,\n      global = this._global,\n      props = this.props; // first get the values from the normal header.\n\n  var fields = tar.fields;\n\n  for (var f = 0; fields[f] !== null; f++) {\n    var field = fields[f],\n        val = header[field];\n    if (typeof val !== \"undefined\") props[field] = val;\n  } // next, the global header for this file.\n  // numeric values, etc, will have already been parsed.\n\n\n  ;\n  [global, extended].forEach(function (p) {\n    Object.keys(p).forEach(function (f) {\n      if (typeof p[f] !== \"undefined\") props[f] = p[f];\n    });\n  }) // no nulls allowed in path or linkpath\n  ;\n  [\"path\", \"linkpath\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = props[p].split(\"\\0\")[0];\n    }\n  }) // set date fields to be a proper date\n  ;\n  [\"mtime\", \"ctime\", \"atime\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = new Date(props[p] * 1000);\n    }\n  }); // set the type so that we know what kind of file to create\n\n  var type;\n\n  switch (tar.types[props.type]) {\n    case \"OldFile\":\n    case \"ContiguousFile\":\n      type = \"File\";\n      break;\n\n    case \"GNUDumpDir\":\n      type = \"Directory\";\n      break;\n\n    case undefined:\n      type = \"Unknown\";\n      break;\n\n    case \"Link\":\n    case \"SymbolicLink\":\n    case \"CharacterDevice\":\n    case \"BlockDevice\":\n    case \"Directory\":\n    case \"FIFO\":\n    default:\n      type = tar.types[props.type];\n  }\n\n  this.type = type;\n  this.path = props.path;\n  this.size = props.size; // size is special, since it signals when the file needs to end.\n\n  this._remaining = props.size;\n}; // the parser may not call write if _abort is true. \n// useful for skipping data from some files quickly.\n\n\nEntry.prototype.abort = function () {\n  this._abort = true;\n};\n\nEntry.prototype.warn = fstream.warn;\nEntry.prototype.error = fstream.error;","map":null,"metadata":{},"sourceType":"script"}