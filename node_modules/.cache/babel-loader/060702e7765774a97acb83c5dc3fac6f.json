{"ast":null,"code":"var semver = require('semver'),\n    url = require('url'),\n    path = require('path'),\n    log = require('npmlog') // versions where -headers.tar.gz started shipping\n,\n    headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42',\n    bitsre = /\\/win-(x86|x64)\\//,\n    bitsreV3 = /\\/win-(x86|ia32|x64)\\//; // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\n\n\nfunction processRelease(argv, gyp, defaultVersion, defaultRelease) {\n  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion,\n      versionSemver = semver.parse(version),\n      overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl,\n      isDefaultVersion,\n      isIojs,\n      name,\n      distBaseUrl,\n      baseUrl,\n      libUrl32,\n      libUrl64,\n      tarballUrl,\n      canGetHeaders;\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return {\n      version: version\n    };\n  } // flatten version into String\n\n\n  version = versionSemver.version; // defaultVersion should come from process.version so ought to be valid semver\n\n  isDefaultVersion = version === semver.parse(defaultVersion).version; // can't use process.release if we're using --target=x.y.z\n\n  if (!isDefaultVersion) defaultRelease = null;\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs'); // remove the '.' for directory naming purposes\n\n    isIojs = name === 'iojs';\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4;\n    name = isIojs ? 'iojs' : 'node';\n  } // check for the nvm.sh standard mirror env variables\n\n\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR;\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR;\n        log.warn('download', 'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use IOJS_ORG_MIRROR');\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR;\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR;\n        log.warn('download', 'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use NODEJS_ORG_MIRROR');\n      }\n    }\n  }\n\n  if (overrideDistUrl) log.verbose('download', 'using dist-url', overrideDistUrl);\n  if (overrideDistUrl) distBaseUrl = overrideDistUrl.replace(/\\/+$/, '');else distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist';\n  distBaseUrl += '/v' + version + '/'; // new style, based on process.release so we have a lot of the data we need\n\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './');\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    };\n  } // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n\n  baseUrl = distBaseUrl;\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major); // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  };\n}\n\nfunction normalizePath(p) {\n  return path.normalize(p).replace(/\\\\/g, '/');\n}\n\nfunction resolveLibUrl(name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './'),\n      hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) return url.resolve(base, 'win-' + arch + '/' + name + '.lib'); // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib');\n  } // else we have a proper url to a .lib, just make sure it's the right arch\n\n\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');\n}\n\nmodule.exports = processRelease;","map":null,"metadata":{},"sourceType":"script"}