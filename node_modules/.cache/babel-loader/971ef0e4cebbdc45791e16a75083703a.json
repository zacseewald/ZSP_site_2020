{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AggressiveMergingPlugin =\n/*#__PURE__*/\nfunction () {\n  function AggressiveMergingPlugin(options) {\n    _classCallCheck(this, AggressiveMergingPlugin);\n\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n\n    this.options = options || {};\n  }\n\n  _createClass(AggressiveMergingPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var minSizeReduce = options.minSizeReduce || 1.5;\n      compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"AggressiveMergingPlugin\", function (chunks) {\n          var combinations = [];\n          chunks.forEach(function (a, idx) {\n            if (a.canBeInitial()) return;\n\n            for (var i = 0; i < idx; i++) {\n              var b = chunks[i];\n              if (b.canBeInitial()) continue;\n              combinations.push({\n                a: a,\n                b: b,\n                improvement: undefined\n              });\n            }\n          });\n\n          for (var _i = 0; _i < combinations.length; _i++) {\n            var _pair = combinations[_i];\n\n            var a = _pair.b.size({\n              chunkOverhead: 0\n            });\n\n            var b = _pair.a.size({\n              chunkOverhead: 0\n            });\n\n            var ab = _pair.b.integratedSize(_pair.a, {\n              chunkOverhead: 0\n            });\n\n            var newSize = void 0;\n\n            if (ab === false) {\n              _pair.improvement = false;\n              return;\n            } else {\n              newSize = ab;\n            }\n\n            _pair.improvement = (a + b) / newSize;\n          }\n\n          combinations = combinations.filter(function (pair) {\n            return pair.improvement !== false;\n          });\n          combinations.sort(function (a, b) {\n            return b.improvement - a.improvement;\n          });\n          var pair = combinations[0];\n          if (!pair) return;\n          if (pair.improvement < minSizeReduce) return;\n\n          if (pair.b.integrate(pair.a, \"aggressive-merge\")) {\n            chunks.splice(chunks.indexOf(pair.a), 1);\n            return true;\n          }\n        });\n      });\n    }\n  }]);\n\n  return AggressiveMergingPlugin;\n}();\n\nmodule.exports = AggressiveMergingPlugin;","map":null,"metadata":{},"sourceType":"script"}