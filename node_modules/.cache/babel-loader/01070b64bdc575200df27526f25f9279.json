{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar OptionsApply = require(\"./OptionsApply\");\n\nvar JavascriptModulesPlugin = require(\"./JavascriptModulesPlugin\");\n\nvar JsonModulesPlugin = require(\"./JsonModulesPlugin\");\n\nvar WebAssemblyModulesPlugin = require(\"./wasm/WebAssemblyModulesPlugin\");\n\nvar LoaderTargetPlugin = require(\"./LoaderTargetPlugin\");\n\nvar FunctionModulePlugin = require(\"./FunctionModulePlugin\");\n\nvar EvalDevToolModulePlugin = require(\"./EvalDevToolModulePlugin\");\n\nvar SourceMapDevToolPlugin = require(\"./SourceMapDevToolPlugin\");\n\nvar EvalSourceMapDevToolPlugin = require(\"./EvalSourceMapDevToolPlugin\");\n\nvar EntryOptionPlugin = require(\"./EntryOptionPlugin\");\n\nvar RecordIdsPlugin = require(\"./RecordIdsPlugin\");\n\nvar APIPlugin = require(\"./APIPlugin\");\n\nvar ConstPlugin = require(\"./ConstPlugin\");\n\nvar RequireJsStuffPlugin = require(\"./RequireJsStuffPlugin\");\n\nvar NodeStuffPlugin = require(\"./NodeStuffPlugin\");\n\nvar CompatibilityPlugin = require(\"./CompatibilityPlugin\");\n\nvar TemplatedPathPlugin = require(\"./TemplatedPathPlugin\");\n\nvar WarnCaseSensitiveModulesPlugin = require(\"./WarnCaseSensitiveModulesPlugin\");\n\nvar UseStrictPlugin = require(\"./UseStrictPlugin\");\n\nvar LoaderPlugin = require(\"./dependencies/LoaderPlugin\");\n\nvar CommonJsPlugin = require(\"./dependencies/CommonJsPlugin\");\n\nvar HarmonyModulesPlugin = require(\"./dependencies/HarmonyModulesPlugin\");\n\nvar SystemPlugin = require(\"./dependencies/SystemPlugin\");\n\nvar ImportPlugin = require(\"./dependencies/ImportPlugin\");\n\nvar AMDPlugin = require(\"./dependencies/AMDPlugin\");\n\nvar RequireContextPlugin = require(\"./dependencies/RequireContextPlugin\");\n\nvar RequireEnsurePlugin = require(\"./dependencies/RequireEnsurePlugin\");\n\nvar RequireIncludePlugin = require(\"./dependencies/RequireIncludePlugin\");\n\nvar WarnNoModeSetPlugin = require(\"./WarnNoModeSetPlugin\");\n\nvar EnsureChunkConditionsPlugin = require(\"./optimize/EnsureChunkConditionsPlugin\");\n\nvar RemoveParentModulesPlugin = require(\"./optimize/RemoveParentModulesPlugin\");\n\nvar RemoveEmptyChunksPlugin = require(\"./optimize/RemoveEmptyChunksPlugin\");\n\nvar MergeDuplicateChunksPlugin = require(\"./optimize/MergeDuplicateChunksPlugin\");\n\nvar FlagIncludedChunksPlugin = require(\"./optimize/FlagIncludedChunksPlugin\");\n\nvar OccurrenceChunkOrderPlugin = require(\"./optimize/OccurrenceChunkOrderPlugin\");\n\nvar OccurrenceModuleOrderPlugin = require(\"./optimize/OccurrenceModuleOrderPlugin\");\n\nvar NaturalChunkOrderPlugin = require(\"./optimize/NaturalChunkOrderPlugin\");\n\nvar SideEffectsFlagPlugin = require(\"./optimize/SideEffectsFlagPlugin\");\n\nvar FlagDependencyUsagePlugin = require(\"./FlagDependencyUsagePlugin\");\n\nvar FlagDependencyExportsPlugin = require(\"./FlagDependencyExportsPlugin\");\n\nvar ModuleConcatenationPlugin = require(\"./optimize/ModuleConcatenationPlugin\");\n\nvar SplitChunksPlugin = require(\"./optimize/SplitChunksPlugin\");\n\nvar RuntimeChunkPlugin = require(\"./optimize/RuntimeChunkPlugin\");\n\nvar NoEmitOnErrorsPlugin = require(\"./NoEmitOnErrorsPlugin\");\n\nvar NamedModulesPlugin = require(\"./NamedModulesPlugin\");\n\nvar NamedChunksPlugin = require(\"./NamedChunksPlugin\");\n\nvar HashedModuleIdsPlugin = require(\"./HashedModuleIdsPlugin\");\n\nvar DefinePlugin = require(\"./DefinePlugin\");\n\nvar SizeLimitsPlugin = require(\"./performance/SizeLimitsPlugin\");\n\nvar WasmFinalizeExportsPlugin = require(\"./wasm/WasmFinalizeExportsPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").WebpackOptions} WebpackOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar WebpackOptionsApply =\n/*#__PURE__*/\nfunction (_OptionsApply) {\n  _inherits(WebpackOptionsApply, _OptionsApply);\n\n  function WebpackOptionsApply() {\n    _classCallCheck(this, WebpackOptionsApply);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WebpackOptionsApply).call(this));\n  }\n  /**\n   * @param {WebpackOptions} options options object\n   * @param {Compiler} compiler compiler object\n   * @returns {WebpackOptions} options object\n   */\n\n\n  _createClass(WebpackOptionsApply, [{\n    key: \"process\",\n    value: function process(options, compiler) {\n      var ExternalsPlugin;\n      compiler.outputPath = options.output.path;\n      compiler.recordsInputPath = options.recordsInputPath || options.recordsPath;\n      compiler.recordsOutputPath = options.recordsOutputPath || options.recordsPath;\n      compiler.name = options.name; // TODO webpack 5 refactor this to MultiCompiler.setDependencies() with a WeakMap\n      // @ts-ignore TODO\n\n      compiler.dependencies = options.dependencies;\n\n      if (typeof options.target === \"string\") {\n        var JsonpTemplatePlugin;\n        var FetchCompileWasmTemplatePlugin;\n        var ReadFileCompileWasmTemplatePlugin;\n        var NodeSourcePlugin;\n        var NodeTargetPlugin;\n        var NodeTemplatePlugin;\n\n        switch (options.target) {\n          case \"web\":\n            JsonpTemplatePlugin = require(\"./web/JsonpTemplatePlugin\");\n            FetchCompileWasmTemplatePlugin = require(\"./web/FetchCompileWasmTemplatePlugin\");\n            NodeSourcePlugin = require(\"./node/NodeSourcePlugin\");\n            new JsonpTemplatePlugin().apply(compiler);\n            new FetchCompileWasmTemplatePlugin({\n              mangleImports: options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new FunctionModulePlugin().apply(compiler);\n            new NodeSourcePlugin(options.node).apply(compiler);\n            new LoaderTargetPlugin(options.target).apply(compiler);\n            break;\n\n          case \"webworker\":\n            {\n              var WebWorkerTemplatePlugin = require(\"./webworker/WebWorkerTemplatePlugin\");\n\n              FetchCompileWasmTemplatePlugin = require(\"./web/FetchCompileWasmTemplatePlugin\");\n              NodeSourcePlugin = require(\"./node/NodeSourcePlugin\");\n              new WebWorkerTemplatePlugin().apply(compiler);\n              new FetchCompileWasmTemplatePlugin({\n                mangleImports: options.optimization.mangleWasmImports\n              }).apply(compiler);\n              new FunctionModulePlugin().apply(compiler);\n              new NodeSourcePlugin(options.node).apply(compiler);\n              new LoaderTargetPlugin(options.target).apply(compiler);\n              break;\n            }\n\n          case \"node\":\n          case \"async-node\":\n            NodeTemplatePlugin = require(\"./node/NodeTemplatePlugin\");\n            ReadFileCompileWasmTemplatePlugin = require(\"./node/ReadFileCompileWasmTemplatePlugin\");\n            NodeTargetPlugin = require(\"./node/NodeTargetPlugin\");\n            new NodeTemplatePlugin({\n              asyncChunkLoading: options.target === \"async-node\"\n            }).apply(compiler);\n            new ReadFileCompileWasmTemplatePlugin({\n              mangleImports: options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new FunctionModulePlugin().apply(compiler);\n            new NodeTargetPlugin().apply(compiler);\n            new LoaderTargetPlugin(\"node\").apply(compiler);\n            break;\n\n          case \"node-webkit\":\n            JsonpTemplatePlugin = require(\"./web/JsonpTemplatePlugin\");\n            NodeTargetPlugin = require(\"./node/NodeTargetPlugin\");\n            ExternalsPlugin = require(\"./ExternalsPlugin\");\n            new JsonpTemplatePlugin().apply(compiler);\n            new FunctionModulePlugin().apply(compiler);\n            new NodeTargetPlugin().apply(compiler);\n            new ExternalsPlugin(\"commonjs\", \"nw.gui\").apply(compiler);\n            new LoaderTargetPlugin(options.target).apply(compiler);\n            break;\n\n          case \"electron-main\":\n            NodeTemplatePlugin = require(\"./node/NodeTemplatePlugin\");\n            NodeTargetPlugin = require(\"./node/NodeTargetPlugin\");\n            ExternalsPlugin = require(\"./ExternalsPlugin\");\n            new NodeTemplatePlugin({\n              asyncChunkLoading: true\n            }).apply(compiler);\n            new FunctionModulePlugin().apply(compiler);\n            new NodeTargetPlugin().apply(compiler);\n            new ExternalsPlugin(\"commonjs\", [\"app\", \"auto-updater\", \"browser-window\", \"clipboard\", \"content-tracing\", \"crash-reporter\", \"dialog\", \"electron\", \"global-shortcut\", \"ipc\", \"ipc-main\", \"menu\", \"menu-item\", \"native-image\", \"original-fs\", \"power-monitor\", \"power-save-blocker\", \"protocol\", \"screen\", \"session\", \"shell\", \"tray\", \"web-contents\"]).apply(compiler);\n            new LoaderTargetPlugin(options.target).apply(compiler);\n            break;\n\n          case \"electron-renderer\":\n            JsonpTemplatePlugin = require(\"./web/JsonpTemplatePlugin\");\n            FetchCompileWasmTemplatePlugin = require(\"./web/FetchCompileWasmTemplatePlugin\");\n            NodeTargetPlugin = require(\"./node/NodeTargetPlugin\");\n            ExternalsPlugin = require(\"./ExternalsPlugin\");\n            new JsonpTemplatePlugin().apply(compiler);\n            new FetchCompileWasmTemplatePlugin({\n              mangleImports: options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new FunctionModulePlugin().apply(compiler);\n            new NodeTargetPlugin().apply(compiler);\n            new ExternalsPlugin(\"commonjs\", [\"clipboard\", \"crash-reporter\", \"desktop-capturer\", \"electron\", \"ipc\", \"ipc-renderer\", \"native-image\", \"original-fs\", \"remote\", \"screen\", \"shell\", \"web-frame\"]).apply(compiler);\n            new LoaderTargetPlugin(options.target).apply(compiler);\n            break;\n\n          default:\n            throw new Error(\"Unsupported target '\" + options.target + \"'.\");\n        }\n      } // @ts-ignore This is always true, which is good this way\n      else if (options.target !== false) {\n          options.target(compiler);\n        } else {\n          throw new Error(\"Unsupported target '\" + options.target + \"'.\");\n        }\n\n      if (options.output.library || options.output.libraryTarget !== \"var\") {\n        var LibraryTemplatePlugin = require(\"./LibraryTemplatePlugin\");\n\n        new LibraryTemplatePlugin(options.output.library, options.output.libraryTarget, options.output.umdNamedDefine, options.output.auxiliaryComment || \"\", options.output.libraryExport).apply(compiler);\n      }\n\n      if (options.externals) {\n        ExternalsPlugin = require(\"./ExternalsPlugin\");\n        new ExternalsPlugin(options.output.libraryTarget, options.externals).apply(compiler);\n      }\n\n      var noSources;\n      var legacy;\n      var modern;\n      var comment;\n\n      if (options.devtool && (options.devtool.includes(\"sourcemap\") || options.devtool.includes(\"source-map\"))) {\n        var hidden = options.devtool.includes(\"hidden\");\n        var inline = options.devtool.includes(\"inline\");\n        var evalWrapped = options.devtool.includes(\"eval\");\n        var cheap = options.devtool.includes(\"cheap\");\n        var moduleMaps = options.devtool.includes(\"module\");\n        noSources = options.devtool.includes(\"nosources\");\n        legacy = options.devtool.includes(\"@\");\n        modern = options.devtool.includes(\"#\");\n        comment = legacy && modern ? \"\\n/*\\n//@ source\" + \"MappingURL=[url]\\n//# source\" + \"MappingURL=[url]\\n*/\" : legacy ? \"\\n/*\\n//@ source\" + \"MappingURL=[url]\\n*/\" : modern ? \"\\n//# source\" + \"MappingURL=[url]\" : null;\n        var Plugin = evalWrapped ? EvalSourceMapDevToolPlugin : SourceMapDevToolPlugin;\n        new Plugin({\n          filename: inline ? null : options.output.sourceMapFilename,\n          moduleFilenameTemplate: options.output.devtoolModuleFilenameTemplate,\n          fallbackModuleFilenameTemplate: options.output.devtoolFallbackModuleFilenameTemplate,\n          append: hidden ? false : comment,\n          module: moduleMaps ? true : cheap ? false : true,\n          columns: cheap ? false : true,\n          lineToLine: options.output.devtoolLineToLine,\n          noSources: noSources,\n          namespace: options.output.devtoolNamespace\n        }).apply(compiler);\n      } else if (options.devtool && options.devtool.includes(\"eval\")) {\n        legacy = options.devtool.includes(\"@\");\n        modern = options.devtool.includes(\"#\");\n        comment = legacy && modern ? \"\\n//@ sourceURL=[url]\\n//# sourceURL=[url]\" : legacy ? \"\\n//@ sourceURL=[url]\" : modern ? \"\\n//# sourceURL=[url]\" : null;\n        new EvalDevToolModulePlugin({\n          sourceUrlComment: comment,\n          moduleFilenameTemplate: options.output.devtoolModuleFilenameTemplate,\n          namespace: options.output.devtoolNamespace\n        }).apply(compiler);\n      }\n\n      new JavascriptModulesPlugin().apply(compiler);\n      new JsonModulesPlugin().apply(compiler);\n      new WebAssemblyModulesPlugin({\n        mangleImports: options.optimization.mangleWasmImports\n      }).apply(compiler);\n      new EntryOptionPlugin().apply(compiler);\n      compiler.hooks.entryOption.call(options.context, options.entry);\n      new CompatibilityPlugin().apply(compiler);\n      new HarmonyModulesPlugin(options.module).apply(compiler);\n      new AMDPlugin(options.module, options.amd || {}).apply(compiler);\n      new CommonJsPlugin(options.module).apply(compiler);\n      new LoaderPlugin().apply(compiler);\n      new NodeStuffPlugin(options.node).apply(compiler);\n      new RequireJsStuffPlugin().apply(compiler);\n      new APIPlugin().apply(compiler);\n      new ConstPlugin().apply(compiler);\n      new UseStrictPlugin().apply(compiler);\n      new RequireIncludePlugin().apply(compiler);\n      new RequireEnsurePlugin().apply(compiler);\n      new RequireContextPlugin(options.resolve.modules, options.resolve.extensions, options.resolve.mainFiles).apply(compiler);\n      new ImportPlugin(options.module).apply(compiler);\n      new SystemPlugin(options.module).apply(compiler);\n\n      if (typeof options.mode !== \"string\") {\n        new WarnNoModeSetPlugin().apply(compiler);\n      }\n\n      new EnsureChunkConditionsPlugin().apply(compiler);\n\n      if (options.optimization.removeAvailableModules) {\n        new RemoveParentModulesPlugin().apply(compiler);\n      }\n\n      if (options.optimization.removeEmptyChunks) {\n        new RemoveEmptyChunksPlugin().apply(compiler);\n      }\n\n      if (options.optimization.mergeDuplicateChunks) {\n        new MergeDuplicateChunksPlugin().apply(compiler);\n      }\n\n      if (options.optimization.flagIncludedChunks) {\n        new FlagIncludedChunksPlugin().apply(compiler);\n      }\n\n      if (options.optimization.sideEffects) {\n        new SideEffectsFlagPlugin().apply(compiler);\n      }\n\n      if (options.optimization.providedExports) {\n        new FlagDependencyExportsPlugin().apply(compiler);\n      }\n\n      if (options.optimization.usedExports) {\n        new FlagDependencyUsagePlugin().apply(compiler);\n      }\n\n      if (options.optimization.concatenateModules) {\n        new ModuleConcatenationPlugin().apply(compiler);\n      }\n\n      if (options.optimization.splitChunks) {\n        new SplitChunksPlugin(options.optimization.splitChunks).apply(compiler);\n      }\n\n      if (options.optimization.runtimeChunk) {\n        new RuntimeChunkPlugin(options.optimization.runtimeChunk).apply(compiler);\n      }\n\n      if (options.optimization.noEmitOnErrors) {\n        new NoEmitOnErrorsPlugin().apply(compiler);\n      }\n\n      if (options.optimization.checkWasmTypes) {\n        new WasmFinalizeExportsPlugin().apply(compiler);\n      }\n\n      var moduleIds = options.optimization.moduleIds;\n\n      if (moduleIds === undefined) {\n        // TODO webpack 5 remove all these options\n        if (options.optimization.occurrenceOrder) {\n          moduleIds = \"size\";\n        }\n\n        if (options.optimization.namedModules) {\n          moduleIds = \"named\";\n        }\n\n        if (options.optimization.hashedModuleIds) {\n          moduleIds = \"hashed\";\n        }\n\n        if (moduleIds === undefined) {\n          moduleIds = \"natural\";\n        }\n      }\n\n      if (moduleIds) {\n        switch (moduleIds) {\n          case \"natural\":\n            // TODO webpack 5: see hint in Compilation.sortModules\n            break;\n\n          case \"named\":\n            new NamedModulesPlugin().apply(compiler);\n            break;\n\n          case \"hashed\":\n            new HashedModuleIdsPlugin().apply(compiler);\n            break;\n\n          case \"size\":\n            new OccurrenceModuleOrderPlugin({\n              prioritiseInitial: true\n            }).apply(compiler);\n            break;\n\n          case \"total-size\":\n            new OccurrenceModuleOrderPlugin({\n              prioritiseInitial: false\n            }).apply(compiler);\n            break;\n\n          default:\n            throw new Error(\"webpack bug: moduleIds: \".concat(moduleIds, \" is not implemented\"));\n        }\n      }\n\n      var chunkIds = options.optimization.chunkIds;\n\n      if (chunkIds === undefined) {\n        // TODO webpack 5 remove all these options\n        if (options.optimization.occurrenceOrder) {\n          // This looks weird but it's for backward-compat\n          // This bug already existed before adding this feature\n          chunkIds = \"total-size\";\n        }\n\n        if (options.optimization.namedChunks) {\n          chunkIds = \"named\";\n        }\n\n        if (chunkIds === undefined) {\n          chunkIds = \"natural\";\n        }\n      }\n\n      if (chunkIds) {\n        switch (chunkIds) {\n          case \"natural\":\n            new NaturalChunkOrderPlugin().apply(compiler);\n            break;\n\n          case \"named\":\n            // TODO webapck 5: for backward-compat this need to have OccurrenceChunkOrderPlugin too\n            // The NamedChunksPlugin doesn't give every chunk a name\n            // This should be fixed, and the OccurrenceChunkOrderPlugin should be removed here.\n            new OccurrenceChunkOrderPlugin({\n              prioritiseInitial: false\n            }).apply(compiler);\n            new NamedChunksPlugin().apply(compiler);\n            break;\n\n          case \"size\":\n            new OccurrenceChunkOrderPlugin({\n              prioritiseInitial: true\n            }).apply(compiler);\n            break;\n\n          case \"total-size\":\n            new OccurrenceChunkOrderPlugin({\n              prioritiseInitial: false\n            }).apply(compiler);\n            break;\n\n          default:\n            throw new Error(\"webpack bug: chunkIds: \".concat(chunkIds, \" is not implemented\"));\n        }\n      }\n\n      if (options.optimization.nodeEnv) {\n        new DefinePlugin({\n          \"process.env.NODE_ENV\": JSON.stringify(options.optimization.nodeEnv)\n        }).apply(compiler);\n      }\n\n      if (options.optimization.minimize) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = options.optimization.minimizer[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var minimizer = _step.value;\n\n            if (typeof minimizer === \"function\") {\n              minimizer.apply(compiler);\n            } else {\n              minimizer.apply(compiler);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      if (options.performance) {\n        new SizeLimitsPlugin(options.performance).apply(compiler);\n      }\n\n      new TemplatedPathPlugin().apply(compiler);\n      new RecordIdsPlugin({\n        portableIds: options.optimization.portableRecords\n      }).apply(compiler);\n      new WarnCaseSensitiveModulesPlugin().apply(compiler);\n\n      if (options.cache) {\n        var CachePlugin = require(\"./CachePlugin\");\n\n        new CachePlugin(typeof options.cache === \"object\" ? options.cache : null).apply(compiler);\n      }\n\n      compiler.hooks.afterPlugins.call(compiler);\n\n      if (!compiler.inputFileSystem) {\n        throw new Error(\"No input filesystem provided\");\n      }\n\n      compiler.resolverFactory.hooks.resolveOptions.for(\"normal\").tap(\"WebpackOptionsApply\", function (resolveOptions) {\n        return Object.assign({\n          fileSystem: compiler.inputFileSystem\n        }, options.resolve, resolveOptions);\n      });\n      compiler.resolverFactory.hooks.resolveOptions.for(\"context\").tap(\"WebpackOptionsApply\", function (resolveOptions) {\n        return Object.assign({\n          fileSystem: compiler.inputFileSystem,\n          resolveToContext: true\n        }, options.resolve, resolveOptions);\n      });\n      compiler.resolverFactory.hooks.resolveOptions.for(\"loader\").tap(\"WebpackOptionsApply\", function (resolveOptions) {\n        return Object.assign({\n          fileSystem: compiler.inputFileSystem\n        }, options.resolveLoader, resolveOptions);\n      });\n      compiler.hooks.afterResolvers.call(compiler);\n      return options;\n    }\n  }]);\n\n  return WebpackOptionsApply;\n}(OptionsApply);\n\nmodule.exports = WebpackOptionsApply;","map":null,"metadata":{},"sourceType":"script"}