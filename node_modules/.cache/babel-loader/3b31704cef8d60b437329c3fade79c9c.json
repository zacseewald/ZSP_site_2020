{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Semaphore =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an instance of Semaphore.\n   *\n   * @param {number} available the amount available number of \"tasks\"\n   * in the Semaphore\n   */\n  function Semaphore(available) {\n    _classCallCheck(this, Semaphore);\n\n    this.available = available;\n    /** @type {(function(): void)[]} */\n\n    this.waiters = [];\n    /** @private */\n\n    this._continue = this._continue.bind(this);\n  }\n  /**\n   * @param {function(): void} callback function block to capture and run\n   * @returns {void}\n   */\n\n\n  _createClass(Semaphore, [{\n    key: \"acquire\",\n    value: function acquire(callback) {\n      if (this.available > 0) {\n        this.available--;\n        callback();\n      } else {\n        this.waiters.push(callback);\n      }\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      this.available++;\n\n      if (this.waiters.length > 0) {\n        process.nextTick(this._continue);\n      }\n    }\n  }, {\n    key: \"_continue\",\n    value: function _continue() {\n      if (this.available > 0) {\n        if (this.waiters.length > 0) {\n          this.available--;\n          var callback = this.waiters.pop();\n          callback();\n        }\n      }\n    }\n  }]);\n\n  return Semaphore;\n}();\n\nmodule.exports = Semaphore;","map":null,"metadata":{},"sourceType":"script"}