{"ast":null,"code":"module.exports = FileWriter;\n\nvar fs = require('graceful-fs');\n\nvar Writer = require('./writer.js');\n\nvar inherits = require('inherits');\n\nvar EOF = {};\ninherits(FileWriter, Writer);\n\nfunction FileWriter(props) {\n  var self = this;\n\n  if (!(self instanceof FileWriter)) {\n    throw new Error('FileWriter must be called as constructor.');\n  } // should already be established as a File type\n\n\n  if (props.type !== 'File' || !props.File) {\n    throw new Error('Non-file type ' + props.type);\n  }\n\n  self._buffer = [];\n  self._bytesWritten = 0;\n  Writer.call(this, props);\n}\n\nFileWriter.prototype._create = function () {\n  var self = this;\n  if (self._stream) return;\n  var so = {};\n  if (self.props.flags) so.flags = self.props.flags;\n  so.mode = Writer.filemode;\n  if (self._old && self._old.blksize) so.bufferSize = self._old.blksize;\n  self._stream = fs.createWriteStream(self._path, so);\n\n  self._stream.on('open', function () {\n    // console.error(\"FW open\", self._buffer, self._path)\n    self.ready = true;\n\n    self._buffer.forEach(function (c) {\n      if (c === EOF) self._stream.end();else self._stream.write(c);\n    });\n\n    self.emit('ready'); // give this a kick just in case it needs it.\n\n    self.emit('drain');\n  });\n\n  self._stream.on('error', function (er) {\n    self.emit('error', er);\n  });\n\n  self._stream.on('drain', function () {\n    self.emit('drain');\n  });\n\n  self._stream.on('close', function () {\n    // console.error('\\n\\nFW Stream Close', self._path, self.size)\n    self._finish();\n  });\n};\n\nFileWriter.prototype.write = function (c) {\n  var self = this;\n  self._bytesWritten += c.length;\n\n  if (!self.ready) {\n    if (!Buffer.isBuffer(c) && typeof c !== 'string') {\n      throw new Error('invalid write data');\n    }\n\n    self._buffer.push(c);\n\n    return false;\n  }\n\n  var ret = self._stream.write(c); // console.error('\\t-- fw wrote, _stream says', ret, self._stream._queue.length)\n  // allow 2 buffered writes, because otherwise there's just too\n  // much stop and go bs.\n\n\n  if (ret === false && self._stream._queue) {\n    return self._stream._queue.length <= 2;\n  } else {\n    return ret;\n  }\n};\n\nFileWriter.prototype.end = function (c) {\n  var self = this;\n  if (c) self.write(c);\n\n  if (!self.ready) {\n    self._buffer.push(EOF);\n\n    return false;\n  }\n\n  return self._stream.end();\n};\n\nFileWriter.prototype._finish = function () {\n  var self = this;\n\n  if (typeof self.size === 'number' && self._bytesWritten !== self.size) {\n    self.error('Did not get expected byte count.\\n' + 'expect: ' + self.size + '\\n' + 'actual: ' + self._bytesWritten);\n  }\n\n  Writer.prototype._finish.call(self);\n};","map":null,"metadata":{},"sourceType":"script"}