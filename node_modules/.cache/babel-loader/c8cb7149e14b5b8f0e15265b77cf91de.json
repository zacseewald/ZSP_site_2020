{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Generator = require(\"../Generator\");\n\nvar Template = require(\"../Template\");\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource;\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Dependency\").DependencyTemplate} DependencyTemplate */\n\n\nvar WebAssemblyJavascriptGenerator =\n/*#__PURE__*/\nfunction (_Generator) {\n  _inherits(WebAssemblyJavascriptGenerator, _Generator);\n\n  function WebAssemblyJavascriptGenerator() {\n    _classCallCheck(this, WebAssemblyJavascriptGenerator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyJavascriptGenerator).apply(this, arguments));\n  }\n\n  _createClass(WebAssemblyJavascriptGenerator, [{\n    key: \"generate\",\n\n    /**\n     * @param {NormalModule} module module for which the code should be generated\n     * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n     * @param {RuntimeTemplate} runtimeTemplate the runtime template\n     * @param {string} type which kind of code should be generated\n     * @returns {Source} generated code\n     */\n    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {\n      var initIdentifer = Array.isArray(module.usedExports) ? Template.numberToIdentifer(module.usedExports.length) : \"__webpack_init__\";\n      var needExportsCopy = false;\n      var importedModules = new Map();\n      var initParams = [];\n      var index = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = module.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var dep = _step.value;\n          var depAsAny =\n          /** @type {any} */\n          dep;\n\n          if (dep.module) {\n            var importData = importedModules.get(dep.module);\n\n            if (importData === undefined) {\n              importedModules.set(dep.module, importData = {\n                importVar: \"m\".concat(index),\n                index: index,\n                request: \"userRequest\" in depAsAny ? depAsAny.userRequest : undefined,\n                names: new Set(),\n                reexports: []\n              });\n              index++;\n            }\n\n            if (dep instanceof WebAssemblyImportDependency) {\n              importData.names.add(dep.name);\n\n              if (dep.description.type === \"GlobalType\") {\n                var exportName = dep.name;\n                var usedName = dep.module && dep.module.isUsed(exportName);\n\n                if (dep.module) {\n                  if (usedName) {\n                    initParams.push(runtimeTemplate.exportFromImport({\n                      module: dep.module,\n                      request: dep.request,\n                      importVar: importData.importVar,\n                      originModule: module,\n                      exportName: dep.name,\n                      asiSafe: true,\n                      isCall: false,\n                      callContext: null\n                    }));\n                  }\n                }\n              }\n            }\n\n            if (dep instanceof WebAssemblyExportImportedDependency) {\n              importData.names.add(dep.name);\n\n              var _usedName = module.isUsed(dep.exportName);\n\n              if (_usedName) {\n                var exportProp = \"\".concat(module.exportsArgument, \"[\").concat(JSON.stringify(_usedName), \"]\");\n                var defineStatement = Template.asString([\"\".concat(exportProp, \" = \").concat(runtimeTemplate.exportFromImport({\n                  module: dep.module,\n                  request: dep.request,\n                  importVar: importData.importVar,\n                  originModule: module,\n                  exportName: dep.name,\n                  asiSafe: true,\n                  isCall: false,\n                  callContext: null\n                }), \";\"), \"if(WebAssembly.Global) \".concat(exportProp, \" = \") + \"new WebAssembly.Global({ value: \".concat(JSON.stringify(dep.valueType), \" }, \").concat(exportProp, \");\")]);\n                importData.reexports.push(defineStatement);\n                needExportsCopy = true;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var importsCode = Template.asString(Array.from(importedModules, function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            module = _ref2[0],\n            _ref2$ = _ref2[1],\n            importVar = _ref2$.importVar,\n            request = _ref2$.request,\n            reexports = _ref2$.reexports;\n\n        var importStatement = runtimeTemplate.importStatement({\n          module: module,\n          request: request,\n          importVar: importVar,\n          originModule: module\n        });\n        return importStatement + reexports.join(\"\\n\");\n      })); // create source\n\n      var source = new RawSource(['\"use strict\";', \"// Instantiate WebAssembly module\", \"var wasmExports = __webpack_require__.w[module.i];\", !Array.isArray(module.usedExports) ? \"__webpack_require__.r(\".concat(module.exportsArgument, \");\") : \"\", // this must be before import for circular dependencies\n      \"// export exports from WebAssembly module\", Array.isArray(module.usedExports) && !needExportsCopy ? \"\".concat(module.moduleArgument, \".exports = wasmExports;\") : \"for(var name in wasmExports) \" + \"if(name != \".concat(JSON.stringify(initIdentifer), \") \") + \"\".concat(module.exportsArgument, \"[name] = wasmExports[name];\"), \"// exec imports from WebAssembly module (for esm order)\", importsCode, \"\", \"// exec wasm module\", \"wasmExports[\".concat(JSON.stringify(initIdentifer), \"](\").concat(initParams.join(\", \"), \")\")].join(\"\\n\"));\n      return source;\n    }\n  }]);\n\n  return WebAssemblyJavascriptGenerator;\n}(Generator);\n\nmodule.exports = WebAssemblyJavascriptGenerator;","map":null,"metadata":{},"sourceType":"script"}