{"ast":null,"code":"module.exports = function loadLoader(loader, callback) {\n  if (typeof System === \"object\" && typeof System.import === \"function\") {\n    System.import(loader.path).catch(callback).then(function (module) {\n      loader.normal = typeof module === \"function\" ? module : module.default;\n      loader.pitch = module.pitch;\n      loader.raw = module.raw;\n      if (typeof loader.normal !== \"function\" && typeof loader.pitch !== \"function\") throw new Error(\"Module '\" + loader.path + \"' is not a loader (must have normal or pitch function)\");\n      callback();\n    });\n  } else {\n    try {\n      var module = require(loader.path);\n    } catch (e) {\n      // it is possible for node to choke on a require if the FD descriptor\n      // limit has been reached. give it a chance to recover.\n      if (e instanceof Error && e.code === \"EMFILE\") {\n        var retry = loadLoader.bind(null, loader, callback);\n\n        if (typeof setImmediate === \"function\") {\n          // node >= 0.9.0\n          return setImmediate(retry);\n        } else {\n          // node < 0.9.0\n          return process.nextTick(retry);\n        }\n      }\n\n      return callback(e);\n    }\n\n    if (typeof loader !== \"function\" && typeof loader !== \"object\") throw new Error(\"Module '\" + loader.path + \"' is not a loader (export function or es6 module))\");\n    loader.normal = typeof module === \"function\" ? module : module.default;\n    loader.pitch = module.pitch;\n    loader.raw = module.raw;\n    if (typeof loader.normal !== \"function\" && typeof loader.pitch !== \"function\") throw new Error(\"Module '\" + loader.path + \"' is not a loader (must have normal or pitch function)\");\n    callback();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}