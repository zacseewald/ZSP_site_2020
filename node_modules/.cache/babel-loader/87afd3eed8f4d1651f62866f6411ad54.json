{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar NodeStuffPlugin =\n/*#__PURE__*/\nfunction () {\n  function NodeStuffPlugin(options) {\n    _classCallCheck(this, NodeStuffPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(NodeStuffPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"NodeStuffPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.node === false) return;\n          var localOptions = options;\n\n          if (parserOptions.node) {\n            localOptions = Object.assign({}, localOptions, parserOptions.node);\n          }\n\n          var setConstant = function setConstant(expressionName, value) {\n            parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(value));\n              return true;\n            });\n          };\n\n          var setModuleConstant = function setModuleConstant(expressionName, fn) {\n            parser.hooks.expression.for(expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(fn(parser.state.module)));\n              return true;\n            });\n          };\n\n          var context = compiler.context;\n\n          if (localOptions.__filename === \"mock\") {\n            setConstant(\"__filename\", \"/index.js\");\n          } else if (localOptions.__filename) {\n            setModuleConstant(\"__filename\", function (module) {\n              return path.relative(context, module.resource);\n            });\n          }\n\n          parser.hooks.evaluateIdentifier.for(\"__filename\").tap(\"NodeStuffPlugin\", function (expr) {\n            if (!parser.state.module) return;\n            var resource = parser.state.module.resource;\n            var i = resource.indexOf(\"?\");\n            return ParserHelpers.evaluateToString(i < 0 ? resource : resource.substr(0, i))(expr);\n          });\n\n          if (localOptions.__dirname === \"mock\") {\n            setConstant(\"__dirname\", \"/\");\n          } else if (localOptions.__dirname) {\n            setModuleConstant(\"__dirname\", function (module) {\n              return path.relative(context, module.context);\n            });\n          }\n\n          parser.hooks.evaluateIdentifier.for(\"__dirname\").tap(\"NodeStuffPlugin\", function (expr) {\n            if (!parser.state.module) return;\n            return ParserHelpers.evaluateToString(parser.state.module.context)(expr);\n          });\n          parser.hooks.expression.for(\"require.main\").tap(\"NodeStuffPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, \"__webpack_require__.c[__webpack_require__.s]\"));\n          parser.hooks.expression.for(\"require.extensions\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"require.extensions is not supported by webpack. Use a loader instead.\"));\n          parser.hooks.expression.for(\"require.main.require\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"require.main.require is not supported by webpack.\"));\n          parser.hooks.expression.for(\"module.parent.require\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"module.parent.require is not supported by webpack.\"));\n          parser.hooks.expression.for(\"module.loaded\").tap(\"NodeStuffPlugin\", function (expr) {\n            parser.state.module.buildMeta.moduleConcatenationBailout = \"module.loaded\";\n            return ParserHelpers.toConstantDependency(parser, \"module.l\")(expr);\n          });\n          parser.hooks.expression.for(\"module.id\").tap(\"NodeStuffPlugin\", function (expr) {\n            parser.state.module.buildMeta.moduleConcatenationBailout = \"module.id\";\n            return ParserHelpers.toConstantDependency(parser, \"module.i\")(expr);\n          });\n          parser.hooks.expression.for(\"module.exports\").tap(\"NodeStuffPlugin\", function () {\n            var module = parser.state.module;\n            var isHarmony = module.buildMeta && module.buildMeta.exportsType;\n            if (!isHarmony) return true;\n          });\n          parser.hooks.evaluateIdentifier.for(\"module.hot\").tap(\"NodeStuffPlugin\", ParserHelpers.evaluateToIdentifier(\"module.hot\", false));\n          parser.hooks.expression.for(\"module\").tap(\"NodeStuffPlugin\", function () {\n            var module = parser.state.module;\n            var isHarmony = module.buildMeta && module.buildMeta.exportsType;\n            var moduleJsPath = path.join(__dirname, \"..\", \"buildin\", isHarmony ? \"harmony-module.js\" : \"module.js\");\n\n            if (module.context) {\n              moduleJsPath = path.relative(parser.state.module.context, moduleJsPath);\n\n              if (!/^[A-Z]:/i.test(moduleJsPath)) {\n                moduleJsPath = \"./\".concat(moduleJsPath.replace(/\\\\/g, \"/\"));\n              }\n            }\n\n            return ParserHelpers.addParsedVariableToModule(parser, \"module\", \"require(\".concat(JSON.stringify(moduleJsPath), \")(module)\"));\n          });\n        };\n\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeStuffPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeStuffPlugin\", handler);\n      });\n    }\n  }]);\n\n  return NodeStuffPlugin;\n}();\n\nmodule.exports = NodeStuffPlugin;","map":null,"metadata":{},"sourceType":"script"}