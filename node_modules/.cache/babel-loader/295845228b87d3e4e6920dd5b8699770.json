{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar Template = require(\"./Template\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/BannerPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\n\nvar BannerPlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n\n    validateOptions(schema, options, \"Banner Plugin\");\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    /** @type {BannerPluginOptions} */\n\n\n    this.options = options;\n    var bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      var getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", function (chunks) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var chunk = _step.value;\n\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = chunk.files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var file = _step2.value;\n\n                  if (!matchObject(file)) {\n                    continue;\n                  }\n\n                  var basename = void 0;\n                  var query = \"\";\n                  var filename = file;\n                  var hash = compilation.hash;\n                  var querySplit = filename.indexOf(\"?\");\n\n                  if (querySplit >= 0) {\n                    query = filename.substr(querySplit);\n                    filename = filename.substr(0, querySplit);\n                  }\n\n                  var lastSlashIndex = filename.lastIndexOf(\"/\");\n\n                  if (lastSlashIndex === -1) {\n                    basename = filename;\n                  } else {\n                    basename = filename.substr(lastSlashIndex + 1);\n                  }\n\n                  var data = {\n                    hash: hash,\n                    chunk: chunk,\n                    filename: filename,\n                    basename: basename,\n                    query: query\n                  };\n                  var comment = compilation.getPath(banner(data), data);\n                  compilation.assets[file] = new ConcatSource(comment, \"\\n\", compilation.assets[file]);\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return BannerPlugin;\n}();\n\nmodule.exports = BannerPlugin;","map":null,"metadata":{},"sourceType":"script"}