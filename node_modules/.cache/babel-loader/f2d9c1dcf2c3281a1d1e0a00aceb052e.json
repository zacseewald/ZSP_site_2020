{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Generator = require(\"../Generator\");\n\nvar WebAssemblyParser = require(\"./WebAssemblyParser\");\n\nvar WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n\nvar WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nvar WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar WebAssemblyModulesPlugin =\n/*#__PURE__*/\nfunction () {\n  function WebAssemblyModulesPlugin(options) {\n    _classCallCheck(this, WebAssemblyModulesPlugin);\n\n    this.options = options;\n  }\n  /**\n   * @param {Compiler} compiler compiler\n   * @returns {void}\n   */\n\n\n  _createClass(WebAssemblyModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"WebAssemblyModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n        normalModuleFactory.hooks.createParser.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", function () {\n          return new WebAssemblyParser();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", function () {\n          return Generator.byType({\n            javascript: new WebAssemblyJavascriptGenerator(),\n            webassembly: new WebAssemblyGenerator(_this.options)\n          });\n        });\n        compilation.chunkTemplate.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", function (result, options) {\n          var chunk = options.chunk;\n          var outputOptions = options.outputOptions;\n          var moduleTemplates = options.moduleTemplates;\n          var dependencyTemplates = options.dependencyTemplates;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              if (module.type && module.type.startsWith(\"webassembly\")) {\n                var filenameTemplate = outputOptions.webassemblyModuleFilename;\n                result.push({\n                  render: function render() {\n                    return _this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates);\n                  },\n                  filenameTemplate: filenameTemplate,\n                  pathOptions: {\n                    module: module\n                  },\n                  identifier: \"webassemblyModule\".concat(module.id),\n                  hash: module.hash\n                });\n              }\n            };\n\n            for (var _iterator = chunk.modulesIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              _loop();\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return result;\n        });\n        compilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", function () {\n          var initialWasmModules = new Set();\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = compilation.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var chunk = _step2.value;\n\n              if (chunk.canBeInitial()) {\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                  for (var _iterator4 = chunk.modulesIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var _module = _step4.value;\n\n                    if (_module.type.startsWith(\"webassembly\")) {\n                      initialWasmModules.add(_module);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                      _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = initialWasmModules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var _module2 = _step3.value;\n              compilation.errors.push(new WebAssemblyInInitialChunkError(_module2, compilation.requestShortener));\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderWebAssembly\",\n    value: function renderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n      return moduleTemplate.render(module, dependencyTemplates, {});\n    }\n  }]);\n\n  return WebAssemblyModulesPlugin;\n}();\n\nmodule.exports = WebAssemblyModulesPlugin;","map":null,"metadata":{},"sourceType":"script"}