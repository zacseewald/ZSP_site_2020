{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function DirectoryExistsPlugin(source, target) {\n    _classCallCheck(this, DirectoryExistsPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n\n  _createClass(DirectoryExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", function (request, resolveContext, callback) {\n        var fs = resolver.fileSystem;\n        var directory = request.path;\n        fs.stat(directory, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missing) resolveContext.missing.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n            return callback();\n          }\n\n          if (!stat.isDirectory()) {\n            if (resolveContext.missing) resolveContext.missing.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n            return callback();\n          }\n\n          resolver.doResolve(target, request, \"existing directory\", resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return DirectoryExistsPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}