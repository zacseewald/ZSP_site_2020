{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/WatchIgnorePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n\n\nvar IgnoringWatchFileSystem =\n/*#__PURE__*/\nfunction () {\n  function IgnoringWatchFileSystem(wfs, paths) {\n    _classCallCheck(this, IgnoringWatchFileSystem);\n\n    this.wfs = wfs;\n    this.paths = paths;\n  }\n\n  _createClass(IgnoringWatchFileSystem, [{\n    key: \"watch\",\n    value: function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n      var _this = this;\n\n      var ignored = function ignored(path) {\n        return _this.paths.some(function (p) {\n          return p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0;\n        });\n      };\n\n      var notIgnored = function notIgnored(path) {\n        return !ignored(path);\n      };\n\n      var ignoredFiles = files.filter(ignored);\n      var ignoredDirs = dirs.filter(ignored);\n      var watcher = this.wfs.watch(files.filter(notIgnored), dirs.filter(notIgnored), missing, startTime, options, function (err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles) {\n        if (err) return callback(err);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = ignoredFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var path = _step.value;\n            fileTimestamps.set(path, 1);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = ignoredDirs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _path = _step2.value;\n            dirTimestamps.set(_path, 1);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        callback(err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles);\n      }, callbackUndelayed);\n      return {\n        close: function close() {\n          return watcher.close();\n        },\n        pause: function pause() {\n          return watcher.pause();\n        },\n        getContextTimestamps: function getContextTimestamps() {\n          var dirTimestamps = watcher.getContextTimestamps();\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = ignoredDirs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var path = _step3.value;\n              dirTimestamps.set(path, 1);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          return dirTimestamps;\n        },\n        getFileTimestamps: function getFileTimestamps() {\n          var fileTimestamps = watcher.getFileTimestamps();\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = ignoredFiles[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var path = _step4.value;\n              fileTimestamps.set(path, 1);\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          return fileTimestamps;\n        }\n      };\n    }\n  }]);\n\n  return IgnoringWatchFileSystem;\n}();\n\nvar WatchIgnorePlugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {WatchIgnorePluginOptions} paths list of paths\n   */\n  function WatchIgnorePlugin(paths) {\n    _classCallCheck(this, WatchIgnorePlugin);\n\n    validateOptions(schema, paths, \"Watch Ignore Plugin\");\n    this.paths = paths;\n  }\n\n  _createClass(WatchIgnorePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this2 = this;\n\n      compiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", function () {\n        compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, _this2.paths);\n      });\n    }\n  }]);\n\n  return WatchIgnorePlugin;\n}();\n\nmodule.exports = WatchIgnorePlugin;","map":null,"metadata":{},"sourceType":"script"}