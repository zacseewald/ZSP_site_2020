{"ast":null,"code":"// write data to it, and it'll emit data in 512 byte blocks.\n// if you .end() or .flush(), it'll emit whatever it's got,\n// padded with nulls to 512 bytes.\nmodule.exports = BlockStream;\n\nvar Stream = require(\"stream\").Stream,\n    inherits = require(\"inherits\"),\n    assert = require(\"assert\").ok,\n    debug = process.env.DEBUG ? console.error : function () {};\n\nfunction BlockStream(size, opt) {\n  this.writable = this.readable = true;\n  this._opt = opt || {};\n  this._chunkSize = size || 512;\n  this._offset = 0;\n  this._buffer = [];\n  this._bufferLength = 0;\n  if (this._opt.nopad) this._zeroes = false;else {\n    this._zeroes = new Buffer(this._chunkSize);\n\n    for (var i = 0; i < this._chunkSize; i++) {\n      this._zeroes[i] = 0;\n    }\n  }\n}\n\ninherits(BlockStream, Stream);\n\nBlockStream.prototype.write = function (c) {\n  // debug(\"   BS write\", c)\n  if (this._ended) throw new Error(\"BlockStream: write after end\");\n  if (c && !Buffer.isBuffer(c)) c = new Buffer(c + \"\");\n\n  if (c.length) {\n    this._buffer.push(c);\n\n    this._bufferLength += c.length;\n  } // debug(\"pushed onto buffer\", this._bufferLength)\n\n\n  if (this._bufferLength >= this._chunkSize) {\n    if (this._paused) {\n      // debug(\"   BS paused, return false, need drain\")\n      this._needDrain = true;\n      return false;\n    }\n\n    this._emitChunk();\n  }\n\n  return true;\n};\n\nBlockStream.prototype.pause = function () {\n  // debug(\"   BS pausing\")\n  this._paused = true;\n};\n\nBlockStream.prototype.resume = function () {\n  // debug(\"   BS resume\")\n  this._paused = false;\n  return this._emitChunk();\n};\n\nBlockStream.prototype.end = function (chunk) {\n  // debug(\"end\", chunk)\n  if (typeof chunk === \"function\") cb = chunk, chunk = null;\n  if (chunk) this.write(chunk);\n  this._ended = true;\n  this.flush();\n};\n\nBlockStream.prototype.flush = function () {\n  this._emitChunk(true);\n};\n\nBlockStream.prototype._emitChunk = function (flush) {\n  // debug(\"emitChunk flush=%j emitting=%j paused=%j\", flush, this._emitting, this._paused)\n  // emit a <chunkSize> chunk\n  if (flush && this._zeroes) {\n    // debug(\"    BS push zeroes\", this._bufferLength)\n    // push a chunk of zeroes\n    var padBytes = this._bufferLength % this._chunkSize;\n    if (padBytes !== 0) padBytes = this._chunkSize - padBytes;\n\n    if (padBytes > 0) {\n      // debug(\"padBytes\", padBytes, this._zeroes.slice(0, padBytes))\n      this._buffer.push(this._zeroes.slice(0, padBytes));\n\n      this._bufferLength += padBytes; // debug(this._buffer[this._buffer.length - 1].length, this._bufferLength)\n    }\n  }\n\n  if (this._emitting || this._paused) return;\n  this._emitting = true; // debug(\"    BS entering loops\")\n\n  var bufferIndex = 0;\n\n  while (this._bufferLength >= this._chunkSize && (flush || !this._paused)) {\n    // debug(\"     BS data emission loop\", this._bufferLength)\n    var out,\n        outOffset = 0,\n        outHas = this._chunkSize;\n\n    while (outHas > 0 && (flush || !this._paused)) {\n      // debug(\"    BS data inner emit loop\", this._bufferLength)\n      var cur = this._buffer[bufferIndex],\n          curHas = cur.length - this._offset; // debug(\"cur=\", cur)\n      // debug(\"curHas=%j\", curHas)\n      // If it's not big enough to fill the whole thing, then we'll need\n      // to copy multiple buffers into one.  However, if it is big enough,\n      // then just slice out the part we want, to save unnecessary copying.\n      // Also, need to copy if we've already done some copying, since buffers\n      // can't be joined like cons strings.\n\n      if (out || curHas < outHas) {\n        out = out || new Buffer(this._chunkSize);\n        cur.copy(out, outOffset, this._offset, this._offset + Math.min(curHas, outHas));\n      } else if (cur.length === outHas && this._offset === 0) {\n        // shortcut -- cur is exactly long enough, and no offset.\n        out = cur;\n      } else {\n        // slice out the piece of cur that we need.\n        out = cur.slice(this._offset, this._offset + outHas);\n      }\n\n      if (curHas > outHas) {\n        // means that the current buffer couldn't be completely output\n        // update this._offset to reflect how much WAS written\n        this._offset += outHas;\n        outHas = 0;\n      } else {\n        // output the entire current chunk.\n        // toss it away\n        outHas -= curHas;\n        outOffset += curHas;\n        bufferIndex++;\n        this._offset = 0;\n      }\n    }\n\n    this._bufferLength -= this._chunkSize;\n    assert(out.length === this._chunkSize); // debug(\"emitting data\", out)\n    // debug(\"   BS emitting, paused=%j\", this._paused, this._bufferLength)\n\n    this.emit(\"data\", out);\n    out = null;\n  } // debug(\"    BS out of loops\", this._bufferLength)\n  // whatever is left, it's not enough to fill up a block, or we're paused\n\n\n  this._buffer = this._buffer.slice(bufferIndex);\n\n  if (this._paused) {\n    // debug(\"    BS paused, leaving\", this._bufferLength)\n    this._needsDrain = true;\n    this._emitting = false;\n    return;\n  } // if flushing, and not using null-padding, then need to emit the last\n  // chunk(s) sitting in the queue.  We know that it's not enough to\n  // fill up a whole block, because otherwise it would have been emitted\n  // above, but there may be some offset.\n\n\n  var l = this._buffer.length;\n\n  if (flush && !this._zeroes && l) {\n    if (l === 1) {\n      if (this._offset) {\n        this.emit(\"data\", this._buffer[0].slice(this._offset));\n      } else {\n        this.emit(\"data\", this._buffer[0]);\n      }\n    } else {\n      var outHas = this._bufferLength,\n          out = new Buffer(outHas),\n          outOffset = 0;\n\n      for (var i = 0; i < l; i++) {\n        var cur = this._buffer[i],\n            curHas = cur.length - this._offset;\n        cur.copy(out, outOffset, this._offset);\n        this._offset = 0;\n        outOffset += curHas;\n        this._bufferLength -= curHas;\n      }\n\n      this.emit(\"data\", out);\n    } // truncate\n\n\n    this._buffer.length = 0;\n    this._bufferLength = 0;\n    this._offset = 0;\n  } // now either drained or ended\n  // debug(\"either draining, or ended\", this._bufferLength, this._ended)\n  // means that we've flushed out all that we can so far.\n\n\n  if (this._needDrain) {\n    // debug(\"emitting drain\", this._bufferLength)\n    this._needDrain = false;\n    this.emit(\"drain\");\n  }\n\n  if (this._bufferLength === 0 && this._ended && !this._endEmitted) {\n    // debug(\"emitting end\", this._bufferLength)\n    this._endEmitted = true;\n    this.emit(\"end\");\n  }\n\n  this._emitting = false; // debug(\"    BS no longer emitting\", flush, this._paused, this._emitting, this._bufferLength, this._chunkSize)\n};","map":null,"metadata":{},"sourceType":"script"}