{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nvar Entrypoint =\n/*#__PURE__*/\nfunction (_ChunkGroup) {\n  _inherits(Entrypoint, _ChunkGroup);\n\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  function Entrypoint(name) {\n    var _this;\n\n    _classCallCheck(this, Entrypoint);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Entrypoint).call(this, name));\n    /** @type {Chunk=} */\n\n    _this.runtimeChunk = undefined;\n    return _this;\n  }\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n\n\n  _createClass(Entrypoint, [{\n    key: \"isInitial\",\n    value: function isInitial() {\n      return true;\n    }\n    /**\n     * Sets the runtimeChunk for an entrypoint.\n     * @param {Chunk} chunk the chunk being set as the runtime chunk.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRuntimeChunk\",\n    value: function setRuntimeChunk(chunk) {\n      this.runtimeChunk = chunk;\n    }\n    /**\n     * Fetches the chunk reference containing the webpack bootstrap code\n     * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n     */\n\n  }, {\n    key: \"getRuntimeChunk\",\n    value: function getRuntimeChunk() {\n      return this.runtimeChunk || this.chunks[0];\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunkt that will be replaced\n     * @returns {boolean} rerturns true for\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n      return _get(_getPrototypeOf(Entrypoint.prototype), \"replaceChunk\", this).call(this, oldChunk, newChunk);\n    }\n  }]);\n\n  return Entrypoint;\n}(ChunkGroup);\n\nmodule.exports = Entrypoint;","map":null,"metadata":{},"sourceType":"script"}