{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/zs/Desktop/ZSP_site_2020/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Source = require(\"./Source\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar REPLACE_REGEX = /\\n(?=.|\\s)/g;\n\nfunction cloneAndPrefix(node, prefix, append) {\n  if (typeof node === \"string\") {\n    var result = node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n    if (append.length > 0) result = append.pop() + result;\n    if (/\\n$/.test(node)) append.push(prefix);\n    return result;\n  } else {\n    var newNode = new SourceNode(node.line, node.column, node.source, node.children.map(function (node) {\n      return cloneAndPrefix(node, prefix, append);\n    }), node.name);\n    newNode.sourceContents = node.sourceContents;\n    return newNode;\n  }\n}\n\n;\n\nvar PrefixSource =\n/*#__PURE__*/\nfunction (_Source) {\n  _inherits(PrefixSource, _Source);\n\n  function PrefixSource(prefix, source) {\n    var _this;\n\n    _classCallCheck(this, PrefixSource);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrefixSource).call(this));\n    _this._source = source;\n    _this._prefix = prefix;\n    return _this;\n  }\n\n  _createClass(PrefixSource, [{\n    key: \"source\",\n    value: function source() {\n      var node = typeof this._source === \"string\" ? this._source : this._source.source();\n      var prefix = this._prefix;\n      return prefix + node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var node = this._source.node(options);\n\n      var append = [this._prefix];\n      return new SourceNode(null, null, null, [cloneAndPrefix(node, this._prefix, append)]);\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      var prefix = this._prefix;\n\n      var map = this._source.listMap(options);\n\n      return map.mapGeneratedCode(function (code) {\n        return prefix + code.replace(REPLACE_REGEX, \"\\n\" + prefix);\n      });\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      if (typeof this._source === \"string\") hash.update(this._source);else this._source.updateHash(hash);\n      if (typeof this._prefix === \"string\") hash.update(this._prefix);else this._prefix.updateHash(hash);\n    }\n  }]);\n\n  return PrefixSource;\n}(Source);\n\nrequire(\"./SourceAndMapMixin\")(PrefixSource.prototype);\n\nmodule.exports = PrefixSource;","map":null,"metadata":{},"sourceType":"script"}